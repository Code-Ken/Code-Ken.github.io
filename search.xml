<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数据结构第0章--数据结构简介]]></title>
      <url>http://yoursite.com/2017/11/16/data-struct-0/</url>
      <content type="html"><![CDATA[<h1 id="为什么学习数据结构"><a href="#为什么学习数据结构" class="headerlink" title="为什么学习数据结构"></a>为什么学习数据结构</h1><p>数据结构是计算机专业的基础课程之一，所有计算机系统和软件都要用到各种类型的数据结构。<br>学习数据结构，并不仅仅是学习其中现成的那些队列,堆栈,二叉树,图等经典结构,也不仅仅是学习其中的那些快速排序、冒泡排序等算法。<br>更重要的是学习到一种思想:<code>如何把现实问题转化为计算机语言的表示</code><br><a id="more"></a><br>计算机是一种很笨的机器，起语言本质是二进制的，及时是C,Java等高级语言也只不过是包装而已，而我们用的自然语言是典型的模糊，不精确的<br>我们要做的工作就是怎样把自然语言描述的问题转换成计算机语言表示。<br>到底该怎么转化,《数据结构》已经给出了指引:</p>
<blockquote>
<p>设计出数据结构,在施加以算法就行<br>程序设计 = 数据结构  + 算法</p>
</blockquote>
<p>这是一种非常重要的逻辑能力锻炼,也是程序员入门的条件</p>
<h1 id="数据结构分类"><a href="#数据结构分类" class="headerlink" title="数据结构分类"></a>数据结构分类</h1><p>数据结构分为两大类：逻辑结构与物理结构</p>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p>是指数据对象中数据元素之间的相互关系,是针对具体问题的,为了解决某个问题,在对问题理解的基础上,选择一个合适的数据结构来表示数据元素之间的<code>逻辑</code>关系<br>主要分为四种：</p>
<ul>
<li>集合结构:集合结构中的数据元素除了同属于一个集合外,它们之间没有其他关系</li>
<li>线性结构:线性结构中的数据元素之间是一对一的关系</li>
<li>树形结构:树形结构中的元素之间是一对多的层次关系</li>
<li>图形结构:图形结构的数据元素之间是多对多的关系<br><img src="/2017/11/16/data-struct-0/jiegou.png" alt=""></li>
</ul>
<h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><p>也称做存储结构,是指数据的逻辑结构在计算机中的存储形式,就是怎么存在计算机存储器(内存、硬盘、光盘等)中<br>逻辑结构是面向问题的,而物理结构是面向计算机的,其基本的目标就是将数据及其逻辑关系存到计算机的内存中去<br>物理结构分为两种: </p>
<h3 id="顺序储存结构"><a href="#顺序储存结构" class="headerlink" title="顺序储存结构"></a>顺序储存结构</h3><p>是把数据存放在地址连续的存储单元里,其数据之间的逻辑关系和物理关系是一致的<br><img src="/2017/11/16/data-struct-0/xianxing.png" alt=""></p>
<h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><p>是把数据存放在任意的存储单元里,这组储存单元可以是连续的,也可以是不连续的<br>它不能反映其逻辑关系,因此需要用一个指针存放数据元素的地址,这样通过地址就可以找到相关数据元素的位置了<br><img src="/2017/11/16/data-struct-0/lianjia.png" alt=""></p>
<h1 id="抽象数据类型ADT"><a href="#抽象数据类型ADT" class="headerlink" title="抽象数据类型ADT"></a>抽象数据类型ADT</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关。</p>
</blockquote>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>根据抽象数据类型的定义，它还包括定义在该模型上的一组操作。就像“超级玛丽”这个经典的任天堂游戏，里面的游戏主角是马里奥（Mario)。我们给他定义了几种基本操作，走（前进、后退、上、下)、跳、打子弹等。</p>
<p>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。至于，一个抽象数据类型到底需要哪些操作，这就只能由设计者根据实际需要来定。像马里奥， 可能开始只有两种操作，走和跳，后来发现应该要增加一种打子弹的操作，再后来发现有些玩家希望它可以走得快一点，就有了按住打子弹键后前进就会“跑”的操作。这都是根据实际情况来设计的</p>
<p><code>抽象的意思是抛开问题看本质～</code></p>
<h2 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h2><p>抽象数据模型的标准格式：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名</span><br><span class="line">Date </span><br><span class="line">    数据元素之间的逻辑关系定义</span><br><span class="line">Operation</span><br><span class="line">    操作<span class="number">1</span></span><br><span class="line">        初始条件</span><br><span class="line">        操作结果描述</span><br><span class="line">    操作<span class="number">2</span></span><br><span class="line">        ......</span><br><span class="line">    操作n</span><br><span class="line">        ......</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单机做日志规范]]></title>
      <url>http://yoursite.com/2016/07/14/single-pc-log-stand/</url>
      <content type="html"><![CDATA[<center>单机做日志制定的规范</center>

<a id="more"></a>
<h2 id="日志说明"><a href="#日志说明" class="headerlink" title="日志说明"></a>日志说明</h2><p>日志类是基于 <a href="https://github.com/Neeke/SeasLog" target="_blank" rel="external">SeasLog</a> 的二次封装。</p>
<h2 id="日志路径"><a href="#日志路径" class="headerlink" title="日志路径"></a>日志路径</h2><p>日志的根目录<code>{app}log</code>在入口文件index.php中已设置好，为方便调试，可以注释掉原有路径，设置成自己本地路径：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//SeasLog::setBasePath('/Users/Ken/log/seaslog/vyx/www');   </span></span></span><br><span class="line"><span class="php">SeasLog::setBasePath(<span class="string">'自己本地路径的绝对地址'</span>);     <span class="comment">//设置成自己本地路径</span></span></span><br></pre></td></tr></table></figure>
<p><code>⚠️注意：任何人禁止上传自己本地配置到版本库！！！</code></p>
<h2 id="日志结构"><a href="#日志结构" class="headerlink" title="日志结构"></a>日志结构</h2><p>日志结构为</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└── &#123;app&#125;log                -------        APP日志</span><br><span class="line">    ├── <span class="builtin-name">warning</span>             -------        警告日志</span><br><span class="line">    ├── <span class="builtin-name">error</span>               -------        错误日志</span><br><span class="line">    ├── emergency           -------        紧急错误日志</span><br><span class="line">    └──<span class="built_in"> default </span>            -------        默认日志文件夹</span><br><span class="line">        ├── <span class="builtin-name">debug</span>           -------        debug日志</span><br><span class="line">        ├── oooo            -------        oooo日志</span><br><span class="line">        └── xxxx            -------        xxxx日志</span><br></pre></td></tr></table></figure>
<h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>日志级别分为五种：</p>
<ul>
<li>警告日志(warning) =&gt; 如：前台传参有问题，有非法字符，异地登录等</li>
<li>错误日志(error) =&gt; 影响项目运行的错误</li>
<li>紧急日志(emergency) =&gt; 严重影响项目运行的错误，需要运维人员马上处理的</li>
<li>一般日志(info) =&gt; 重要参数传递接收日志，订单日志，操作日志等</li>
<li>调试日志(debug) =&gt; 开发调试时打印出的日志</li>
</ul>
<p>一般日志和调试日志都放到default文件夹下，其他日志放到相对应文件夹下</p>
<h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>log的同一格式为</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;type&#125; | <span class="type">&#123;pid</span>&#125; | <span class="type">&#123;timeStamp</span>&#125; |<span class="type">&#123;dateTime</span>&#125; | <span class="type">&#123;logInfo</span>&#125;</span><br><span class="line">//demo</span><br><span class="line">debug | <span class="type">29657</span> | <span class="type">1461229197</span><span class="number">.928</span> | <span class="type">2016</span>:<span class="number">04</span>:<span class="number">21</span> <span class="number">16</span>:<span class="number">59</span>:<span class="number">57</span> | <span class="type">aaaaa</span></span><br></pre></td></tr></table></figure>
<h2 id="日志调用方式"><a href="#日志调用方式" class="headerlink" title="日志调用方式"></a>日志调用方式</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误日志调用方式</span></span><br><span class="line">Lib_Log<span class="type">::errorLog</span>($message)</span><br><span class="line"><span class="comment">//默认为error级别，若想修改成warning或emergency级别需加入第二个参数</span></span><br><span class="line">Lib_Log<span class="type">::errorLog</span>($message,<span class="string">'warning'</span>|<span class="string">'emergency'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般日志调用方式</span></span><br><span class="line">Lib_log<span class="type">::log</span>($message,$model)</span><br><span class="line"><span class="comment">//$model为日志模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//debug日志调用方式</span></span><br><span class="line">Lib_log<span class="type">::debugLog</span>($message)</span><br></pre></td></tr></table></figure>
<p><code>⚠️注意：任何人禁止将debug函数传至svn</code></p>
<p>调用相关函数后，日志会保存到相应的文件夹</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Lib_Log::errorLog(<span class="symbol">'this</span> <span class="keyword">is</span> <span class="literal">error</span> log');</span><br><span class="line">Lib_Log::errorLog(<span class="symbol">'this</span> <span class="keyword">is</span> <span class="literal">warning</span> log',<span class="symbol">'warning</span>');</span><br><span class="line">Lib_Log::errorLog(<span class="symbol">'this</span> <span class="keyword">is</span> emergency log',<span class="symbol">'emergency</span>');</span><br><span class="line">Lib_Log::log(<span class="symbol">'this</span> <span class="keyword">is</span> info log <span class="keyword">for</span> oooo',<span class="symbol">'oooo</span>');</span><br><span class="line">Lib_Log::log(<span class="symbol">'this</span> <span class="keyword">is</span> info log <span class="keyword">for</span> xxxx',<span class="symbol">'xxxx</span>');</span><br><span class="line">Lib_Log::debugLog(<span class="symbol">'this</span> <span class="keyword">is</span> debug log ');</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">www/</span><br><span class="line">├── default</span><br><span class="line">│   ├── debug</span><br><span class="line">│   │   └── debug.20160421.log</span><br><span class="line">│   ├── oooo</span><br><span class="line">│   │   └── info.20160421.log</span><br><span class="line">│   └── xxxx</span><br><span class="line">│       └── info.20160421.log</span><br><span class="line">├── emergency</span><br><span class="line">│   └── emergency.20160421.log</span><br><span class="line">├── error</span><br><span class="line">│   └── error.20160421.log</span><br><span class="line">└── warning</span><br><span class="line">    └── warning.20160421.log</span><br></pre></td></tr></table></figure>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line">/**</span><br><span class="line"> * Class Lib_Log 日志类</span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Lib_Log</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * 错误日志函数</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param string $level</span><br><span class="line">     * @return bool</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">errorLog</span><span class="params">($message, $level = <span class="string">"error"</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $map = <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">            <span class="string">"warning"</span> =&gt; SEASLOG_WARNING,</span></span><br><span class="line"><span class="php">            <span class="string">"error"</span> =&gt; SEASLOG_ERROR,</span></span><br><span class="line"><span class="php">            <span class="string">"emergency"</span> =&gt; SEASLOG_EMERGENCY</span></span><br><span class="line"><span class="php">        );</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!in_array($level, $map)) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $ext_info = <span class="string">""</span>;</span></span><br><span class="line"><span class="php">        $trace = debug_backtrace();</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (count($trace)) &#123;</span></span><br><span class="line"><span class="php">            $tmp = <span class="keyword">isset</span>($trace[<span class="number">1</span>]) ? <span class="string">" | 执行函数名: "</span> . $trace[<span class="number">1</span>][<span class="string">'function'</span>] : <span class="string">""</span>;</span></span><br><span class="line"><span class="php">            $ext_info = <span class="string">" | 出错文件地址: "</span> . $trace[<span class="number">0</span>][<span class="string">'file'</span>] . $tmp . <span class="string">" | 出错位置在第"</span> . $trace[<span class="number">0</span>][<span class="string">'line'</span>] . <span class="string">"行左右"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> SeasLog::log($map[$level], $message . $ext_info, <span class="keyword">array</span>(), $level) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 一般日志函数</span><br><span class="line">     * @param $message</span><br><span class="line">     * @param string $model</span><br><span class="line">     * @return bool</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($message, $model)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">empty</span>($model)) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> SeasLog::log(SEASLOG_INFO, $message . <span class="string">'===&gt; Ip :'</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>], <span class="keyword">array</span>(), <span class="string">'/default/'</span> . $model) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * debug日志函数</span><br><span class="line">     * @param $message</span><br><span class="line">     * @return bool</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">debugLog</span><span class="params">($message)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (!SeasLog::log(SEASLOG_DEBUG, $message, <span class="keyword">array</span>(), <span class="string">'default/debug'</span>)) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
            <tag> Seaslog </tag>
            
            <tag> 日志 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSONP跨域问题的解决方法]]></title>
      <url>http://yoursite.com/2016/07/13/jsonp-json-ajax/</url>
      <content type="html"><![CDATA[<p><center>JSONP介绍与应用</center><br><a id="more"></a></p>
<h2 id="Ajax技术"><a href="#Ajax技术" class="headerlink" title="Ajax技术"></a>Ajax技术</h2><p>Asynchronous JavaScript and XML (Ajax) 是Web2.0的关键技术。<br>Ajax允许在不干扰Web应用程序的显示和行为的情况下在后台进行数据检索。使用XMLHttpRequest函数获取数据，它是一种API,允许客户端JavaScript 通过 HTTP 连接到远程服务器。</p>
<p>不过，由于受到浏览器的限制，该方法<code>不允许跨域通信</code>。如果尝试从不同的域请求数据，会出现安全错误。</p>
<h2 id="啥是跨域"><a href="#啥是跨域" class="headerlink" title="啥是跨域"></a>啥是跨域</h2><p>   所有的浏览器都遵守同源策略，这个策略能够保证一个源的动态脚本不能读取或操作其他源的http响应和cookie，这就使浏览器隔离了来自不同源的内容，防止它们互相操作。所谓同源是指<code>协议、域名和端口</code>都一致的情况。<br>简单的来说，出于安全方面的考虑，页面中的JavaScript无法访问其他服务器上的数据，即“同源策略”。而跨域就是通过某些手段来绕过同源策略限制，实现不同服务器之间通信的效果。</p>
<p>举例说明：</p>
<p><img src="/2016/07/13/jsonp-json-ajax/1.png" alt=""></p>
<h2 id="怎么解决跨域问题"><a href="#怎么解决跨域问题" class="headerlink" title="怎么解决跨域问题"></a>怎么解决跨域问题</h2><ul>
<li>第三方网站开启HTTP的Access-Control-Allow-Origin参数</li>
</ul>
<p>只有当目标页面的response中，包含了 Access-Control-Allow-Origin 这个header，并且它的值里有我们自己的域名时，浏览器才允许我们拿到它页面的数据进行下一步处理。如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-<span class="string">Origin:</span> <span class="string">http:</span><span class="comment">//run.jsbin.io</span></span><br></pre></td></tr></table></figure>
<p>如果它的值设为 * ，则表示谁都可以用：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Access</span>-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>
<p><code>但是谁又喜欢被不认识的人上呢？</code></p>
<ul>
<li>将网站自身服务器做中转服务器请求跨域网站，绕过跨域问题</li>
</ul>
<p><img src="/2016/07/13/jsonp-json-ajax/2.png" alt=""></p>
<p>⚠️注意：实际请求中B Server实际是返回了数据的只是浏览器不让使用而已～</p>
<p>浏览器不让使用:<br><img src="/2016/07/13/jsonp-json-ajax/3.png" alt=""></p>
<p>用Charles监控的数据<br><img src="/2016/07/13/jsonp-json-ajax/4.png" alt=""><br><img src="/2016/07/13/jsonp-json-ajax/5.png" alt=""></p>
<ul>
<li>使用JSONP解决跨域问题</li>
</ul>
<h2 id="什么是JSONP"><a href="#什么是JSONP" class="headerlink" title="什么是JSONP"></a>什么是JSONP</h2><ul>
<li>别人发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，别人还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如script、img、iframe）</li>
<li>于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</li>
<li>恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</li>
<li>这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</li>
<li>客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</li>
<li>千言万语汇成一句话:JSONP是一段参数是json格式(大多数情况)的JS代码</li>
</ul>
<h2 id="JSONP的具体实现"><a href="#JSONP的具体实现" class="headerlink" title="JSONP的具体实现"></a>JSONP的具体实现</h2><ul>
<li>静态调取js文件方式实现</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#php代码</span><br><span class="line">exit('demo(&#123;height: 170, weight: 90&#125;)');</span><br><span class="line"></span><br><span class="line">#html代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">demo</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"身高: "</span> + data.height + <span class="string">", 体重: "</span> + data.weight);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:1111"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>动态调取js文件方式实现</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#php代码</span></span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'demo(&#123;height: 170, weight: 90&#125;)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#html代码</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> demo(data) &#123;</span><br><span class="line">        alert(<span class="string">"身高: "</span> + data.height + <span class="string">", 体重: "</span> + data.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var url = <span class="string">"localhost:1111"</span>; </span><br><span class="line">    var script = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.setAttribute(<span class="string">'src'</span>, url);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>动态获取callback函数</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上面的callback函数都是Sever写死的,我们可以用url传参方式动态获取回调函数名称</span></span><br><span class="line"><span class="comment">#php代码</span></span><br><span class="line"><span class="keyword">exit</span>(<span class="variable">$_GET</span>[<span class="string">'callback'</span>].<span class="string">'(&#123;height: 170, weight: 90&#125;)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#html代码</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> demo(data) &#123;</span><br><span class="line">        alert(<span class="string">"身高: "</span> + data.height + <span class="string">", 体重: "</span> + data.weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var url = <span class="string">"localhost:1111"</span>; </span><br><span class="line">    var script = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.setAttribute(<span class="string">'src'</span>, url+<span class="string">'?callback=demo'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用JQuery处理JSONP</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#php代码</span><br><span class="line">exit($_GET['callback'].'(&#123;height: 170, weight: 90&#125;)');</span><br><span class="line"></span><br><span class="line">#html代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> url = <span class="string">'localhost:1111'</span>;</span></span><br><span class="line"><span class="javascript">	$.ajax (&#123;</span></span><br><span class="line"><span class="undefined">		url: url,</span></span><br><span class="line"><span class="actionscript">		dataType: <span class="string">'jsonp'</span>,</span></span><br><span class="line"><span class="actionscript">		success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">		alert(<span class="string">"身高: "</span> + data.height + <span class="string">", 体重: "</span> + data.weight);</span></span><br><span class="line"><span class="undefined">	&#125;,</span></span><br><span class="line"><span class="undefined">	&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>$.ajax函数判断dataType为jsonp时会自动加入callback函数,并在success中自动调取:</p>
<p><img src="/2016/07/13/jsonp-json-ajax/6.png" alt=""></p>
<p><img src="/2016/07/13/jsonp-json-ajax/7.png" alt=""></p>
<h2 id="JSONP服务器错误的处理"><a href="#JSONP服务器错误的处理" class="headerlink" title="JSONP服务器错误的处理"></a>JSONP服务器错误的处理</h2><p>当我们用ajax请求jsonp时,如果如果服务器端的错误我们是不能通过ajax原生的error属性来捕获到错误的:</p>
<blockquote>
<p>error<br>A function to be called if the request fails (…) Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.</p>
</blockquote>
<h2 id="JSONP-POST问题"><a href="#JSONP-POST问题" class="headerlink" title="JSONP POST问题"></a>JSONP POST问题</h2><p>JsonP only works with type: GET</p>
<blockquote>
<p>script”: Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, “_=[TIMESTAMP]”, to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.</p>
</blockquote>
<p>即使你写成POST方式,ajax也会给你转成get方式,如果想向第三方网站提交数据,最好还是先提交到自己的服务器上，通过自己的服务器中转到第三方服务器</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.ibm.com/developerworks/cn/web/wa-aj-jsonp1/index.html" target="_blank" rel="external">使用 JSONP 实现跨域通信，第 1 部分: 结合 JSONP 和 jQuery 快速构建强大的 mashup</a></li>
<li><a href="http://www.xiaoxiaozi.com/2011/11/25/2239/" target="_blank" rel="external">JSONP与POST方式请求</a></li>
<li><a href="http://stackoverflow.com/questions/19035557/jsonp-request-error-handling" target="_blank" rel="external">Stack Overflow:JSONP request error handling</a></li>
<li><a href="http://www.open-open.com/lib/view/open1344558130468.html" target="_blank" rel="external">利用JSONP解决AJAX跨域问题的原理与jQuery解决方案</a></li>
<li><a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">【原创】说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 跨域 </tag>
            
            <tag> Ajax </tag>
            
            <tag> JSON </tag>
            
            <tag> JSONP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac使用Virtualbox安装Centos的网络配置]]></title>
      <url>http://yoursite.com/2016/03/30/mac-virtualbox-net-config/</url>
      <content type="html"><![CDATA[<center>真是坑！！！</center>

<a id="more"></a>
<h2 id="virtualbox中设置"><a href="#virtualbox中设置" class="headerlink" title="virtualbox中设置"></a>virtualbox中设置</h2><p><img src="/2016/03/30/mac-virtualbox-net-config/1.png" alt=""></p>
<h2 id="Mac网络设置"><a href="#Mac网络设置" class="headerlink" title="Mac网络设置"></a>Mac网络设置</h2><p><img src="/2016/03/30/mac-virtualbox-net-config/2.png" alt=""></p>
<h2 id="对centos的一些修改"><a href="#对centos的一些修改" class="headerlink" title="对centos的一些修改"></a>对centos的一些修改</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br><span class="line">    #这个要对应上mac网络上的IP地址</span><br><span class="line">    nameserver 192.168.0.8</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line">    <span class="attribute">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">    #这个文件只保留这些就可以</span><br><span class="line">    <span class="attribute">DEVICE</span>=eth0</span><br><span class="line">    <span class="attribute">ONBOOT</span>=<span class="literal">yes</span></span><br><span class="line">    <span class="attribute">MM_CONTROLLED</span>=<span class="literal">no</span></span><br><span class="line">    <span class="attribute">BOOTPROTO</span>=dhcp</span><br><span class="line"></span><br><span class="line">vi /etc/yum/pluginconf.d/fastestmirror.conf</span><br><span class="line">    <span class="attribute">enabled</span>=0</span><br><span class="line"></span><br><span class="line">chkconfig iptables off</span><br><span class="line">/etc/init.d<span class="built_in">/network </span>restart</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN使用规范]]></title>
      <url>http://yoursite.com/2016/03/26/svn-use-standard/</url>
      <content type="html"><![CDATA[<center>介绍一套项目管理时SVN的使用规范</center>

<a id="more"></a>
<ul>
<li><p>每日进行开发工作之前<code>必须</code>更新代码，下班时提交代码。</p>
</li>
<li><p>各员工需牢记各自的账户和密码，<code>一定不</code>得向他人透漏，严禁使用他人账户进行SVN各项操作</p>
</li>
<li><p>文件提交时要求<strong><code>必须</code></strong>提交注释，注明相关修改信息，日志信息描述的越详细越好，让项目组其他成员在看到标注后不用详细看代码就能了解你所做的修改</p>
</li>
<li><p>对提交的信息采用明晰的标注</p>
</li>
</ul>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标注方法：</span><br><span class="line">    +) 表示增加了功能 </span><br><span class="line">    *) 表示对某些功能进行了更改 </span><br><span class="line">    -<span class="ruby">) 表示删除了文件，或者对某些功能进行了裁剪，删除，屏蔽。 </span></span><br><span class="line"><span class="ruby">    b) 表示修正了具体的某个bug</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文件提交前<code>必须</code>先update代码再commit,如果遇到冲突,<code>严禁</code>删除原版本后直接上传新版本</li>
<li>文件提交前<code>必须</code>检查是否有语法错误,php文件要使用<code>php -l ［文件名］</code>通过检测</li>
<li>提前宣布修改计划。当你计划进行修改，需要影响到SVN里的许多文件时，先通过邮件或者当面通知其他开发者<br>例如，修改底层数据库模块时，有可能影响到业务逻辑层调用数据库模块的地方。这样其他开发者会有准备，也会对修改提出意见和建议</li>
<li><code>原子性</code>提交代码(即一个小功能提交一次)</li>
<li><code>禁止</code>使用锁定功能</li>
<li>SVN管理员需对SVN的所有项目<code>定期备份</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ProjectManage </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ProjectManage </tag>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP基本代码规范]]></title>
      <url>http://yoursite.com/2016/03/24/php-psr/</url>
      <content type="html"><![CDATA[<center>根据PSR指定的项目代码规范</center>

<a id="more"></a>
<h1 id="PHP基本代码规范"><a href="#PHP基本代码规范" class="headerlink" title="PHP基本代码规范"></a>PHP基本代码规范</h1><p>本篇参考PSR规范制定了代码基本元素的相关标准<br><br>以确保共享的PHP代码间具有较高程度的技术互通性。</p>
<h2 id="1-文件"><a href="#1-文件" class="headerlink" title="1. 文件"></a>1. 文件</h2><h3 id="1-1-PHP标签"><a href="#1-1-PHP标签" class="headerlink" title="1.1 PHP标签"></a>1.1 PHP标签</h3><ul>
<li>PHP代码<strong>必须</strong>使用 <code>&lt;?php ?&gt;</code> 长标签 或 <code>&lt;?= ?&gt;</code> 短输出标签；</li>
<li><strong>一定不可</strong>使用其它自定义标签。</li>
<li>纯PHP代码文件<strong>必须</strong>省略最后的 <code>?&gt;</code> 结束标签。</li>
</ul>
<h3 id="1-2-PHP编码"><a href="#1-2-PHP编码" class="headerlink" title="1.2 PHP编码"></a>1.2 PHP编码</h3><ul>
<li>PHP代码文件<strong>必须</strong>以 <code>不带BOM的 UTF-8</code> 编码；</li>
</ul>
<h3 id="1-3-行"><a href="#1-3-行" class="headerlink" title="1.3 行"></a>1.3 行</h3><ul>
<li>所有PHP文件<strong>必须</strong>使用<code>Unix LF (linefeed)</code>作为行的结束符。</li>
<li>所有PHP文件<strong>必须</strong>以一个空白行作为结束</li>
<li>非空行后<strong>一定不能</strong>有多余的空格符。</li>
<li>空行<strong>可以</strong>使得阅读代码更加方便以及有助于代码的分块。</li>
<li>每行<strong>一定不能</strong>存在多于一条语句</li>
</ul>
<h3 id="1-4-缩进"><a href="#1-4-缩进" class="headerlink" title="1.4 缩进"></a>1.4 缩进</h3><ul>
<li>代码<strong>必须</strong>使用4个空格符的缩进，<strong>一定不能</strong>用 tab键。<br>备注: 使用空格而不是tab键缩进的好处在于，避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆,并且使用空格缩进，让对齐变得更方便</li>
</ul>
<h3 id="1-5-关键字-以及-True-False-Null"><a href="#1-5-关键字-以及-True-False-Null" class="headerlink" title="1.5 关键字 以及 True/False/Null"></a>1.5 关键字 以及 True/False/Null</h3><p>PHP所有 <a href="http://php.net/manual/en/reserved.keywords.php" target="_blank" rel="external">关键字</a>  <strong>必须</strong>全部小写。<br>常量 <code>true</code> 、<code>false</code> 和 <code>null</code> 也<strong>必须</strong>全部小写</p>
<h2 id="2-namespace-以及-use-声明"><a href="#2-namespace-以及-use-声明" class="headerlink" title="2. namespace 以及 use 声明"></a>2. namespace 以及 use 声明</h2><ul>
<li><code>namespace</code> 声明后 必须 插入一个空白行。</li>
<li>所有 <code>use</code> 必须 在 <code>namespace</code> 后声明。</li>
<li>每条 <code>use</code> 声明语句 必须 只有一个 <code>use</code> 关键词。</li>
<li><code>use</code> 声明语句块后 必须 要有一个空白行。</li>
</ul>
<h2 id="3-类、属性和方法"><a href="#3-类、属性和方法" class="headerlink" title="3. 类、属性和方法"></a>3. 类、属性和方法</h2><h3 id="3-1-命名"><a href="#3-1-命名" class="headerlink" title="3.1 命名"></a>3.1 命名</h3><ul>
<li>类的命名<strong>必须</strong>遵循 <code>StudlyCaps</code> 大写开头的驼峰命名规范。</li>
<li>方法名称<strong>必须</strong>符合 <code>camelCase</code> 式的小写开头驼峰命名规范。</li>
<li>类中的常量所有字母都<strong>必须</strong>大写，单词间用下划线分隔。</li>
<li>根据规范，每个类都独立为一个文件，且命名空间至少有一个层次：顶级的组织名称（vendor name）。</li>
</ul>
<h3 id="3-2-结构"><a href="#3-2-结构" class="headerlink" title="3.2 结构"></a>3.2 结构</h3><ul>
<li>类的开始花括号(<code>{</code>)<strong>必须</strong>写在函数声明后自成一行，结束花括号(<code>}</code>)也<strong>必须</strong>写在函数主体后自成一行。</li>
<li>方法的开始花括号(<code>{</code>)<strong>必须</strong>写在函数声明后自成一行，结束花括号(<code>}</code>)也<strong>必须</strong>写在函数主体后自成一行。</li>
<li>类的属性和方法<strong>必须</strong>添加访问修饰符（<code>private</code>、<code>protected</code> 以及 <code>public</code>）， <code>abstract</code> 以及 <code>final</code> <strong>必须</strong>声明在访问修饰符之前，而 <code>static</code> <strong>必须</strong>声明在访问修饰符之后。</li>
<li>控制结构的关键字后<strong>必须</strong>要有一个空格符，而调用方法或函数时则<strong>一定不能</strong>有。</li>
<li>控制结构的开始花括号(<code>{</code>)<strong>必须</strong>写在声明的同一行，而结束花括号(<code>}</code>)<strong>必须</strong>写在主体后自成一行。</li>
<li>控制结构的开始左括号后和结束右括号前，都<strong>一定不能</strong>有空格符。</li>
</ul>
<h3 id="3-3-扩展与继承"><a href="#3-3-扩展与继承" class="headerlink" title="3.3 扩展与继承"></a>3.3 扩展与继承</h3><ul>
<li>关键词 <code>extends</code> 和 <code>implements</code><strong>必须</strong>写在类名称的同一行。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">FooClass</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span>, \<span class="title">Countable</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// constants, properties, methods</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>implements</code> 的继承列表也<strong>可以</strong>分成多行，这样的话，每个继承接口名称都<strong>必须</strong>分开独立成行，包括第一个。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">FooClass</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> <span class="keyword">extends</span> <span class="title">ParentClass</span> <span class="keyword">implements</span></span></span></span><br><span class="line"><span class="php">    \ArrayAccess,</span></span><br><span class="line"><span class="php">    \Countable,</span></span><br><span class="line"><span class="php">    \Serializable</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="comment">// constants, properties, methods</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-属性"><a href="#3-4-属性" class="headerlink" title="3.4 属性"></a>3.4 属性</h3><ul>
<li>每个属性都<strong>必须</strong>添加访问修饰符。</li>
<li><strong>一定不可</strong>使用关键字 <code>var</code> 声明一个属性。</li>
<li>每条语句<strong>一定不可</strong>定义超过一个属性。</li>
<li><strong>不要</strong>使用下划线作为前缀，来区分属性是 protected 或 private。</li>
</ul>
<p>以下是属性声明的一个范例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $foo = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-5-方法及函数调用"><a href="#3-5-方法及函数调用" class="headerlink" title="3.5 方法及函数调用"></a>3.5 方法及函数调用</h3><ul>
<li>方法及函数调用时，方法名或函数名与参数左括号之间<strong>一定不能</strong>有空格，参数右括号前也 <strong>一定不能</strong>有空格。每个参数前<strong>一定不能</strong>有空格，但其后<strong>必须</strong>有一个空格。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">bar();</span></span><br><span class="line"><span class="php">$foo-&gt;bar($arg1);</span></span><br><span class="line"><span class="php">Foo::bar($arg2, $arg3);</span></span><br></pre></td></tr></table></figure>
<ul>
<li>参数<strong>可以</strong>分列成多行，此时包括第一个参数在内的每个参数都<strong>必须</strong>单独成行。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$foo-&gt;bar(</span></span><br><span class="line"><span class="php">    $longArgument,</span></span><br><span class="line"><span class="php">    $longerArgument,</span></span><br><span class="line"><span class="php">    $muchLongerArgument</span></span><br><span class="line"><span class="php">);</span></span><br></pre></td></tr></table></figure>
<h3 id="3-6-流程判读语句"><a href="#3-6-流程判读语句" class="headerlink" title="3.6 流程判读语句"></a>3.6 流程判读语句</h3><p>请参考范例</p>
<h2 id="4-范例"><a href="#4-范例" class="headerlink" title="4. 范例"></a>4. 范例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Vendor</span>\<span class="title">Package</span>;	<span class="comment">//根据规范，每个类都独立为一个文件且命名空间至少有一个层次：顶级的组织名称（vendor name）。</span></span></span><br><span class="line"><span class="php"><span class="comment">//namespace声明后插入一个空白行</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">FooInterface</span>;	<span class="comment">//所有use必须在namespace后声明</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">BarClass</span> <span class="title">as</span> <span class="title">Bar</span>;	<span class="comment">//每条use声明语句必须只有一个use关键词</span></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;	<span class="comment">//use声明语句块后必须要有一个空白行</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">FooController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> <span class="keyword">implements</span> <span class="title">FooInterface</span>	//关键词<span class="keyword">extends</span>和<span class="keyword">implements</span>写在类名称的同一行,</span></span></span><br><span class="line"><span class="php">    <span class="comment">//类的命名遵循大写开头的驼峰命名规范</span></span></span><br><span class="line"><span class="php">&#123;	<span class="comment">//类的开始花括号 &#123; 写在函数声明后自成一行</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $foo = <span class="string">'foo'</span>;	<span class="comment">//每个属性都必须添加访问修饰符</span></span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $bar = <span class="keyword">null</span>;    <span class="comment">//常量true false和null必须全部小写</span></span></span><br><span class="line"><span class="php">                            <span class="comment">//每条语句一定不可定义超过一个属性</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sampleFunction</span><span class="params">($a, $b = null)</span>//方法名称符合小写开头驼峰命名规范</span></span></span><br><span class="line"><span class="php">    &#123;	<span class="comment">//方法的开始花括号 &#123; 写在函数声明后自成一行</span></span></span><br><span class="line"><span class="php">        $a = <span class="number">4</span>;     <span class="comment">//符号两边要有空格</span></span></span><br><span class="line"><span class="php">        $foo-&gt;bar($arg1);   <span class="comment">//方法及函数调用时，方法名或函数名与参数左括号之间一定不能有空格，参数右括号前也一定不能有空格。</span></span></span><br><span class="line"><span class="php">        Foo::bar($arg2, $arg3);     <span class="comment">//每个逗号后面必须要有一个空格，而逗号前面一定不能有空格</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;	<span class="comment">//结束花括号 &#125; 写在函数主体后自成一行</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span>	//类的属性和方法必须添加访问修饰符（`<span class="title">private</span>`、`<span class="title">protected</span>` 以及 `<span class="title">public</span>`)</span></span></span><br><span class="line"><span class="php">        <span class="comment">//abstract以及final声明在访问修饰符之前</span></span></span><br><span class="line"><span class="php">        <span class="comment">//static声明在访问修饰符之后。</span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">//标准的if结构如下代码所示，留意 括号、空格以及花括号的位置，</span></span></span><br><span class="line"><span class="php">        <span class="comment">//注意 else 和 elseif 都与前面的结束花括号在同一行。</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($expr1) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// if body</span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">elseif</span> ($expr2) &#123;   <span class="comment">//应该使用关键词elseif代替所有else if以使得所有的控制关键字都像是单独的一个词。</span></span></span><br><span class="line"><span class="php">            <span class="comment">// elseif body</span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// else body;</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//标准的switch结构如下代码所示，留意括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php">        <span class="comment">//case语句必须相对switch进行一次缩进，而break语句以及case内的其它语句都必须相对case进行一次缩进。</span></span></span><br><span class="line"><span class="php">        <span class="comment">//如果存在非空的case直穿语句,主体里必须有类似 `// no break` 的注释。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">switch</span> ($expr) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">0</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> <span class="string">'First case, with a break'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> <span class="string">'Second case, which falls through'</span>;</span></span><br><span class="line"><span class="php">                <span class="comment">// no break</span></span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="php">            <span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> <span class="string">'Third case, return instead of break'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> <span class="string">'Default case'</span>;</span></span><br><span class="line"><span class="php">                <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//一个规范的 `while` 语句应该如下所示，注意其 括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">while</span> ($expr) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// structure body</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//标准的 `do while` 语句如下所示，同样的，注意其 括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// structure body;</span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">while</span> ($expr);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//标准的 `for` 语句如下所示，注意其 括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// for body</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//标准的 foreach 语句如下所示，注意其 括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($iterable <span class="keyword">as</span> $key =&gt; $value) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// foreach body</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//标准的 try catch 语句如下所示，注意其 括号、空格以及花括号的位置。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// try body</span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (FirstExceptionType $e) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// catch body</span></span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">catch</span> (OtherExceptionType $e) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// catch body</span></span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;	<span class="comment">//结束花括号 &#125; 写在函数主体后自成一行</span></span></span><br><span class="line"><span class="php">    <span class="comment">//纯PHP代码文件必须省略最后的 `<span class="meta">?&gt;</span></span></span>` 结束标签;所有PHP文件必须以一个空白行作为结束</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ProjectManage </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> projectmanage </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql缓存技术]]></title>
      <url>http://yoursite.com/2016/03/24/mysql-cacahe/</url>
      <content type="html"><![CDATA[<center>本文主要介绍mysql缓存技术</center>

<a id="more"></a>
<h2 id="Mysql缓存特征"><a href="#Mysql缓存特征" class="headerlink" title="Mysql缓存特征"></a>Mysql缓存特征</h2><ul>
<li>MysqlL查询缓存机制是MySQL数据库中的重要机制之一</li>
<li>缓存sql文本及查询结果，如果运行相同的sql，服务器直接从缓存中取到结果，而不需要再去解析和执行sql</li>
<li>Mysql缓存适用于那些不常变化的表</li>
<li>缓存的结果是通过sessions共享的，所以一个client查询的缓存结果，另一个client也可以使用</li>
<li>缓存不会返回过时的数据</li>
</ul>
<h2 id="哪些情况下Mysql缓存不起作用"><a href="#哪些情况下Mysql缓存不起作用" class="headerlink" title="哪些情况下Mysql缓存不起作用"></a>哪些情况下Mysql缓存不起作用</h2><ul>
<li>Mysql缓存在分库分表环境下是不起作用的</li>
<li>执行sql里有触发器,自定义函数,或一些变化的函数和事件时,mysql缓存也是不起作用的</li>
<li>如果表变化了，那么这个表的所有mysql缓存就都会失效,变化操作包括更新,插入删除</li>
<li>mysql缓存同样也可以在事务里使用</li>
</ul>
<ul>
<li>查询语句是一个外部查询的子查询时,Mysql缓存是不起作用的</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE <span class="emphasis">'Qcache_hits'</span>;</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| Qcache_</span>hits   | 178   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM adminlog WHERE adminlog<span class="emphasis">_id = ANY (SELECT ent_</span>area<span class="emphasis">_id FROM ent);</span></span><br><span class="line"><span class="emphasis">#数据隐藏</span></span><br><span class="line"><span class="emphasis">74 rows in set (0.02 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; SHOW STATUS LIKE 'Qcache_</span>hits';                           </span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| Qcache_</span>hits   | 178   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM adminlog WHERE adminlog<span class="emphasis">_id = ANY (SELECT ent_</span>area<span class="emphasis">_id FROM ent);</span></span><br><span class="line"><span class="emphasis">#数据隐藏</span></span><br><span class="line"><span class="emphasis">3 rows in set (0.09 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">mysql&gt; SHOW STATUS LIKE 'Qcache_</span>hits';                      </span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| Qcache_</span>hits   | 179   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT ent<span class="emphasis">_area_</span>id FROM ent; </span><br><span class="line">#数据隐藏</span><br><span class="line">74 rows in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW STATUS LIKE <span class="emphasis">'Qcache_hits'</span>;</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value |</span></span><br><span class="line"><span class="emphasis">+---------------+-------+</span></span><br><span class="line"><span class="emphasis">| Qcache_</span>hits   | 179   |</span><br><span class="line"><span class="code">+---------------+</span>-------+</span><br><span class="line">1 row in set (0.02 sec)</span><br></pre></td></tr></table></figure>
<p>⚠️注意:</p>
<blockquote>
<p>查询必须是完全相同的(逐字节相同)才能够被认为是相同的。<br>另外，同样的查询字符串由于其它原因可能认为是不同的。<br>使用不同的数据库、不同的协议版本或者不同默认字符集的查询被认为是不同的查询并且分别进行缓存。</p>
</blockquote>
<p>下面sql查询缓存认为是不同的</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tbl_name  </span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> tbl_name</span><br></pre></td></tr></table></figure>
<h2 id="Mysql缓存相关参数"><a href="#Mysql缓存相关参数" class="headerlink" title="Mysql缓存相关参数"></a>Mysql缓存相关参数</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="emphasis">'%query_cache%'</span>;</span><br><span class="line"><span class="code">+------------------------------+</span>---------+</span><br><span class="line">| Variable<span class="emphasis">_name                | Value   |</span></span><br><span class="line"><span class="emphasis">+------------------------------+---------+</span></span><br><span class="line"><span class="emphasis">| have_</span>query<span class="emphasis">_cache             | YES     |      --查询缓存是否可用</span></span><br><span class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_limit            | 1048576 |      --可缓存具体查询结果的最大值</span></span><br><span class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_min_</span>res<span class="emphasis">_unit     | 4096    |      --查询缓存分配的最小块的大小(字节)</span></span><br><span class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_size             | 599040  |      --查询缓存的大小</span></span><br><span class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_type             | ON      |      --是否支持查询缓存</span></span><br><span class="line"><span class="emphasis">| query_</span>cache<span class="emphasis">_wlock_</span>invalidate | OFF     |      --控制当有写锁加在表上的时候，是否先让该表相关的 Query Cache失效</span><br><span class="line"><span class="code">+------------------------------+</span>---------+</span><br><span class="line">6 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>query_cache_min_res_unit</code><br>当查询进行的时候，Mysql把查询结果保存在qurey cache中，但如果要保存的结果比较大，超过query_cache_min_res_unit的值 ，这时候mysql将一边检索结果，一边进行保存结果，所以，有时候并不是把所有结果全部得到后再进行一次性保存，而是每次分配一块query_cache_min_res_unit大小的内存空间保存结果集，使用完后，接着再分配一个这样的块，如果还不不够，接着再分配一个块，依此类推，也就是说，有可能在一次查询中，mysql要进行多次内存分配的操作。<br>适当的调节query_cache_min_res_unit可以优化内存<br>如果你的查询结果都是一些small result,默认的query_cache_min_res_unit可能会造成大量的内存碎片<br>如果你的查询结果都是一些larger resule，你可以适当的把query_cache_min_res_unit调大</p>
</li>
<li><p><code>query_cache_type</code><br>如果query_cache_type的值是0或者OFF，不会读取缓存<br>如果query_cache_type的值是1或者ON会读取缓存除非sql语句中注明“SELECT SQL_NO_CACHE”<br>如果query_cache_type的值是2或者DEMAND只有在sql语句中注明SELECT SQL_CACHE才会读取缓存</p>
</li>
<li><p><code>query_cache_size</code><br>官方建议缓存大小控制在几十兆，不要设置成几百兆，如果设置的太小也是不可以的,设置小于40Kb会有警告。</p>
</li>
</ul>
<h2 id="开启缓存的方式"><a href="#开启缓存的方式" class="headerlink" title="开启缓存的方式"></a>开启缓存的方式</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">global</span> query_cache_size = <span class="number">600000</span>; <span class="comment">--设置缓存内存大小</span></span><br><span class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">global</span> query_cache_type = ON;     <span class="comment">--开启查询缓存</span></span><br></pre></td></tr></table></figure>
<p>⚠️注意</p>
<blockquote>
<p>set global时需要有SUPER权限</p>
</blockquote>
<p>如果在开启Mysql缓存状态下想针对某个表不让它进行缓存查询，此时可以这样写</p>
<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_NO_CACHE * <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure>
<h2 id="查询Mysql缓存状态"><a href="#查询Mysql缓存状态" class="headerlink" title="查询Mysql缓存状态"></a>查询Mysql缓存状态</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE 'Qcache%';</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">|<span class="string"> Variable_name           </span>|<span class="string"> Value  </span>|</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">|<span class="string"> Qcache_free_blocks      </span>|<span class="string"> 1      </span>|<span class="string"> ----在查询缓存中的闲置块</span></span><br><span class="line">|<span class="string"> Qcache_free_memory      </span>|<span class="string"> 382704 </span>|<span class="string"> ----剩余缓存的大小</span></span><br><span class="line">|<span class="string"> Qcache_hits             </span>|<span class="string"> 198    </span>|<span class="string"> ----缓存命中次数</span></span><br><span class="line">|<span class="string"> Qcache_inserts          </span>|<span class="string"> 131    </span>|<span class="string"> ----缓存被插入的次数</span></span><br><span class="line">|<span class="string"> Qcache_lowmem_prunes    </span>|<span class="string"> 0      </span>|<span class="string"> ----由于内存低而被删除掉的缓存条数</span></span><br><span class="line">|<span class="string"> Qcache_not_cached       </span>|<span class="string"> 169    </span>|<span class="string"> ----没有被缓存的条数</span></span><br><span class="line">|<span class="string"> Qcache_queries_in_cache </span>|<span class="string"> 128    </span>|<span class="string"> ----缓存中有多少条查询语句</span></span><br><span class="line">|<span class="string"> Qcache_total_blocks     </span>|<span class="string"> 281    </span>|<span class="string"> ----总块数</span></span><br><span class="line"><span class="string">+-------------------------+--------+</span></span><br><span class="line"><span class="string">8 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://dev.mysql.com/doc/refman/5.6/en/" target="_blank" rel="external">MysqlDocument</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP注销SESSION的方法]]></title>
      <url>http://yoursite.com/2016/03/23/php-session-unset/</url>
      <content type="html"><![CDATA[<center>本文介绍php对session的销毁操作</center>

<a id="more"></a>
<p>​</p>
<h2 id="删除session方法"><a href="#删除session方法" class="headerlink" title="删除session方法"></a>删除session方法</h2><ul>
<li>unset()</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> (<span class="variable">$_SESSION</span>[<span class="string">'xxx'</span>]) 删除单个session</span><br><span class="line"><span class="built_in">unset</span>(<span class="variable">$_SESSION</span>)销毁，而且还没有可行的办法将其恢复。用户也不再可以注册<span class="variable">$_session</span>变量</span><br><span class="line">So千万不要用！</span><br></pre></td></tr></table></figure>
<ul>
<li>array()</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION = <span class="built_in">array</span>()  删除多个session</span><br></pre></td></tr></table></figure>
<ul>
<li>session_destroy()</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">session_destroy</span><span class="params">()</span></span>是注销所有的session变量,并且结束session会话</span><br><span class="line">但在内存中的$_SESSION变量内容依然保留！！！</span><br></pre></td></tr></table></figure>
<ul>
<li>session_unset()</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">session_unset</span><span class="params">()</span></span>并不注销session变量,但把所有的session变量的值清空</span><br></pre></td></tr></table></figure>
<h2 id="一般登出操作消除SESSION的方法"><a href="#一般登出操作消除SESSION的方法" class="headerlink" title="一般登出操作消除SESSION的方法"></a>一般登出操作消除SESSION的方法</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session_unset()<span class="comment">;</span></span><br><span class="line">session_destory()<span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SESSION </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>http://yoursite.com/2016/03/09/http-summary/</url>
      <content type="html"><![CDATA[<center>HTTP协议简介</center>

<a id="more"></a>
<h2 id="HTTP是什么"><a href="#HTTP是什么" class="headerlink" title="HTTP是什么"></a>HTTP是什么</h2><p>HTTP(中文 “超文本传输协议”），是一种为分布式，合作式，多媒体信息系统服务，面向应用层的协议，是Internet上目前使用最广泛的应用层协议，它基于传输层的TCP协议进行通信。</p>
<p>HTTP协议是通用的、无状态的协议。</p>
<h2 id="HTTP协议发展史"><a href="#HTTP协议发展史" class="headerlink" title="HTTP协议发展史"></a>HTTP协议发展史</h2><ul>
<li><p>HTTP/0.9<br>从1990年就已经用来作为WWW的传输协议，当时非常简单，只支持GET方法，响应中携带    的消息必须HTML文件。</p>
</li>
<li><p>HTTP/1.0<br>1996发布RFC1945，90年后，基于0.9的各种客户端和服务端的扩展层出不穷，把这些扩展进行综合推出新标准HTTP/1.0 。</p>
</li>
<li><p>HTTP/1.1<br>1997推出RFC2068，HTTP/1.1的标准</p>
</li>
<li><p>HTTP 2.0<br>在2013年8月进行首次合作共事性测试</p>
</li>
</ul>
<h2 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h2><ul>
<li>客户/服务器模式<br>一个服务器可以为分布在世界各地的许多客户服务。</li>
<li>简单<br>HTTP本身处理简单,有效地处理大量请求，HTTP服务器程序规模小，所以经由HTTP的通信速度快,与其它协议相比,时间开销小得多。</li>
<li>灵活<br>HTTP允许传输任意类型的数据对象，可以通过    Content-type来指定数据类型</li>
<li>无状态<br>HTTP是无状态的协议，缺少状态记忆,运行速度高,服务器应答速度较快。</li>
</ul>
<h2 id="HTTP协议响应消息"><a href="#HTTP协议响应消息" class="headerlink" title="HTTP协议响应消息"></a>HTTP协议响应消息</h2><p><img src="/2016/03/09/http-summary/1.png" alt=""></p>
<ul>
<li>200 OK      //客户端请求成功</li>
<li>400 Bad Request  //客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </li>
<li>403 Forbidden  //服务器收到请求，但是拒绝提供服务</li>
<li>404 Not Found  //请求资源不存在，eg：输入了错误的URL</li>
<li>500 Internal Server Error //服务器发生不可预期的错误</li>
<li>503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后，可能恢复正常</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP连接与断开的握手机制]]></title>
      <url>http://yoursite.com/2016/03/09/TCP-hands/</url>
      <content type="html"><![CDATA[<center>介绍TCP连接与断开的握手机制</center>

<a id="more"></a>
<h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><p><code>三次握手机制</code></p>
<p><img src="/2016/03/09/TCP-hands/1.png" alt=""></p>
<ul>
<li>第一次<br>A 的 TCP 向 B 发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，表明传送数据时的第一个数据字节的序号是 x。</li>
<li>第二次<br>B 的 TCP 收到连接请求报文段后，如同意，则发回确认。<br>B 在确认报文段中应使 SYN = 1，使 ACK = 1，其确认号ack = x + 1，自己选择的序号 seq = y。</li>
<li>第三次<br>A 收到此报文段后向 B 给出确认，其 ACK = 1，确认号 ack = y + 1。<br>A 的 TCP 通知上层应用进程，连接已经建立。</li>
</ul>
<p>建立了全双工通信！</p>
<h2 id="TCP关闭"><a href="#TCP关闭" class="headerlink" title="TCP关闭"></a>TCP关闭</h2><p><code>四次握手机制</code></p>
<p><img src="/2016/03/09/TCP-hands/2.png" alt=""></p>
<ul>
<li><p>第一次<br>数据传输结束后，通信的双方都可释放连接。现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。<br>A把连接释放报文段首部的 FIN = 1，其序号seq = u，等待 B 的确认</p>
</li>
<li><p>第二次<br>B 发出确认，确认号 ack = u + 1，而这个报文段自己的序号 seq = v。<br>TCP服务器进程通知高层应用进程。<br>从 A 到 B 这个方向的连接就释放了，TCP 连接处于<code>半关闭状态</code>。B 若发送数据，A 仍要接收。</p>
</li>
<li><p>第三次<br>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。</p>
</li>
<li><p>第四次<br>A 收到连接释放报文段后，必须发出确认。<br>在确认报文段中 ACK = 1，确认号 ack = w + 1，自己的序号 seq = u。 </p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> TCP </tag>
            
            <tag> 握手 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP与UDP]]></title>
      <url>http://yoursite.com/2016/03/09/TCP-UDP/</url>
      <content type="html"><![CDATA[<center>TCP与UDP知识概述</center>

<a id="more"></a>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP 与 TCP 的主要区别在于 UDP 不一定提供可靠的数据传输。事实上，该协议不能保证数据准确无误地到达目的地。UDP 在许多方面非常有效。当某个程序的目标是尽快地传输尽可能多的信息时（其中任意给定数据的重要性相对较低），可使用 UDP。ICQ 短消息使用 UDP 协议发送消息。<br>许多程序将使用单独的TCP连接和单独的UDP连接。重要的状态信息随可靠的TCP连接发送，而主数据流通过UDP发送。</p>
<h3 id="UDP特点"><a href="#UDP特点" class="headerlink" title="UDP特点"></a>UDP特点</h3><ul>
<li>无需建立连接<br>  DNS采用UDP连接，HTTP采用TCP连接</li>
<li>无需连接状态</li>
<li>报头开销小<br>  TCP报头20字节长，UDP报头8字节长</li>
<li>无窗口技术</li>
<li>应用程序保证可靠性</li>
<li>无缓存</li>
</ul>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP的目的是提供可靠的面向字节流的数据传输，并在相互进行通信的设备或服务之间保持一个虚拟连接。TCP在数据包接收无序、丢失或在交付期间被破坏时，负责数据恢复。它通过为其发送的每个数据包提供一个序号来完成此恢复。记住，较低的网络层会将每个数据包视为一个独立的单元，因此，数据包可以沿完全不同的路径发送，即使它们都是同一消息的组成部分。这种路由与网络层处理分段和重新组装数据包的方式非常相似，只是级别更高而已。<br>为确保正确地接收数据，TCP要求在目标计算机成功收到数据时发回一个确认（即 ACK）。如果在某个时限内未收到相应的 ACK，将重新传送数据包。如果网络拥塞，这种重新传送将导致发送的数据包重复。但是，接收计算机可使用数据包的序号来确定它是否为重复数据包，并在必要时丢弃它。</p>
<h3 id="TCP特点"><a href="#TCP特点" class="headerlink" title="TCP特点"></a>TCP特点</h3><ul>
<li>面向连接的服务</li>
<li>有确认机制保证数据是否安全完整到达</li>
<li>面向字节流</li>
<li>提供全双工通信</li>
<li>提供缓存</li>
</ul>
<h2 id="TCP与UDP的选择"><a href="#TCP与UDP的选择" class="headerlink" title="TCP与UDP的选择"></a>TCP与UDP的选择</h2><p>如果比较UDP包和TCP包的结构，很明显UDP包不具备TCP包复杂的可靠性与控制机制。与TCP协议相同，UDP的源端口数和目的端口数也都支持一台主机上的多个应用。一个16位的UDP包包含了一个字节长的头部和数据的长度，校验码域使其可以进行整体校验。（许多应用只支持UDP，如：多媒体数据流，不产生任何额外的数据，即使知道有破坏的包也不进行重发。）  </p>
<p>很明显，当数据传输的性能必须让位于数据传输的完整性、可控制性和可靠性时，TCP协议是当然的选择。<br>当强调传输性能而不是传输的完整性时，如：音频和多媒体应用，UDP是最好的选择。在数据传输时间很短，以至于此前的连接过程成为整个流量主体的情况下，UDP也是一个好的选择，如：DNS交换。</p>
<p>把SNMP建立在UDP上的部分原因是设计者认为当发生网络阻塞时，UDP较低的开销使其有更好的机会去传送管理数据。TCP丰富的功能有时会导致不可预料的性能低下，但是我们相信在不远的将来，TCP可靠的点对点连接将会用于绝大多数的网络应用。</p>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IP地址与IP协议]]></title>
      <url>http://yoursite.com/2016/03/09/IP-address-protocol/</url>
      <content type="html"><![CDATA[<center>主要介绍IP地址的知识与IP协议的知识</center>

<a id="more"></a>
<p>​</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><h3 id="什么是IP地址"><a href="#什么是IP地址" class="headerlink" title="什么是IP地址"></a>什么是IP地址</h3><p>在TCP/IP协议族的IP层使用的用来标志连接在因特网上的每一个设备的标识符。</p>
<ul>
<li>32位地址IP地址由32bit构成，</li>
<li>每8bit一组，共占用4个字节</li>
<li>IP地址由两部分组成，网络位和主机位</li>
</ul>
<h3 id="IP地址表示方法"><a href="#IP地址表示方法" class="headerlink" title="IP地址表示方法"></a>IP地址表示方法</h3><ul>
<li>二进制记法<br>  10000000 00001011 00000011 00011111</li>
<li>点分十进制(最常用的表示方法)<br>  128.11.3.31</li>
<li>十六进制记法<br>  0X810B0BEF</li>
</ul>
<h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p>每一类地址都由两个固定长度的字段组成：</p>
<ul>
<li>一个字段是网络号 net-id，它标志主机（或路由器）所连接到的网络</li>
<li>一个字段则是主机号 host-id，它标志该主机（或路由器）</li>
</ul>
<p>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}   </p>
<p><img src="/2016/03/09/IP-address-protocol/1.png" alt=""></p>
<p>IP地址分为五类：</p>
<ul>
<li>A类地址，net-id占1字节，host-id占3字节</li>
<li>B类地址，net-id占2字节，host-id占2字节    </li>
<li>C类地址，net-id占3字节，host-id占1字节</li>
<li>D类地址作为多播地址</li>
<li>E类地址保留为今后使用</li>
</ul>
<h4 id="还回地址"><a href="#还回地址" class="headerlink" title="还回地址"></a>还回地址</h4><p>第一个字节等于127的IP地址用作还回地址。用于网络软件测试以及本机进程之间通信的特殊地址。<br>点分十进制表示为127.0.0.0，只用作目的地址。</p>
<h3 id="IP地址使用范围"><a href="#IP地址使用范围" class="headerlink" title="IP地址使用范围"></a>IP地址使用范围</h3><p><img src="/2016/03/09/IP-address-protocol/2.png" alt=""></p>
<h3 id="子网和超网"><a href="#子网和超网" class="headerlink" title="子网和超网"></a>子网和超网</h3><p>子网是为了将一个IP地址对内划分成多个IP地址，通过子网掩码<br>超网是为了将多个IP地址对外合并成一个IP地址，通过超网掩码</p>
<h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><h3 id="IP协议特点"><a href="#IP协议特点" class="headerlink" title="IP协议特点"></a>IP协议特点</h3><ul>
<li>无连接性:  跨越多个异构物理网 通用性</li>
<li>不可靠:  可靠性问题交由高层协议解决</li>
<li>数据报交付协议</li>
</ul>
<h3 id="IP数据报传输"><a href="#IP数据报传输" class="headerlink" title="IP数据报传输"></a>IP数据报传输</h3><p>数据报传输时是需要分片和合并的，为什么要进行分割呢，主要原因是每个数据链路的MTU(最大传输单元)不尽相同，数据传输时数据报的最大不能超过MTU，故需要分片，有时还可能进行多重分片</p>
<p><img src="/2016/03/09/IP-address-protocol/3.png" alt=""></p>
<p>数据报的重组操作，由于传输时每片数据报传输的路径不一定相同，故重组只能在目的主机上进行，有重组时限的限制，若丢失了分片，则无法重组</p>
<h3 id="IP分组格式"><a href="#IP分组格式" class="headerlink" title="IP分组格式"></a>IP分组格式</h3><ul>
<li>数据报：首部 + 数据</li>
<li>首部：各字段的含义、作用、取值（长度、TTL、协议、片标志、片偏移、校验和）</li>
<li>封装：直接封装在数据帧中</li>
</ul>
<h3 id="IP分组处理"><a href="#IP分组处理" class="headerlink" title="IP分组处理"></a>IP分组处理</h3><p>TTL、校验和计算、分片和重组、选项处理</p>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> IP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OSI参考模型]]></title>
      <url>http://yoursite.com/2016/03/09/OSI-model/</url>
      <content type="html"><![CDATA[<center>介绍OSI参考模型及实际应用模型</center>

<a id="more"></a>
<h2 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h2><p>开放系统互连参考模型 (Open System Interconnect 简称OSI）是国际标准化组织(ISO)和国际电报电话咨询委员会(CCITT)联合制定的开放系统互连参考模型，为开放式互连信息系统提供了一种功能结构的框架。</p>
<p>使两个不同的系统能够通信,而不需要改变底层的硬件或软件逻辑。</p>
<p><code>OSI是一种理想化的架构！是一个概念模型不是协议！</code></p>
<p><img src="/2016/03/09/OSI-model/1.png" alt=""></p>
<h2 id="每层作用"><a href="#每层作用" class="headerlink" title="每层作用"></a>每层作用</h2><ul>
<li>应用层Application<br>为应用程序提供服务并规定应用程序中通信相关的细节。包括文件传输，电子邮件，远程登陆等协议。</li>
<li>表示层Presntation<br>主要负责数据格式的转换。将设备固有数据格式转换成网络标准传输格式。</li>
<li>会话层Session<br>负责建立和断开通信连接，以及数据的分割等数据传输相关的管理。</li>
<li>传输层Transport<br>起可靠的传输作用。</li>
<li>网络层Network<br>将数据传输到目标地址，主要负责寻址和路由选择。</li>
<li>数据链路层Datalink<br>将0，1序列划分成具有意义的数据帧传给对端。</li>
<li>物理层Physical<br>负责0，1比特流与电压高低之间的转换。</li>
</ul>
<p><img src="/2016/03/09/OSI-model/2.png" alt=""></p>
<h2 id="实际模型"><a href="#实际模型" class="headerlink" title="实际模型"></a>实际模型</h2><p>OSI只是一个理想的模型，将通信分为了七层，但在实际应用中，是将通信分成了五层（也有分成四层的，将数据链路层和物理层合为了一层）</p>
<p><img src="/2016/03/09/OSI-model/3.png" alt=""></p>
<h2 id="封装与对等通信"><a href="#封装与对等通信" class="headerlink" title="封装与对等通信"></a>封装与对等通信</h2><p><img src="/2016/03/09/OSI-model/4.png" alt=""></p>
<p>实际数据的传输是一个逐层封装的过程，到达另一端后，再逐层解封装。<br>两台主机之间的通信都是对等层之间的通信。</p>
<blockquote>
<p>封装<br>上层的数据被封装在下层中，在第N层的分组的数据部分是第N+1层的整个分组。</p>
</blockquote>
<p>除链路层在数据的头尾进行封装外，应用层，运输层和网络层都只是在数据的头部进行封装。</p>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OSI </tag>
            
            <tag> 网络协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第六章——经典问题]]></title>
      <url>http://yoursite.com/2016/03/04/memcached-5/</url>
      <content type="html"><![CDATA[<center>memcached一些经典问题的解决方案</center>

<a id="more"></a>
<h2 id="缓存雪崩现象"><a href="#缓存雪崩现象" class="headerlink" title="缓存雪崩现象"></a>缓存雪崩现象</h2><p>缓存雪崩一般是由某个缓存节点失效,导致其他节点的缓存命中率下降, 缓存中缺失的数据 去数据库查询.短时间内,造成数据库服务器崩溃.<br>重启 DB,短期又被压跨,但缓存数据也多一些.<br>DB 反复多次启动多次,缓存重建完毕,DB 才稳定运行. </p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>把缓存设置为随机 3 到 9 小时的生命周期,这样不同时失效,把工作分担到各个时间点上去. </li>
<li>或者将失效时间设置为凌晨</li>
</ul>
<h2 id="缓存的无底洞现象-multiget-hole"><a href="#缓存的无底洞现象-multiget-hole" class="headerlink" title="缓存的无底洞现象 multiget-hole"></a>缓存的无底洞现象 multiget-hole</h2><p>该问题由 facebook 的工作人员提出的, facebook 在 2010 年左右,memcached 节点就已经达3000 个.缓存数千G内容.<br>他们发现了一个问题—memcached 连接频率,效率下降了,于是加 memcached 节点,添加了后,发现因为连接频率导致的问题,仍然存在,并没有好转,称之为”无底洞现象”.<br><a href="http://highscalability.com/blog/2009/10/26/facebooks-memcached-multiget-hole-more-machines- more-capacit.html" target="_blank" rel="external">原文</a></p>
<h3 id="multiget-hole-问题分析"><a href="#multiget-hole-问题分析" class="headerlink" title="multiget-hole 问题分析"></a>multiget-hole 问题分析</h3><p>以用户为例: user-133-age, user-133-name,user-133-height …..N 个 key,当服务器增多,133 号用户的信息,也被散落在更多的节点,所以,同样是访问个人主页,得到相同的个人信息, 节点越多,要连接的节点也越多.对于 memcached 的连接数,并没有随着节点的增多,而降低. 于是问题出现.</p>
<h3 id="multiget-hole-解决方案"><a href="#multiget-hole-解决方案" class="headerlink" title="multiget-hole 解决方案:"></a>multiget-hole 解决方案:</h3><p>把某一组 key,按其共同前缀,来分布:</p>
<p>比如 user-133-age, user-133-name,user-133-height 这 3 个 key,在用分布式算法求其节点时,应该以 ‘user-133’来计算,而不是以 user-133-age/name/height 来 计算.</p>
<p>这样,3 个关于个人信息的 key,都落在同 1 个节点上,访问个人主页时,只需要连接 1 个节点.</p>
<p>问题解决:)</p>
<h2 id="数据永久被踢现象"><a href="#数据永久被踢现象" class="headerlink" title="数据永久被踢现象"></a>数据永久被踢现象</h2><p>网上有人反馈为”memcached 数据丢失”,明明设为永久有效,却莫名其妙的丢失了.<br>其实,这要从 2 个方面来找原因:</p>
<p>即前面介绍的 惰性删除,与 LRU 最近最少使用记录删除.</p>
<p>分析：<br>1:如果 slab 里的很多 chunk,已经过期,但过期后没有被 get 过, 系统不知他们已经过期.<br>2:永久数据很久没 get 了,不活跃,如果新增 item,则永久数据被踢了.<br>3: 当然,如果那些非永久数据被 get,也会被标识为 expire,从而不会再踢掉永久数据 </p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>永久数据和非永久数据分开放 </p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li>Mecached权威指南，燕十八著</li>
<li>memcached 全面剖析,长野雅广、前坂徹著 </li>
<li>PHP manual</li>
</ul>
]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第五章——分布式算法]]></title>
      <url>http://yoursite.com/2016/03/04/memcached-4/</url>
      <content type="html"><![CDATA[<center>memcached两种分布式算法介绍</center>

<a id="more"></a>
<h2 id="取模算法"><a href="#取模算法" class="headerlink" title="取模算法"></a>取模算法</h2><p>就是“根据服务器台数的余数进行分散”。求得键的整 数哈希值,再除以服务器台数,根据其余数来选择服务器。 </p>
<p>余数计算的方法简单,数据的分散性也相当优秀,但也有其缺点。<br>那就是当添加或移除服务器时, 缓存重组的代价相当巨大。添加服务器后,余数就会产生巨变,这样就无法获取与保存时相同的服务器,从而影响缓存的命中率。</p>
<h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><h3 id="Consistent-Hashing-的简单说明"><a href="#Consistent-Hashing-的简单说明" class="headerlink" title="Consistent Hashing 的简单说明"></a>Consistent Hashing 的简单说明</h3><p>​<br>Consistent Hashing 如下所示:首先求出 memcached 服务器(节点)的哈希值,并将其配置到 0~232的圆(continuum)上。然后用同样的方法求出存储数据的键的哈希值,并映射到圆上。然后从数 据映射到的位置开始顺时针查找,将数据保存到找到的第一个服务器上。如果超过 232 仍然找不到服务器,就会保存到第一台 memcached 服务器上。 </p>
<p><img src="/2016/03/04/memcached-4/1.png" alt=""></p>
<p>从上图的状态中添加一台 memcached 服务器。余数分布式算法由于保存键的服务器会发生巨大变化而影响缓存的命中率,但 Consistent Hashing 中,只有在 continuum 上增加服务器的地点逆时针方向 的第一台服务器上的键会受到影响。 </p>
<p><img src="/2016/03/04/memcached-4/2.png" alt=""></p>
<p>因此,Consistent Hashing 最大限度地抑制了键的重新分布。而且,有的 Consistent Hashing 的实现方 法还采用了虚拟节点的思想。使用一般的 hash 函数的话,服务器的映射地点的分布非常不均匀。 因此,使用虚拟节点的思想,为每个物理节点(服务器)在 continuum 上分配 100~200 个点。这样就能抑制分布不均匀,最大限度地减小服务器增减时的缓存重新分布。 </p>
<h2 id="两种算法命中率问题"><a href="#两种算法命中率问题" class="headerlink" title="两种算法命中率问题"></a>两种算法命中率问题</h2><p>当memcahed 结点由 N-&gt;N-1 时;<br>取模算法的命中率降为1/(N-1);<br>一致性哈希的命中率降为了1-(1/(N-1));<br>可见一致性哈希算法的优势十分明显。</p>
<p><img src="/2016/03/04/memcached-4/3.png" alt=""></p>
<p><br></p>
<p><img src="/2016/03/04/memcached-4/4.png" alt=""></p>
<h2 id="PHP扩展中应用"><a href="#PHP扩展中应用" class="headerlink" title="PHP扩展中应用"></a>PHP扩展中应用</h2><p>在PHP客户端，memcached默认的算法是取模算法，需要在客户端切换成一致性哈希算法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$mem = <span class="keyword">new</span> memcached();</span><br><span class="line"><span class="comment">//却换成一致性哈希算法</span></span><br><span class="line">$mem-&gt;setOption($mem::OPT_DISTRIBUTION,$mem::DISTRIBUTION_CONSISTENT);</span><br><span class="line"><span class="comment">//开启或关闭兼容的libketama类行为。当开启此选项后，元素key的hash算法将会被设置为md5并且分布算法将会 采用带有权重的一致性hash分布。这一点非常有用因为其他基于libketama的客户端（比如python，urby）在同样 的服务端配置下可以透明的访问key。</span></span><br><span class="line">$mem-&gt;setOption($mem::OPT_LIBKETAMA_COMPATIBLE,<span class="keyword">TRUE</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第四章——过期机制与删除机制]]></title>
      <url>http://yoursite.com/2016/03/04/memcached-3/</url>
      <content type="html"><![CDATA[<center>memcached过期机制与删除机制的介绍</center>

<a id="more"></a>
<h2 id="过期机制——惰性过期"><a href="#过期机制——惰性过期" class="headerlink" title="过期机制——惰性过期"></a>过期机制——惰性过期</h2><p>上一章介绍过,memcached 不会释放已分配的内存。记录超时后,客户端就无法再看见该记录 (invisible,透明),其存储空间即可重复使用。</p>
<p>Lazy Expiration</p>
<p><code>memcached 内部不会监视记录是否过期,而是在 get 时查看记录的时间戳,检查记录是否过期。这种技术被称为惰性过期</code></p>
<p>因此,memcached 不会在过期监视上耗费CPU时间</p>
<h2 id="LRU删除机制"><a href="#LRU删除机制" class="headerlink" title="LRU删除机制"></a>LRU删除机制</h2><p>如果以 122byte 大小的chunk 举例, 122的chunk都满了,又有新的值(长度为120)要加入, 要挤掉谁?</p>
<p>memcached 此处用的Least Recently Used(LRU最近最少使用) 删除机制<br>顾名思义,这是删除“最近最少使用”的记录的机制。因此,当 memcached 的内存空间不足时(无法从 slab class 获取到新的空间 时),就从最近未被使用的记录中搜索,并将其空间分配给新的记录。从缓存的实用角度来看,该模型十分理想。 </p>
<p>原理: 当某个单元被请求时,维护一个计数器,通过计数器来判断最近谁最少被使用.就把谁t出. </p>
<blockquote>
<p>注: 即使某个 key 是设置的永久有效期,也一样会被踢出来!即–永久数据被踢现象 </p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第三章——内存存储机制]]></title>
      <url>http://yoursite.com/2016/03/03/memcached-2/</url>
      <content type="html"><![CDATA[<center>本文主要讲解memcached的内存存储原理</center>

<a id="more"></a>
<h2 id="内存碎片化"><a href="#内存碎片化" class="headerlink" title="内存碎片化"></a>内存碎片化</h2><p>如果用c语言直接 malloc,free来向操作系统申请和释放内存时,在不断的申请和释放过程中,形成了一些很小的内存片断,无法再利用<br><code>这种空闲,但无法利用内存的现象,称为内存的碎片化</code></p>
<h2 id="Slab-Allocator机制"><a href="#Slab-Allocator机制" class="headerlink" title="Slab Allocator机制"></a>Slab Allocator机制</h2><p>为了缓解内存的碎片化，memcached用Slab Allocator机制来管理内存.</p>
<p>Slab Allocator 原理:<br>将分配的内存分割成各种尺寸的块(chunk),并把尺寸相同的块分成组(chunk的集合),而且,slab allocator 还有重复使用已分配的内存的目的。也就是说,分配到的内存不会释放,而是重复利用。</p>
<p><img src="/2016/03/03/memcached-2/1.png" alt=""></p>
<h2 id="系统如何选择Chunk"><a href="#系统如何选择Chunk" class="headerlink" title="系统如何选择Chunk"></a>系统如何选择Chunk</h2><p>memcached 根据收到的数据的大小, 选择最适合数据大小的chunk组</p>
<blockquote>
<p>警示:<br>如果有 100byte 的内容要存,但 122 大小的仓库中的 chunk 满了 并不会寻找更大的,如 144 的仓库来存储,<br>而是把 122 仓库的旧数据踢掉! 详见过期与删除机制 </p>
</blockquote>
<p><img src="/2016/03/03/memcached-2/2.png" alt=""></p>
<h2 id="SlabAllocator的缺点"><a href="#SlabAllocator的缺点" class="headerlink" title="SlabAllocator的缺点"></a>SlabAllocator的缺点</h2><p>Slab Allocator 解决了当初的内存碎片问题,但新的机制也给 memcached 带来了新的问题。<br>这个问题就是,由于分配的是特定长度的内存,因此无法有效利用分配的内存。例如,将 100 字节的数据缓存到 128 字节的 chunk 中,剩余的 28 字节就浪费了 :(</p>
<p><img src="/2016/03/03/memcached-2/2.png" alt=""></p>
<h2 id="Grow-Factor增长因子调优"><a href="#Grow-Factor增长因子调优" class="headerlink" title="Grow Factor增长因子调优"></a>Grow Factor增长因子调优</h2><p>memcached 在启动时可以通过­f 选项指定 Growth Factor 因子, 并在某种程度上控制 slab之间的差异. 默认值为 1.25. 但是,在该选项出现之前,这个因子曾经固定为 2,称为”powers of 2”策略。</p>
<p>增长因子是2时chunk的大小分布</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gaosongdeMacBook-Pro:~ Ken$ memcached -f <span class="number">2</span> -vvv</span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   1: <span class="type">chunk size        96 perslab   10922</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   2: <span class="type">chunk size       192 perslab    5461</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   3: <span class="type">chunk size       384 perslab    2730</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   4: <span class="type">chunk size       768 perslab    1365</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   5: <span class="type">chunk size      1536 perslab     682</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   6: <span class="type">chunk size      3072 perslab     341</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   7: <span class="type">chunk size      6144 perslab     170</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   8: <span class="type">chunk size     12288 perslab      85</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   9: <span class="type">chunk size     24576 perslab      42</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  10: <span class="type">chunk size     49152 perslab      21</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  11: <span class="type">chunk size     98304 perslab      10</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  12: <span class="type">chunk size    196608 perslab       5</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  13: <span class="type">chunk size    393216 perslab       2</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  14: <span class="type">chunk size   1048576 perslab       1</span></span></span><br></pre></td></tr></table></figure>
<p>增长因子是1.25时chunk的大小分布</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">gaosongdeMacBook-Pro:~ Ken$ memcached -f <span class="number">1.25</span> -vvv</span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   1: <span class="type">chunk size        96 perslab   10922</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   2: <span class="type">chunk size       120 perslab    8738</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   3: <span class="type">chunk size       152 perslab    6898</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   4: <span class="type">chunk size       192 perslab    5461</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   5: <span class="type">chunk size       240 perslab    4369</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   6: <span class="type">chunk size       304 perslab    3449</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   7: <span class="type">chunk size       384 perslab    2730</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   8: <span class="type">chunk size       480 perslab    2184</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>   9: <span class="type">chunk size       600 perslab    1747</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  10: <span class="type">chunk size       752 perslab    1394</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  11: <span class="type">chunk size       944 perslab    1110</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  12: <span class="type">chunk size      1184 perslab     885</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  13: <span class="type">chunk size      1480 perslab     708</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  14: <span class="type">chunk size      1856 perslab     564</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  15: <span class="type">chunk size      2320 perslab     451</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  16: <span class="type">chunk size      2904 perslab     361</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  17: <span class="type">chunk size      3632 perslab     288</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  18: <span class="type">chunk size      4544 perslab     230</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  19: <span class="type">chunk size      5680 perslab     184</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  20: <span class="type">chunk size      7104 perslab     147</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  21: <span class="type">chunk size      8880 perslab     118</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  22: <span class="type">chunk size     11104 perslab      94</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  23: <span class="type">chunk size     13880 perslab      75</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  24: <span class="type">chunk size     17352 perslab      60</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  25: <span class="type">chunk size     21696 perslab      48</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  26: <span class="type">chunk size     27120 perslab      38</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  27: <span class="type">chunk size     33904 perslab      30</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  28: <span class="type">chunk size     42384 perslab      24</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  29: <span class="type">chunk size     52984 perslab      19</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  30: <span class="type">chunk size     66232 perslab      15</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  31: <span class="type">chunk size     82792 perslab      12</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  32: <span class="type">chunk size    103496 perslab      10</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  33: <span class="type">chunk size    129376 perslab       8</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  34: <span class="type">chunk size    161720 perslab       6</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  35: <span class="type">chunk size    202152 perslab       5</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  36: <span class="type">chunk size    252696 perslab       4</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  37: <span class="type">chunk size    315872 perslab       3</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  38: <span class="type">chunk size    394840 perslab       2</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  39: <span class="type">chunk size    493552 perslab       2</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  40: <span class="type">chunk size    616944 perslab       1</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  41: <span class="type">chunk size    771184 perslab       1</span></span></span><br><span class="line">slab <span class="class"><span class="keyword">class</span>  42: <span class="type">chunk size   1048576 perslab       1</span></span></span><br></pre></td></tr></table></figure>
<p>可见,组间差距比因子为 2 时小得多,更适合缓存几百字节的记录。从上面的输出结果来看,可能 会觉得有些计算误差,这些误差是为了保持字节数的对齐而故意设置的。 </p>
<p>将 memcached 引入产品,或是直接使用默认值进行部署时,最好是重新计算一下数据的预期平均长度,调整 growth factor,以获得最恰当的设置。内存是珍贵的资源,浪费就太可惜了。 </p>
]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第二章——基本操作]]></title>
      <url>http://yoursite.com/2016/03/03/memcached-1/</url>
      <content type="html"><![CDATA[<center>介绍memcached的具体操作指令</center>

<a id="more"></a>
<h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>语法: </p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add</span> key flag expire <span class="built_in">length</span> </span><br><span class="line"><span class="built_in">set</span> key flag expire <span class="built_in">length</span> </span><br><span class="line"></span><br><span class="line">//key 给值起一个独特的名字</span><br><span class="line">//flag 标志,要求为一个正整数</span><br><span class="line">//expire 有效期</span><br><span class="line">//<span class="built_in">length</span> 缓存的长度(字节为单位)</span><br></pre></td></tr></table></figure>
<p>flag 的意义:<br>memcached 基本文本协议,传输的东西,理解成字符串来存储.<br>想:让你存一个 php 对象,和一个 php 数组,怎么办?答:序列化成字符串,往出取的时候,自然还要反序列化成 对象/数组/json 格式等等.这时候, flag 的意义就体现出来了.<br>比如, 1 就是字符串, 2 反转成数组 3,反序列化对象…..<br>expire 的意义:<br>设置缓存的有效期,有 3 种格式<br>1:设置秒数, 从设定开始数,第 n 秒后失效.<br>2:时间戳, 到指定的时间戳后失效.<br>比如在团购网站,缓存的某团到中午 12:00 失效. add key 0 1379209999 6<br>3: 设为 0. 不自动失效. </p>
<blockquote>
<p>1:编译 memcached 时,指定一个最长常量,默认是 30 天.所以,即使设为 0,30 天后也会失效.<br>2:可能等不到 30 天,就会被新数据挤出去.</p>
</blockquote>
<h2 id="替换数据"><a href="#替换数据" class="headerlink" title="替换数据"></a>替换数据</h2><p>语法</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">replace</span> <span class="keyword">key</span> flag <span class="keyword">expire</span> <span class="keyword">length</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">操作名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">add</td>
<td>仅当存储空间中不存在键相同的数据时才保存</td>
</tr>
<tr>
<td style="text-align:center">replace</td>
<td>仅当存储空间中存在键相同的数据时才保存</td>
</tr>
<tr>
<td style="text-align:center">set</td>
<td>与add和replace不同,无论何时都保存</td>
</tr>
</tbody>
</table>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">key</span> [<span class="built_in">time</span> seconds]</span><br></pre></td></tr></table></figure>
<p>删除指定的 key.<br>如加可选参数time,则指删除key,并在删除key后的time秒内,不允许get,add,replace 操作此 key. </p>
<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure>
<p>返回 key 的值 </p>
<h2 id="增减操作"><a href="#增减操作" class="headerlink" title="增减操作"></a>增减操作</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">incr/decr <span class="built_in">key</span> <span class="built_in">num</span></span><br></pre></td></tr></table></figure>
<p>增和减是原子操作,但未设置初始值时,不会自动赋成 0。因此,应当进行错误检查,必要时加入初始化操作 </p>
<h2 id="统计操作"><a href="#统计操作" class="headerlink" title="统计操作"></a>统计操作</h2><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">stats </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">stat</span> pid <span class="number">2296</span>   <span class="comment">//进程号</span></span><br><span class="line"><span class="keyword">stat</span> uptime <span class="number">4237</span> <span class="comment">//持续运行时间</span></span><br><span class="line"><span class="keyword">stat</span> time <span class="number">1370054990</span>   <span class="comment">//服务器所在主机当前系统的时间，单位是秒。</span></span><br><span class="line"><span class="keyword">stat</span> version <span class="number">1.2</span><span class="number">.6</span> <span class="comment">//版本号</span></span><br><span class="line"><span class="keyword">stat</span> pointer_size <span class="number">32</span> <span class="comment">//服务器所在主机操作系统的指针大小，一般为32或64.</span></span><br><span class="line"><span class="keyword">stat</span> curr_items <span class="number">4</span> <span class="comment">//当前存储的键个数,不包括目前已经从缓存中删除的对象</span></span><br><span class="line"><span class="keyword">stat</span> total_items <span class="number">13</span> <span class="comment">//表示从memcached服务启动到当前时间，系统存储过的所有对象的数量，包括目前已经从缓存中删除的对象。</span></span><br><span class="line"><span class="keyword">stat</span> bytes <span class="number">236</span> <span class="comment">//表示系统存储缓存对象所使用的存储空间，单位为字节。</span></span><br><span class="line"><span class="keyword">stat</span> curr_connections <span class="number">3</span>  <span class="comment">//表示当前系统打开的连接数</span></span><br><span class="line"><span class="keyword">stat</span> total_connections <span class="number">4</span>  <span class="comment">//表示从memcached服务启动到当前时间，系统打开过的连接的总数。stat connection_structures 4   //</span></span><br><span class="line"><span class="keyword">stat</span> cmd_get <span class="number">20</span></span><br><span class="line"><span class="keyword">stat</span> cmd_set <span class="number">16</span></span><br><span class="line"><span class="keyword">stat</span> get_hits <span class="number">13</span> <span class="comment">//表示获取数据成功的次数。</span></span><br><span class="line"><span class="keyword">stat</span> get_misses <span class="number">7</span> <span class="comment">//表示获取数据失败的次数。</span></span><br><span class="line"><span class="keyword">stat</span> evictions <span class="number">0</span> <span class="comment">//为了给新的数据项目释放空间，从缓存移除的缓存对象的数目。比如超过缓存大小时根据LRU算法移除的对象，以及过期的对象</span></span><br><span class="line"><span class="keyword">stat</span> bytes_read <span class="number">764</span> <span class="comment">//memcached服务器从网络读取的总的字节数。</span></span><br><span class="line"><span class="keyword">stat</span> bytes_written <span class="number">618</span>  <span class="comment">//memcached服务器发送到网络的总的字节数。</span></span><br><span class="line"><span class="keyword">stat</span> limit_maxbytes <span class="number">67108864</span> <span class="comment">//memcached服务缓存允许使用的最大字节数。这里为67108864字节，也就是是64M.与我们启动memcached服务设置的大小一致。</span></span><br><span class="line"><span class="keyword">stat</span> threads <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="清空操作"><a href="#清空操作" class="headerlink" title="清空操作"></a>清空操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush_all</span><br></pre></td></tr></table></figure>
<p>清空所有的存储对象 </p>
]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[memcached第一章——基础]]></title>
      <url>http://yoursite.com/2016/03/03/memcached-0/</url>
      <content type="html"><![CDATA[<center>对memcached进行简单介绍并进行安装</center>

<a id="more"></a>
<p>​</p>
<h2 id="memcached是什么"><a href="#memcached是什么" class="headerlink" title="memcached是什么"></a>memcached是什么</h2><p>Today 许多 Web 应用都将数据保存到 RDBMS 中,应用服务器从中读取数据并在浏览器中显示。但随着数据量的增大、访问的集中,就会出现RDBMS的负担加重、数据库响应恶化、网站显示延迟等重大影响。这时就该 memcached 大显身手了。</p>
<p>memcached 是高性能的分布式内存缓存服务器。一般的使用目的是</p>
<blockquote>
<p>通过缓存数据库查询结果,减少数据库访问次数,以提高动态 Web应用的速度、提高可扩展性。 </p>
</blockquote>
<p><img src="/2016/03/03/memcached-0/1.png" alt=""></p>
<h2 id="memcached的特征"><a href="#memcached的特征" class="headerlink" title="memcached的特征"></a>memcached的特征</h2><p>memcached 作为高速运行的分布式缓存服务器,具有以下的特点。</p>
<ul>
<li>协议简单<br>memcached 的服务器客户端通信并不使用复杂的 XML 等格式,而使用简单的基于文本行的协议。 因此,通过 telnet 也能在 memcached 上保存数据、取得数据 </li>
<li>基于libevent的事件处理</li>
<li>内置内存存储方式<br>为了提高性能,memcached 中保存的数据都存储在memcached内置的内存存储空间中。由于数据仅 存在于内存中,因此重启 memcached、重启操作系统会导致全部数据消失。另外,内容容量达到指 定值之后,就基于LRU(Least Recently Used)算法自动删除不使用的缓存。memcached 本身是为缓存 而设计的服务器,因此并没有过多考虑数据的永久性问题。</li>
<li>memcached不互相通信的分布式<br>memcached 尽管是“分布式”缓存服务器,但<code>服务器端并没有分布式功能</code>。各个memcached不会互相通信以共享信息。那么,怎样进行分布式呢?这完全取决于客户端的实现。</li>
</ul>
<h2 id="memcache的安装与php扩展的安装"><a href="#memcache的安装与php扩展的安装" class="headerlink" title="memcache的安装与php扩展的安装"></a>memcache的安装与php扩展的安装</h2><p>只介绍Mac环境下的安装，通过homebrew安装。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装memcached</span></span><br><span class="line">brew install memcached</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装php扩展</span></span><br><span class="line"></span><br><span class="line">brew install php55-memcached</span><br></pre></td></tr></table></figure>
<p>memcached安装好后启动memcached：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcached -p <span class="number">11211</span> -m <span class="number">128</span> -u root -vvv</span><br></pre></td></tr></table></figure>
<p>使用 memcached -h 查看<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ Ken$ memcached -h</span><br><span class="line">//列出一些比较常用的</span><br><span class="line">//memcached的版本号</span><br><span class="line">memcached <span class="number">1.4</span><span class="number">.24</span></span><br><span class="line"></span><br><span class="line">//memcached的TCP端口号，默认是<span class="number">112111</span></span><br><span class="line">-p &lt;<span class="built_in">num</span>&gt;      TCP port <span class="built_in">number</span> <span class="built_in">to</span> listen <span class="keyword">on</span> (<span class="title">default</span>: <span class="title">11211</span>)</span><br><span class="line">//memcached的UDP端口号</span><br><span class="line">-U &lt;<span class="built_in">num</span>&gt;      UDP port <span class="built_in">number</span> <span class="built_in">to</span> listen <span class="keyword">on</span> (<span class="title">default</span>: <span class="title">11211</span>, <span class="title">0</span> <span class="title">is</span> <span class="title">off</span>)</span><br><span class="line">//以守护进程方式启动</span><br><span class="line">-d            run <span class="keyword">as</span> <span class="keyword">a</span> daemon</span><br><span class="line">-u &lt;username&gt; assume identity <span class="keyword">of</span> &lt;username&gt; (only when run <span class="keyword">as</span> root)</span><br><span class="line">//分配给用户的最大内存数，默认<span class="number">64</span>MB</span><br><span class="line">-m &lt;<span class="built_in">num</span>&gt;      <span class="built_in">max</span> memory <span class="built_in">to</span> use <span class="keyword">for</span> <span class="keyword">items</span> <span class="keyword">in</span> megabytes (default: <span class="number">64</span> MB)</span><br><span class="line">//最大连接数  默认<span class="number">1024</span>个</span><br><span class="line">-c &lt;<span class="built_in">num</span>&gt;      <span class="built_in">max</span> simultaneous connections (default: <span class="number">1024</span>)</span><br><span class="line">//增长因子，默认<span class="number">1.25</span></span><br><span class="line">-f &lt;factor&gt;   chunk size growth factor (default: <span class="number">1.25</span>)</span><br><span class="line">//输出错误信息</span><br><span class="line">-v            verbose (print errors/warnings <span class="keyword">while</span> <span class="keyword">in</span> event loop)</span><br><span class="line">//输出所有信息</span><br><span class="line">-vv           very verbose (also print client commands/reponses)</span><br></pre></td></tr></table></figure></p>
<h2 id="memcached的连接"><a href="#memcached的连接" class="headerlink" title="memcached的连接"></a>memcached的连接</h2><p>memcached的客户端连接使用telnet即可</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//telnet <span class="built_in">hostname</span> port</span><br><span class="line">localhos<span class="variable">t:</span>~ Ken$ telnet <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">11211</span></span><br><span class="line">Trying <span class="number">127.0</span>.<span class="number">0.1</span>...</span><br><span class="line">Connected <span class="keyword">to</span> localhost.</span><br><span class="line">Escape character <span class="keyword">is</span> <span class="string">'^]'</span>.</span><br></pre></td></tr></table></figure>
<p>PHP端的连接</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$mem = <span class="keyword">new</span> Memcached();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$mem-&gt;addServer(<span class="string">"127.0.0.1"</span>,<span class="number">11211</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$mem-&gt;set(<span class="string">"name"</span>,<span class="string">"ken"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $mem-&gt;get(<span class="string">"name"</span>);</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> memcached </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> memcached </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——桥接模式]]></title>
      <url>http://yoursite.com/2016/03/01/DesignPatternWithPHP-9/</url>
      <content type="html"><![CDATA[<center>PHP设计模式,桥接模式介绍</center>

<a id="more"></a>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化，那么如何应对这种“多维度的变化”？<br>这时我们需要使用桥接模式。<br>桥接模式（Bridge），将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p>
<p>桥梁模式所涉及的角色有：<br>抽象化(Abstraction)角色：抽象化给出的定义，并保存一个对实现化对象的引用。</p>
<p>修正抽象化(Refined Abstraction)角色：扩展抽象化角色，改变和修正父类对抽象化的定义。</p>
<p>实现化(Implementor)角色：这个角色给出实现化角色的接口，但不给出具体的实现。必须指出的是，这个接口不一定和抽象化角色的接口定义相同，实际上，这两个接口可以非常不一样。实现化角色应当只给出底层操作，而抽象化角色应当只给出基于底层操作的更高一层的操作。</p>
<p>具体实现化(Concrete Implementor)角色：这个角色给出实现化角色接口的具体实现。</p>
<p>桥梁模式的用意是”将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化”。这句话有三个关键词，也就是抽象化、实现化和脱耦。</p>
<ul>
<li><p>抽象化<br>存在于多个实体中的共同的概念性联系，就是抽象化。作为一个过程，抽象化就是忽略一些信息，从而把不同的实体当做同样的实体对待。</p>
</li>
<li><p>实现化<br>抽象化给出的具体实现，就是实现化。</p>
</li>
<li><p>脱耦<br>所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。在这里，脱耦是指将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联。<br>将两个角色之间的继承关系改为聚合关系，就是将它们之间的强关联改换成为弱关联。因此，桥梁模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用<code>组合/聚合关系而不是继承关系</code>，从而使两者可以相对独立地变化。这就是桥梁模式的用意。</p>
</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.将实现予以解耦，让它和界面之间不再永久绑定。<br>2.抽象和实现可以独立扩展，不会影响到对方。<br>3.对于具体实现的修改，不会影响到客户端。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.增加了设计复杂度。<br>2.抽象类的修改影响到子类。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Bridge</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">info</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $send = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($send)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;send = $send;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">msg</span><span class="params">($content)</span></span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($to, $content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $content = <span class="keyword">$this</span>-&gt;msg($content);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;send-&gt;send($to, $content);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">email</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($to, $content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">'email给'</span> . $to . <span class="string">'的内容是'</span> . $content;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">sns</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($to, $content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">'sns给'</span> . $to . <span class="string">'的内容是'</span> . $content;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">commonInfo</span> <span class="keyword">extends</span> <span class="title">info</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">msg</span><span class="params">($content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'普通'</span> . $content;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">warnInfo</span> <span class="keyword">extends</span> <span class="title">info</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">msg</span><span class="params">($content)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'紧急'</span> . $content;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//====客户端====</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type:text/html;charset = utf-8"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$send = <span class="keyword">new</span> warnInfo(<span class="keyword">new</span> email());</span></span><br><span class="line"><span class="php">$send-&gt;send(<span class="string">"小明"</span>,<span class="string">"内容"</span>);</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——适配器模式]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-8/</url>
      <content type="html"><![CDATA[<center>PHP设计模式,适配器模式介绍</center>

<a id="more"></a>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>将一个类的接口，转换成客户端希望的另外一个接口，适配器模式使原本由于接口不兼容而不能一起工作的类可以一起工作了。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1 通过适配器，客户端可以调用同一接口，因而对客户端来说是透明的。这样做更简单、更直接、更紧凑。<br>2 复用了现存的类，解决了现存类和复用环境要求不一致的问题。<br>3 将目标类和适配者类解耦，通过引入一个适配器类重用现有的适配者类，而无需修改原有代码。<br>4 一个对象适配器可以把多个不同的适配者类适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">Adapter</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sendParams</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">            <span class="string">"tb"</span> =&gt; <span class="string">"淘宝"</span>,</span></span><br><span class="line"><span class="php">            <span class="string">"tm"</span> =&gt; <span class="string">"天猫"</span>,</span></span><br><span class="line"><span class="php">            <span class="string">"jd"</span> =&gt; <span class="string">"京东"</span>,</span></span><br><span class="line"><span class="php">        );</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">sendParams</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $params = <span class="keyword">parent</span>::sendParams();</span></span><br><span class="line"><span class="php">        $params = json_encode($params);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $params;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type:text/html;charset = utf-8"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====客户端1======</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$client1 = Adaptee::sendParams();</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"tb =&gt; "</span> . $client1[<span class="string">'tb'</span>] . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"tm =&gt; "</span> . $client1[<span class="string">'tm'</span>] . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"jd =&gt; "</span> . $client1[<span class="string">'jd'</span>] . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====客户端1======</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$client2 = Adapter::sendParams();</span></span><br><span class="line"><span class="php">$client2 = json_decode($client2);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"tb =&gt; "</span> . $client2-&gt;tb . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"tm =&gt; "</span> . $client2-&gt;tm . <span class="string">"&lt;br /&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"jd =&gt; "</span> . $client2-&gt;jd . <span class="string">"&lt;br /&gt;"</span>;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——装饰模式]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-7/</url>
      <content type="html"><![CDATA[<center>PHP设计模式,装饰模式介绍</center>

<a id="more"></a>
<h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><p>动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。</li>
<li>通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。</li>
<li>装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。</li>
<li>装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。当然也可以改变Component接口，增加新的公开的行为，实现“半透明”的装饰者模式。在实际项目中要做出最佳选择。</li>
</ol>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">DecoratorPattern</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $component;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Person $component = null)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;component = $component;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;component != <span class="keyword">null</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;component-&gt;show();</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"人"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Tshirt</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"穿Tshirt的"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::show();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Glass</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"戴眼镜的"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::show();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Trouser</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"穿裤子的"</span>;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::show();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php">$p = <span class="keyword">new</span> Person();</span></span><br><span class="line"><span class="php">$t = <span class="keyword">new</span> Tshirt($p);</span></span><br><span class="line"><span class="php">$g = <span class="keyword">new</span> Glass($t);</span></span><br><span class="line"><span class="php">$t = <span class="keyword">new</span> Trouser($g);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$t-&gt;show();</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——责任链模式]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-6/</url>
      <content type="html"><![CDATA[<center>PHP设计模式,责任链模式介绍</center>

<a id="more"></a>
<p>​</p>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者耦合的关系。将这个对象形成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>实现了请求者与处理者代码分离：发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。提高系统的灵活性和可扩展行。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>每次都是从链头开始：这也正是链表的缺点。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">ChainOfResponsibility</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Hander</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * 持有后继的责任对象</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $successor;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 示意处理请求的方法，虽然这个示意方法是没有传入参数的</span><br><span class="line">     * 但实际是可以传入参数的，根据具体需要来选择是否传递参数</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * 赋值方法，设置后继的责任对象</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSuccessor</span><span class="params">(Hander $hander)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;successor = $hander;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler</span> <span class="keyword">extends</span> <span class="title">Hander</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;successor == <span class="keyword">null</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"处理请求&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"放过请求&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;successor-&gt;handleRequest();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ProjectManager</span> <span class="keyword">extends</span> <span class="title">Hander</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">payMoney</span><span class="params">($dollar)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($dollar &lt; <span class="number">100</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"项目经理出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"项目经理不出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;successor-&gt;payMoney($dollar);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">DeptManager</span> <span class="keyword">extends</span> <span class="title">Hander</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">payMoney</span><span class="params">($dollar)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($dollar &lt; <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"部门经理出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"部门经理不出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;successor-&gt;payMoney($dollar);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Hander</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">payMoney</span><span class="params">($dollar)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($dollar &lt; <span class="number">300</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"总经理出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"总经理不出钱&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;successor-&gt;payMoney($dollar);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$client1 = <span class="keyword">new</span> ConcreteHandler();</span></span><br><span class="line"><span class="php">$client2 = <span class="keyword">new</span> ConcreteHandler();</span></span><br><span class="line"><span class="php">$client1-&gt;setSuccessor($client2);</span></span><br><span class="line"><span class="php">$client1-&gt;handleRequest();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$h1 = <span class="keyword">new</span> ProjectManager();</span></span><br><span class="line"><span class="php">$h2 = <span class="keyword">new</span> DeptManager();</span></span><br><span class="line"><span class="php">$h3 = <span class="keyword">new</span> GeneralManager();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$h1-&gt;setSuccessor($h2);</span></span><br><span class="line"><span class="php">$h2-&gt;setSuccessor($h3);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$h1-&gt;payMoney(<span class="number">250</span>);</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——观察者模式]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-5/</url>
      <content type="html"><![CDATA[<center>PHP设计模式，观察者模式介绍</center>

<a id="more"></a>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式对应了一种一对多的依赖关系，让多个观察者对象同时监听某一主题对象。这个主题发生变化时，会通知所有观察者对象，使他们能够自己自动更新。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.观察者和主题之间的耦合度较小；<br>2.支持广播通信；</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>由于观察者并不知道其它观察者的存在，它可能对改变目标的最终代价一无所知。这可能会引起意外的更新。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">ObservePattern</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">SplObserver</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">SplSubject</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">subject</span> <span class="keyword">implements</span> <span class="title">SplSubject</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $observers;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;observers = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(SplObserver $observer)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;observers, $observer);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">(SplObserver $observer)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $idx = array_search($observer, <span class="keyword">$this</span>-&gt;observers, <span class="keyword">true</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($idx) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;observers[$idx]);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) &#123;</span></span><br><span class="line"><span class="php">            $observer-&gt;update(<span class="keyword">$this</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">observe</span> <span class="keyword">implements</span> <span class="title">SplObserver</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"通知观察者&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">observe1</span> <span class="keyword">implements</span> <span class="title">SplObserver</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"通知另一观察者&lt;/br&gt;"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$subject = <span class="keyword">new</span> subject();</span></span><br><span class="line"><span class="php">$observer = <span class="keyword">new</span> observe();</span></span><br><span class="line"><span class="php">$observer1 = <span class="keyword">new</span> observe1();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php">$subject-&gt;attach($observer);</span></span><br><span class="line"><span class="php">$subject-&gt;attach($observer1);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$subject-&gt;notify();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$subject-&gt;detach($observer1);</span></span><br><span class="line"><span class="php">$subject-&gt;notify();</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——单例模式]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-4/</url>
      <content type="html"><![CDATA[<center>PHP设计模式，单例模式介绍</center>

<a id="more"></a>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>保证一个类有且仅有一个实例，并且提供一个访问它的全局访问点。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1、提供了对唯一实例的受控访问。<br>2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。<br>3、允许可变数目的实例。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1、由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。<br>2、单例类的职责过重，在一定程度上违背了“单一职责原则”。<br>3、滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">SingletonPattern</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">single</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> <span class="keyword">static</span> $ins = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getins</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">self</span>::$ins == <span class="keyword">null</span>) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">self</span>::$ins = <span class="keyword">new</span> <span class="keyword">self</span>();</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">self</span>::$ins;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//方法前加final,则方法不能被覆盖,不能被继承</span></span></span><br><span class="line"><span class="php">    <span class="keyword">final</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//方法前加final,则方法不能被覆盖,不能被克隆</span></span></span><br><span class="line"><span class="php">    <span class="keyword">final</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$s1 = single::getins();</span></span><br><span class="line"><span class="php">$s2 = single::getins();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($s1 === $s2) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"一个对象"</span>;</span></span><br><span class="line"><span class="php">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"不是一个对象"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——抽象工厂]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-3/</url>
      <content type="html"><![CDATA[<center>PHP设计模式,抽象工厂介绍</center>

<a id="more"></a>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>提供创建<code>一系列</code>相关或相互依赖对象的接口，而无需指定他们具体的类</p>
<p>抽象工厂模式：<br>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类可以创建多个具体产品类的实例。 </p>
<h2 id="与工厂方法区别"><a href="#与工厂方法区别" class="headerlink" title="与工厂方法区别"></a>与工厂方法区别</h2><p>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。<br>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>易于交换产品系列</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>新增功能时要增加的类比较多，至少要增加三个类</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">AbstractFactory</span>;</span></span><br><span class="line"><span class="php"><span class="comment">//=====共同接口=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//新增user接口</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">user</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//新增createUser函数</span></span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createUser</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====服务器端=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbmysql</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect mysql!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbsqlite</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect sqlite!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//新增user**类</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">userMysql</span> <span class="keyword">implements</span> <span class="title">user</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">insertUser</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"insert mysql user!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">userSqlite</span> <span class="keyword">implements</span> <span class="title">user</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">insertUser</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"insert sqlite user!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">mysqlFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> dbmysql();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createUser</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> userMysql();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">sqliteFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> dbsqlite();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createUser</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> userSqlite();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====客户器端=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$fact = <span class="keyword">new</span> mysqlFactory();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$db = $fact-&gt;createDB();</span></span><br><span class="line"><span class="php">$db-&gt;conn();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$user = $fact-&gt;createUser();</span></span><br><span class="line"><span class="php">$user-&gt;insertUser();</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——工厂方法]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-2/</url>
      <content type="html"><![CDATA[<center>PHP设计模式——工厂方法</center>

<a id="more"></a>
<p>​</p>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>工厂方法模式实现时，客户端需要决定实例化哪个工厂来实现运算类，选择判断问题还是存在，但工厂方法把简单工厂的内部逻辑判断问题移到了客户端代码来进行。我们想加功能，本来是要改工厂类的，现在只需要改客户端。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>增加一个类，只需要增加类和相对应的工厂，两个类，不需要修改工厂类。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>增加类，会修改客户端代码，工厂方法只是把简单工厂的内部逻辑判断移到了客户端进行。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====共同接口=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====服务器端=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbmysql</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect mysql!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbsqlite</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect mysql!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">mysqlFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> dbmysql();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">sqliteFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> dbsqlite();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====服务器端新增oracle类=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dboracle</span> <span class="keyword">implements</span> <span class="title">db</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect oracle"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">oracleFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">new</span> dboracle();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====客户器端=====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$fact = <span class="keyword">new</span> mysqlFactory();</span></span><br><span class="line"><span class="php">$db = $fact-&gt;createDB();</span></span><br><span class="line"><span class="php">$db-&gt;conn();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$fact1 = <span class="keyword">new</span> oracleFactory();</span></span><br><span class="line"><span class="php">$db1 = $fact1-&gt;createDB();</span></span><br><span class="line"><span class="php">$db-&gt;conn();</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——简单工厂]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-1/</url>
      <content type="html"><![CDATA[<p><center>PHP设计模式——简单工厂</center><br><a id="more"></a></p>
<h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>　　模式的核心是工厂类。这个类含有必要的逻辑判断，可以决定在什么时候创建哪一个实例，而调用者则可以免除直接创建对象的责任。<br>    简单工厂模式通过这种做法实现了对责任的分割，当系统引入新的类的时候无需修改调用者。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>　　这个工厂类集中了所以的创建逻辑，当有复杂的多层次等级结构时，所有的业务逻辑都在这个工厂类中实现。什么时候它不能工作了，整个系统都会受到影响。</p>
<h2 id="PHP代码"><a href="#PHP代码" class="headerlink" title="PHP代码"></a>PHP代码</h2><p>使用简单工厂模式来实现登录不同种的数据库</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====共同接口=====</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">interface</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====服务器端=====</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbmysql</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect mysql!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dbsqlite</span> <span class="keyword">implements</span> <span class="title">db</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect mysql!"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//新增dboracle类</span></span></span><br><span class="line"><span class="php"><span class="comment">//简单工厂模式通过这种做法实现了对责任的分割，当系统引入新的类的时候无需修改调用者。</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">dboracle</span> <span class="keyword">implements</span> <span class="title">db</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">conn</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"connect oracle"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//模式的核心是工厂类。这个类含有必要的逻辑判断，</span></span></span><br><span class="line"><span class="php"><span class="comment">//可以决定在什么时候创建哪一个实例，而调用者则可以免除直接创建对象的责任。</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createDB</span><span class="params">($type)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>($type == <span class="string">'mysql'</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">new</span> dbmysql();</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">elseif</span>($type == <span class="string">'sqlite'</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">new</span> dbsqlite();</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">elseif</span>($type == <span class="string">'oracle'</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="comment">//必须要新加判断语句来完成新的new类,违背了开闭原则</span></span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">new</span> dboracle();</span></span><br><span class="line"><span class="php">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Error db type"</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//=====客户端====</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$mysql = SimpleFactory::createDB(<span class="string">'mysql'</span>);</span></span><br><span class="line"><span class="php">$mysql-&gt;conn();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$sqlite = SimpleFactory::createDB(<span class="string">'sqlite'</span>);</span></span><br><span class="line"><span class="php">$sqlite-&gt;conn();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">//新增oracle类</span></span></span><br><span class="line"><span class="php">$oracle = SimpleFactory::createDB(<span class="string">'oracle'</span>);</span></span><br><span class="line"><span class="php">$oracle-&gt;conn();</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP设计模式——简介.md]]></title>
      <url>http://yoursite.com/2016/02/29/DesignPatternWithPHP-0/</url>
      <content type="html"><![CDATA[<center>PHP设计模式简介</center>

<a id="more"></a>
<p>​</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>在软件开发过程中，经常出现的典型场景的典型解决方案称为设计模式<br>使用设计模式的根本原因是为了代码复用，增加可维护性</p>
</blockquote>
<h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><p>1.开闭原则(Open Close Principle）<br>此原则是由Bertrand Meyer提出的。原文是：</p>
<blockquote>
<p>“Software entities should be open for extension,but closed for modification”。</p>
</blockquote>
<p>就是说模块应对扩展开放，而对修改关闭。</p>
<p>2.里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说:</p>
<blockquote>
<p>任何基类可以出现的地方，子类一定可以出现。</p>
</blockquote>
<p>LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p>3.依赖倒转原则（Dependence Inversion Principle）<br>这个原则是开闭原则的基础，具体内容：</p>
<blockquote>
<p>针对对接口编程，依赖于抽象而不依赖于具体。</p>
</blockquote>
<p>4、接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：</p>
<blockquote>
<p>使用多个隔离的接口，比使用单个接口要好。</p>
</blockquote>
<p>它还有另外一个意思是：降低类之间的耦合度。<br>由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p>5、迪米特法则，又称最少知道原则（Demeter Principle）<br>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p>6、合成复用原则（Composite Reuse Principle）<br>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>降低耦合度</li>
<li>容易修改</li>
<li>增加复用</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UML图解]]></title>
      <url>http://yoursite.com/2016/02/26/uml-scheme/</url>
      <content type="html"><![CDATA[<center>参考自《大话设计模式》</center>

<a id="more"></a>
<p><img src="/2016/02/26/uml-scheme/1.png" alt=""></p>
<p>解释</p>
<ul>
<li>动物矩形框</li>
</ul>
<p><img src="/2016/02/26/uml-scheme/2.png" alt=""></p>
<p>代表一个类：<br>第一层：显示类的名称，如果是抽象类，用斜体字标示<br>第二层：类的特性，通常就是类的字段与属性<br>第三层：类的操作，通常是方法和行为</p>
<p>注意前面的符号：<br>“＋”代表piblic，“－”代表private，“＃”代表protected</p>
<p>-关联关系</p>
<p>当一个类“知道”另一个类时，可以用关联关系，企鹅知道气候的变化，故企鹅和气候做关联</p>
<ul>
<li>聚合关系</li>
</ul>
<blockquote>
<p>聚合表示一种弱的‘拥有’关系，体现是A对象可以包含B对象，但B对象不是A对象的一部分</p>
</blockquote>
<ul>
<li>合成关系</li>
</ul>
<blockquote>
<p>合成表示一种强的‘拥有’关系，体现严格的部分和整体关系，部分和整体的生命周期是一样的</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> UML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit附录]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-7/</url>
      <content type="html"><![CDATA[<p><center>PHPUnit教程附录</center><br><a id="more"></a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.phpunit.cn/manual/current/zh_cn/index.html" target="_blank" rel="external">PHPUnit手册</a></li>
<li><p><a href="https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/" target="_blank" rel="external">Unit Testing Tutorial</a></p>
</li>
<li><p><a href="http://www.acim.net/2014/11/testing-protectedprivate-methods-in-phpunit/" target="_blank" rel="external">Testing Protected/Private Methods in PHPUnit using Closure class</a></p>
</li>
<li><p><a href="http://someguyjeremy.com/2013/01/database-testing-with-phpunit.html" target="_blank" rel="external">Database Testing with PHPUnit</a></p>
</li>
</ul>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/Code-Ken/PHPUnit-demo" target="_blank" rel="external">https://github.com/Code-Ken/PHPUnit-demo</a></p>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第七章——数据库测试]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-6/</url>
      <content type="html"><![CDATA[<center>介绍怎么对数据库进行测试</center>

<a id="more"></a>
<h2 id="数据库测试的四个阶段"><a href="#数据库测试的四个阶段" class="headerlink" title="数据库测试的四个阶段"></a>数据库测试的四个阶段</h2><blockquote>
<p>Gerard Meszaros 在他的书《xUnit 测试模式》中列出了单元测试的四个阶段：<br>建立基境(fixture)<br>执行被测系统<br>验证结果<br>拆除基境(fixture)</p>
</blockquote>
<h2 id="PHPUnit-数据库测试用例的配置"><a href="#PHPUnit-数据库测试用例的配置" class="headerlink" title="PHPUnit 数据库测试用例的配置"></a>PHPUnit 数据库测试用例的配置</h2><p>一般而言，使用 PHPUnit 时，测试用例都是按如下方式扩展自 PHPUnit_Framework_TestCase 类,但如果测试代码用到了数据库扩展模块，那么建立的过程就会更复杂一些，需要扩展另一个抽象 TestCase 类，它要求实现两个抽象方法，getConnection() 和 getDataSet()</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">MyGuestbookTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Database_TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $pdo = <span class="keyword">new</span> PDO(<span class="string">'sqlite::memory:'</span>);</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createDefaultDBConnection($pdo, <span class="string">':memory:'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @return PHPUnit_Extensions_Database_DataSet_IDataSet</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDataSet</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;createFlatXMLDataSet(dirname(<span class="keyword">__FILE__</span>).<span class="string">'/_files/guestbook-seed.xml'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="使用自己的抽象数据库TestCase类"><a href="#使用自己的抽象数据库TestCase类" class="headerlink" title="使用自己的抽象数据库TestCase类"></a>使用自己的抽象数据库TestCase类</h2><p>从前面的实现范例中容易发现 getConnection() 方法是相当稳定的，可以在不同的数据库测试用例中重用。另外，为了保持测试的性能良好和数据库的开销较低，可以对代码进行一点重构，来为应用程序形成一个通用的抽象测试用例，同时依然可以为每个具体测试用例指定不同的数据基境</p>
<p>我们在 phpUnitTutorial 文件夹下建立Fixtures文件夹，抽象自己的TestCase类，并在Fixtures文件夹下建立fixtures子文件夹用于存放xml数据</p>
<p>建立自己的抽象类FixturesTestCase</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Fixtures</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Extensions_Database_TestCase</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PDOException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PDO</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Extensions_Database_DataSet_CompositeDataSet</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">FixturesTestCase</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Extensions_Database_TestCase</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $fixtures = <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">        <span class="comment">//table表名</span></span></span><br><span class="line"><span class="php">        <span class="string">'posts'</span>,</span></span><br><span class="line"><span class="php">        <span class="string">'postmeta'</span>,</span></span><br><span class="line"><span class="php">        <span class="string">'options'</span></span></span><br><span class="line"><span class="php">    );</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//连接变量</span></span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $conn = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">//设立基境</span></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setUp</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">//获取mysql连接</span></span></span><br><span class="line"><span class="php">        $conn = <span class="keyword">$this</span>-&gt;getConnection();</span></span><br><span class="line"><span class="php">        <span class="comment">//建立PDO连接</span></span></span><br><span class="line"><span class="php">        $pdo = $conn-&gt;getConnection();</span></span><br><span class="line"><span class="php">        <span class="comment">// set up tables</span></span></span><br><span class="line"><span class="php">        $fixtureDataSet = <span class="keyword">$this</span>-&gt;getDataSet(<span class="keyword">$this</span>-&gt;fixtures);</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($fixtureDataSet-&gt;getTableNames() <span class="keyword">as</span> $table) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// drop table</span></span></span><br><span class="line"><span class="php">            $pdo-&gt;exec(<span class="string">"DROP TABLE IF EXISTS `$table`;"</span>);</span></span><br><span class="line"><span class="php">            <span class="comment">// recreate table</span></span></span><br><span class="line"><span class="php">            <span class="comment">//Returns a table meta data object for the given table</span></span></span><br><span class="line"><span class="php">            $meta = $fixtureDataSet-&gt;getTableMetaData($table);</span></span><br><span class="line"><span class="php">            $create = <span class="string">"CREATE TABLE IF NOT EXISTS `$table` "</span>;</span></span><br><span class="line"><span class="php">            $cols = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">            <span class="keyword">foreach</span> ($meta-&gt;getColumns() <span class="keyword">as</span> $col) &#123;</span></span><br><span class="line"><span class="php">                $cols[] = <span class="string">"`$col` VARCHAR(200)"</span>;</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">            $create .= <span class="string">'('</span>.implode(<span class="string">','</span>, $cols).<span class="string">');'</span>;</span></span><br><span class="line"><span class="php">            $pdo-&gt;exec($create);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::setUp();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $allTables =</span></span><br><span class="line"><span class="php">            <span class="keyword">$this</span>-&gt;getDataSet(<span class="keyword">$this</span>-&gt;fixtures)-&gt;getTableNames();</span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($allTables <span class="keyword">as</span> $table) &#123;</span></span><br><span class="line"><span class="php">            <span class="comment">// drop table</span></span></span><br><span class="line"><span class="php">            $conn = <span class="keyword">$this</span>-&gt;getConnection();</span></span><br><span class="line"><span class="php">            $pdo = $conn-&gt;getConnection();</span></span><br><span class="line"><span class="php">            $pdo-&gt;exec(<span class="string">"DROP TABLE IF EXISTS `$table`;"</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">parent</span>::tearDown();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getConnection</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// <span class="doctag">TODO:</span> Implement getConnection() method.</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;conn == <span class="keyword">null</span>)&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="php">                $pdo = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=localhost;dbname=waimai'</span>, <span class="string">'root'</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="php">                <span class="keyword">$this</span>-&gt;conn = <span class="keyword">$this</span>-&gt;createDefaultDBConnection($pdo, <span class="string">'test'</span>);</span></span><br><span class="line"><span class="php">            &#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span></span><br><span class="line"><span class="php">                <span class="keyword">echo</span> $e-&gt;getMessage();</span></span><br><span class="line"><span class="php">            &#125;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;conn;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDataSet</span><span class="params">($fixtures = array<span class="params">()</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// <span class="doctag">TODO:</span> Implement getDataSet() method.</span></span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">empty</span>($fixtures)) &#123;</span></span><br><span class="line"><span class="php">            $fixtures = <span class="keyword">$this</span>-&gt;fixtures;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $compositeDs = <span class="keyword">new</span></span></span><br><span class="line"><span class="php">        PHPUnit_Extensions_Database_DataSet_CompositeDataSet(<span class="keyword">array</span>());</span></span><br><span class="line"><span class="php">        $fixturePath = dirname(<span class="keyword">__FILE__</span>) . DIRECTORY_SEPARATOR . <span class="string">'fixtures'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">foreach</span> ($fixtures <span class="keyword">as</span> $fixture) &#123;</span></span><br><span class="line"><span class="php">            $path =  $fixturePath . DIRECTORY_SEPARATOR . <span class="string">"$fixture.xml"</span>;</span></span><br><span class="line"><span class="php">            $ds = <span class="keyword">$this</span>-&gt;createMySQLXMLDataSet($path);</span></span><br><span class="line"><span class="php">            $compositeDs-&gt;addDataSet($ds);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $compositeDs;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadDataSet</span><span class="params">($dataSet)</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="comment">// set the new dataset</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;getDatabaseTester()-&gt;setDataSet($dataSet);</span></span><br><span class="line"><span class="php">        <span class="comment">// call setUp whateverhich adds the rows</span></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;getDatabaseTester()-&gt;onSetUp();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在fixtures文件夹下建立xml数据</p>
<p>options.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysqldump</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">database</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table_data</span> <span class="attr">name</span>=<span class="string">"prefix_options"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_id"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_name"</span>&gt;</span>siteurl<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_value"</span>&gt;</span>http://wordpress.local<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_id"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_name"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"option_value"</span>&gt;</span>http://wordpress.local<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table_data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mysqldump</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>postmeta.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysqldump</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">database</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table_data</span> <span class="attr">name</span>=<span class="string">"postmeta"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_id"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_id"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_key"</span>&gt;</span>Something<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_value"</span>&gt;</span>For Nothing<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_id"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_id"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_key"</span>&gt;</span>MetaKey<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_value"</span>&gt;</span>MetaValue<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_id"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_id"</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_key"</span>&gt;</span>More<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_id"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_id"</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_key"</span>&gt;</span>Even More<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"meta_value"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table_data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mysqldump</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>post.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysqldump</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">database</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table_data</span> <span class="attr">name</span>=<span class="string">"posts"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"ID"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_content"</span>&gt;</span>Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_title"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_name"</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"guid"</span>&gt;</span>http://wordpress.local/?p=1<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"ID"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_content"</span>&gt;</span>This is an example of a WordPress page, you could edit this to put information about yourself or your site so readers know where you are coming from. You can create as many pages like this one or sub-pages as you like and manage all of your content inside of WordPress.<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_title"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"post_name"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"guid"</span>&gt;</span>http://wordpress.local/?page_id=2<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table_data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mysqldump</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="建立测试"><a href="#建立测试" class="headerlink" title="建立测试"></a>建立测试</h2><p>在Tests文件夹下建立测试文件<br>DatabaseTest.php</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">Fixtures</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PDO</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseTest</span> <span class="keyword">extends</span> <span class="title">Fixtures</span>\<span class="title">FixturesTestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $fixtures = <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">        <span class="string">'posts'</span>,</span></span><br><span class="line"><span class="php">        <span class="string">'postmeta'</span>,</span></span><br><span class="line"><span class="php">        <span class="string">'options'</span></span></span><br><span class="line"><span class="php">    );</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">testReadDatabase</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        $conn = <span class="keyword">$this</span>-&gt;getConnection()-&gt;getConnection();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// fixtures auto loaded, let's read some data</span></span></span><br><span class="line"><span class="php">        $query = $conn-&gt;query(<span class="string">'SELECT * FROM posts'</span>);</span></span><br><span class="line"><span class="php">        $results = $query-&gt;fetchAll(PDO::FETCH_COLUMN);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="number">2</span>, count($results));</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// now delete them</span></span></span><br><span class="line"><span class="php">        $conn-&gt;query(<span class="string">'TRUNCATE posts'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $query = $conn-&gt;query(<span class="string">'SELECT * FROM posts'</span>);</span></span><br><span class="line"><span class="php">        $results = $query-&gt;fetchAll(PDO::FETCH_COLUMN);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="number">0</span>, count($results));</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="comment">// now reload them</span></span></span><br><span class="line"><span class="php">        $ds = <span class="keyword">$this</span>-&gt;getDataSet(<span class="keyword">array</span>(<span class="string">'posts'</span>));</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;loadDataSet($ds);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $query = $conn-&gt;query(<span class="string">'SELECT * FROM posts'</span>);</span></span><br><span class="line"><span class="php">        $results = $query-&gt;fetchAll(PDO::FETCH_COLUMN);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals(<span class="number">2</span>, count($results));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第六章——基境(fixture)]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-5/</url>
      <content type="html"><![CDATA[<center>基境简介</center>

<a id="more"></a>
<h2 id="什么是基境"><a href="#什么是基境" class="headerlink" title="什么是基境"></a>什么是基境</h2><p>在编写测试时，最费时的部分之一是编写代码来将整个场景设置成某个已知的状态，并在测试结束后将其复原到初始状态。这个已知的状态称为测试的 基境(fixture)。<br>相当于php里面的构造函数<strong>construct()和析构函数</strong>destructor()</p>
<h2 id="setUp"><a href="#setUp" class="headerlink" title="setUp()"></a>setUp()</h2><p>用于建立栈的基境</p>
<h2 id="tearDown"><a href="#tearDown" class="headerlink" title="tearDown()"></a>tearDown()</h2><p>用于取消栈的基境</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>参考第七章——数据库测试</p>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第五章——测试private/protected的方法]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-4/</url>
      <content type="html"><![CDATA[<center>PHPUnit测试private/protected的方法</center>

<a id="more"></a>
<p>一般情况下PHPUnit只能测试公共方法，对于private/protected方法的测试,一般采取间接测试的方式，即测试公共方法，如果公共方法测试成功，则private/protected方法也间接的测试成功了，但如果有一个重要的方法被隐藏在私有或者保护的访问权限中，我们不能知道故障从何而起，因此我们希望直接测试某些private/protected方法</p>
<h2 id="被测文件"><a href="#被测文件" class="headerlink" title="被测文件"></a>被测文件</h2><p>首先我们依旧在./phpUnitTutorial/下新建一个php文件，文件名为PrivateOrProtected,代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">PrivateOrProtected</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $property = <span class="string">'Protected Property'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">'Protected Method'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>非常的简单，里面有一个protected属性和一个private方法。</p>
<h2 id="直接测试private-protected"><a href="#直接测试private-protected" class="headerlink" title="直接测试private/protected"></a>直接测试private/protected</h2><p>在./phpUnitTutorial/Test下新建php测试文件，文件名称为PrivateOrProtectedTest</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Framework_TestCase</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">PrivateOrProtected</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">ReflectionProperty</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">ReflectionMethod</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">PrivateOrProtectedTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * Read protected property</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProtectedProperty</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $foo = <span class="keyword">new</span> PrivateOrProtected();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $bar = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;property;</span></span><br><span class="line"><span class="php">        &#125;;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $baz = $bar-&gt;bindTo($foo, $foo);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($baz(), <span class="string">'Protected Property'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * Run private method</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProtectedMethod</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $foo = <span class="keyword">new</span> PrivateOrProtected();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $bar = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;method();</span></span><br><span class="line"><span class="php">        &#125;;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $baz = $bar-&gt;bindTo($foo, $foo);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($baz(), <span class="string">'Protected Method'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProtectProperty2</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $fixture = <span class="keyword">new</span> PrivateOrProtected();</span></span><br><span class="line"><span class="php">        <span class="comment">//Note that the property will only become accessible using the ReflectionProperty class.</span></span></span><br><span class="line"><span class="php">        <span class="comment">// The property is still private or protected in the class instances.</span></span></span><br><span class="line"><span class="php">        <span class="comment">//if class does not exist in current file,you need to add namespace</span></span></span><br><span class="line"><span class="php">        $reflector = <span class="keyword">new</span> ReflectionProperty(<span class="string">'phpUnitTutorial\PrivateOrProtected'</span>,<span class="string">'property'</span>);</span></span><br><span class="line"><span class="php">        $reflector-&gt;setAccessible(<span class="keyword">true</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $bar = $reflector-&gt;getValue($fixture);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($bar,<span class="string">'Protected Property'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testProtectedMethod2</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $fixture = <span class="keyword">new</span> PrivateOrProtected();</span></span><br><span class="line"><span class="php">        $reflector = <span class="keyword">new</span> ReflectionMethod(<span class="string">'phpUnitTutorial\PrivateOrProtected'</span>,<span class="string">'method'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $bar = $reflector-&gt;getClosure($fixture);</span></span><br><span class="line"><span class="php">        $bar = call_user_func_array($bar,<span class="keyword">array</span>());</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($bar,<span class="string">'Protected Method'</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>以上代码通过两种方式：</p>
<ul>
<li>匿名函数的方式</li>
<li>使用Reflection类的方式</li>
</ul>
<p>实现了对private/protected的直接测试,注意使用Reflection类时，php版本需要在5.3.2以上。</p>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第四章——编写PHPUnit测试]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-3/</url>
      <content type="html"><![CDATA[<center>本文主要讲解一些特殊类型的测试方法</center>

<a id="more"></a>
<h2 id="对异常进行测试"><a href="#对异常进行测试" class="headerlink" title="对异常进行测试"></a>对异常进行测试</h2><p>在./PHPUnitTutorial下新建一个ThrowException.php文件用于抛出异常<br>在./PHPUnitTutorial/Test下新建一个ThrowExceptionTest.php文件用于对异常进行测试</p>
<h3 id="被测试代码"><a href="#被测试代码" class="headerlink" title="被测试代码"></a>被测试代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">Prophecy</span>\<span class="title">Exception</span>\<span class="title">InvalidArgumentException</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ThrowException</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($bar=<span class="string">""</span>)</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">empty</span>($bar))&#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'$bar is empty!!!'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $bar;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidArgumentException(<span class="string">'Hi there'</span>,<span class="number">200</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">ThrowException</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Framework_TestCase</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">ThrowExceptionTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span>&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @expectedException Exception</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFooException</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $class = <span class="keyword">new</span> ThrowException();</span></span><br><span class="line"><span class="php">        $foo = $class-&gt;foo();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">    /**</span><br><span class="line">     * @expectedException InvalidArgumentException</span><br><span class="line">     * @expectedExceptionMessage Hi there</span><br><span class="line">     * @expectedExceptionCode 200</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testFoo2Exception</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $class = <span class="keyword">new</span> ThrowException();</span></span><br><span class="line"><span class="php">        $foo = $class-&gt;foo2();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/2016/02/24/phpunit-tutorial-3/1.png" alt=""></p>
<h3 id="测试讲解"><a href="#测试讲解" class="headerlink" title="测试讲解"></a>测试讲解</h3><p>对于异常的抛出的测试，我们在测试文档的方法名前用注释来标明对异常的测试</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expectedException InvalidArgumentException =&gt;表示期待抛出的异常是InvalidArgumentException</span><br><span class="line">expectedExceptionMessage Hi there =&gt;表示期待抛出的异常信息是<span class="string">"Hi there"</span></span><br><span class="line">expectedExceptionCode <span class="number">200</span> =&gt;表示期待抛出的异常Code是<span class="string">"200"</span></span><br></pre></td></tr></table></figure>
<h2 id="对输出进行测试"><a href="#对输出进行测试" class="headerlink" title="对输出进行测试"></a>对输出进行测试</h2><p>在./PHPUnitTutorial下新建一个Output.php文件用于抛出异常<br>在./PHPUnitTutorial/Test下新建一个OutputTest.php文件用于对异常进行测试</p>
<h3 id="被测试代码-1"><a href="#被测试代码-1" class="headerlink" title="被测试代码"></a>被测试代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">OutputString</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"2333"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">Output</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Framework_TestCase</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OutputTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testOutputString</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php">        Output::OutputString();</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;expectOutputString(<span class="string">"23334"</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/2016/02/24/phpunit-tutorial-3/2.png" alt=""></p>
<h3 id="测试讲解-1"><a href="#测试讲解-1" class="headerlink" title="测试讲解"></a>测试讲解</h3><p>有时候，想要断言（比如说）某方法的运行过程中生成了预期的输出（例如，通过 echo 或 print）。PHPUnit_Framework_TestCase 类使用 PHP 的 输出缓冲 特性来为此提供必要的功能支持。<br>使用expectOutputString()方法来设定所预期的输出。如果没有产生预期的输出，测试将计为失败。</p>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第三章——Assertion断言]]></title>
      <url>http://yoursite.com/2016/02/24/phpunit-tutorial-2/</url>
      <content type="html"><![CDATA[<p><center>PHPUnit教程第三章，phpunit断言介绍</center><br><a id="more"></a></p>
<blockquote>
<p>断言(Assertions)是PHPUnit提供的一系列对程序执行结果测试的方法。通俗的讲，就是断言执行程序结果为我们期待的值，如果不是则测试失败</p>
</blockquote>
<h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertTrue</td>
<td style="text-align:left">断言为真</td>
</tr>
<tr>
<td style="text-align:center">assertFalse</td>
<td style="text-align:left">断言为假</td>
</tr>
</tbody>
</table>
<h2 id="NULL类型"><a href="#NULL类型" class="headerlink" title="NULL类型"></a>NULL类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertNull</td>
<td style="text-align:left">断言为NULL</td>
</tr>
<tr>
<td style="text-align:center">assertNotNull</td>
<td style="text-align:left">断言非NULL</td>
</tr>
</tbody>
</table>
<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertEquals</td>
<td style="text-align:left">断言等于</td>
</tr>
<tr>
<td style="text-align:center">assertNotEquals</td>
<td style="text-align:left">断言不等于</td>
</tr>
<tr>
<td style="text-align:center">assertGreaterThan</td>
<td style="text-align:left">断言大于</td>
</tr>
<tr>
<td style="text-align:center">assertGreaterThanOrEqual</td>
<td style="text-align:left">断言大于等于</td>
</tr>
<tr>
<td style="text-align:center">assertLessThan</td>
<td style="text-align:left">断言小于</td>
</tr>
<tr>
<td style="text-align:center">assertLessThanOrEqual</td>
<td style="text-align:left">断言小于等于</td>
</tr>
</tbody>
</table>
<h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertEquals</td>
<td style="text-align:left">断言等于</td>
</tr>
<tr>
<td style="text-align:center">assertNotEquals</td>
<td style="text-align:left">断言不等于</td>
</tr>
<tr>
<td style="text-align:center">assertContains</td>
<td style="text-align:left">断言包含</td>
</tr>
<tr>
<td style="text-align:center">assertNotContains</td>
<td style="text-align:left">断言不包含</td>
</tr>
<tr>
<td style="text-align:center">assertContainsOnly</td>
<td style="text-align:left">断言只包含</td>
</tr>
<tr>
<td style="text-align:center">assertNotContainsOnly</td>
<td style="text-align:left">断言不只包含</td>
</tr>
</tbody>
</table>
<h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertEquals</td>
<td style="text-align:left">断言等于</td>
</tr>
<tr>
<td style="text-align:center">assertNotEquals</td>
<td style="text-align:left">断言不等于</td>
</tr>
<tr>
<td style="text-align:center">assertArrayHasKey</td>
<td style="text-align:left">断言有键</td>
</tr>
<tr>
<td style="text-align:center">assertArrayNotHasKey</td>
<td style="text-align:left">断言没有键</td>
</tr>
<tr>
<td style="text-align:center">assertContains</td>
<td style="text-align:left">断言包含</td>
</tr>
<tr>
<td style="text-align:center">assertNotContains</td>
<td style="text-align:left">断言不包含</td>
</tr>
<tr>
<td style="text-align:center">assertContainsOnly</td>
<td style="text-align:left">断言只包含</td>
</tr>
<tr>
<td style="text-align:center">assertNotContainsOnly</td>
<td style="text-align:left">断言不只包含</td>
</tr>
</tbody>
</table>
<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertAttributeContains</td>
<td style="text-align:left">断言属性包含</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeContainsOnly</td>
<td style="text-align:left">断言属性只包含</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeEquals</td>
<td style="text-align:left">断言属性等于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeGreaterThan</td>
<td style="text-align:left">断言属性大于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeGreaterThanOrEqual</td>
<td style="text-align:left">断言属性大于等于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeLessThan</td>
<td style="text-align:left">断言属性小于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeLessThanOrEqual</td>
<td style="text-align:left">断言属性小于等于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeNotContains</td>
<td style="text-align:left">断言不包含</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeNotContainsOnly</td>
<td style="text-align:left">断言属性不只包含</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeNotEquals</td>
<td style="text-align:left">断言属性不等于</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeNotSame</td>
<td style="text-align:left">断言属性不相同</td>
</tr>
<tr>
<td style="text-align:center">assertAttributeSame</td>
<td style="text-align:left">断言属性相同</td>
</tr>
<tr>
<td style="text-align:center">assertSame</td>
<td style="text-align:left">断言类型和值都相同</td>
</tr>
<tr>
<td style="text-align:center">assertNotSame</td>
<td style="text-align:left">断言类型或值不相同</td>
</tr>
<tr>
<td style="text-align:center">assertObjectHasAttribute</td>
<td style="text-align:left">断言对象有某属性</td>
</tr>
<tr>
<td style="text-align:center">assertObjectNotHasAttribute</td>
<td style="text-align:left">断言对象没有某属性</td>
</tr>
</tbody>
</table>
<h2 id="class类型"><a href="#class类型" class="headerlink" title="class类型"></a>class类型</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertClassHasAttribute</td>
<td style="text-align:left">断言类有某属性</td>
</tr>
<tr>
<td style="text-align:center">assertClassHasStaticAttribute</td>
<td style="text-align:left">断言类有某静态属性</td>
</tr>
<tr>
<td style="text-align:center">assertClassNotHasAttribute</td>
<td style="text-align:left">断言类没有某属性</td>
</tr>
<tr>
<td style="text-align:center">assertClassNotHasStaticAttribute</td>
<td style="text-align:left">断言类没有某静态属性</td>
</tr>
</tbody>
</table>
<h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertFileEquals</td>
<td style="text-align:left">断言文件内容等于</td>
</tr>
<tr>
<td style="text-align:center">assertFileExists</td>
<td style="text-align:left">断言文件存在</td>
</tr>
<tr>
<td style="text-align:center">assertFileNotEquals</td>
<td style="text-align:left">断言文件内容不等于</td>
</tr>
<tr>
<td style="text-align:center">assertFileNotExists</td>
<td style="text-align:left">断言文件不存在</td>
</tr>
</tbody>
</table>
<h2 id="XML相关"><a href="#XML相关" class="headerlink" title="XML相关"></a>XML相关</h2><table>
<thead>
<tr>
<th style="text-align:center">断言</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">assertXmlFileEqualsXmlFile</td>
<td style="text-align:left">断言XML文件内容相等</td>
</tr>
<tr>
<td style="text-align:center">assertXmlFileNotEqualsXmlFile</td>
<td style="text-align:left">断言XML文件内容不相等</td>
</tr>
<tr>
<td style="text-align:center">assertXmlStringEqualsXmlFile</td>
<td style="text-align:left">断言XML字符串等于XML文件内容</td>
</tr>
<tr>
<td style="text-align:center">assertXmlStringEqualsXmlString</td>
<td style="text-align:left">断言XML字符串相等</td>
</tr>
<tr>
<td style="text-align:center">assertXmlStringNotEqualsXmlFile</td>
<td style="text-align:left">断言XML字符串不等于XML文件内容</td>
</tr>
<tr>
<td style="text-align:center">assertXmlStringNotEqualsXmlString</td>
<td style="text-align:left">断言XML字符串不相等</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第二章——第一个PHPUnit程序]]></title>
      <url>http://yoursite.com/2016/02/20/phpunit-tutorial-1/</url>
      <content type="html"><![CDATA[<p><center>PHPUnit教程第二章，编写phpunit入门程序</center><br><a id="more"></a></p>
<p>​</p>
<h2 id="一些测试惯例"><a href="#一些测试惯例" class="headerlink" title="一些测试惯例"></a>一些测试惯例</h2><ul>
<li>针对类Class的测试写在类ClassTest中。</li>
<li>ClassTest(通常)继承自 PHPUnit_Framework_TestCase。 </li>
<li>测试都是命名为test*的公用方法。也可以在方法的文档注释块(docblock)中使用 @test 标注将其标记为测试方法。</li>
<li>在测试方法内,类似于assertEquals()这样的断言方法用来对实际值与预期值的匹配做出断言。</li>
<li><p>文件结构和文件名:<br>要成一一对应的关系，例如：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#要测试的文件</span><br><span class="line">./phpUnitTutorial/Foo.php</span><br><span class="line">./phpUnitTutorial/Bar.php</span><br><span class="line">./phpUnitTutorial/Controller/Baz.php</span><br><span class="line"></span><br><span class="line">#测试文件</span><br><span class="line">./phpUnitTutorial/Test/FooTest.php</span><br><span class="line">./phpUnitTutorial/Test/BarTest.php</span><br><span class="line">./phpUnitTutorial/Test/Controller/BazTest.php</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="第一个测试文件"><a href="#第一个测试文件" class="headerlink" title="第一个测试文件"></a>第一个测试文件</h2><h3 id="要测试文件"><a href="#要测试文件" class="headerlink" title="要测试文件"></a>要测试文件</h3><p>在 ./phpUnitTutorial下创建 URL.php,我们创建一个公共方法sluggify用于将一串字符串转换成URL-safe的字符串:<br>“This string will be sluggified” ===&gt; “this-string-will-be-sluggified”.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">URL</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sluggify</span><span class="params">(string,string,separator = <span class="string">'-'</span>, $maxLength = <span class="number">96</span>)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        title=iconv(′UTF−<span class="number">8</span>′,′ASCII<span class="comment">//TRANSLIT′,title=iconv(′UTF−8′,′ASCII//TRANSLIT′,string);</span></span></span><br><span class="line"><span class="php">        title=pregreplace(<span class="string">"title=pregreplace("</span>title);</span></span><br><span class="line"><span class="php">        title=strtolower(trim(substr(title=strtolower(trim(substr(title, <span class="number">0</span>, $maxLength), <span class="string">'-'</span>));</span></span><br><span class="line"><span class="php">        title=pregreplace(<span class="string">"/[\/|+−]+/"</span>,title=pregreplace(<span class="string">"/[\/|+−]+/"</span>,separator, $title);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> $title;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h3><p>在./phpUnitTutorial/Test文件夹下创建URLTest.php</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">URL</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Framework_TestCase</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsSluggifiedString</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $originalString = <span class="string">'This string will be sluggified'</span>;</span></span><br><span class="line"><span class="php">        $expectedResult = <span class="string">'this-string-will-be-sluggified'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $url = <span class="keyword">new</span> URL();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        result=result=url-&gt;sluggify($originalString);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        this−&gt;assertEquals(this−&gt;assertEquals(expectedResult, $result);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>在终端下运行测试</p>
<p><img src="/2016/02/20/phpunit-tutorial-1/1.png" alt=""></p>
<p>显示OK，表明测试成功！</p>
<h3 id="测试讲解"><a href="#测试讲解" class="headerlink" title="测试讲解"></a>测试讲解</h3><p>查看URLTest.php文件，发现编写测试文件十分的简便。<br>仅仅几行，就可验证URL类下的sluggify方法是否正确，而验证是否正确的关键函数是assertEquals()断言函数来验证(后面会详细讲解断言函数)<br>assertEquals()这个函数的作用就是验证传入的expectedResult,expectedResult,result两个值是否相等<br>对于一个方法，我们可能需要多组数据<br>但是一个test方法只能有一个assert,因此我们可以写多个test方法来测试不同的数据</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsExpectedForStringsContainingNumbers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $originalString = <span class="string">'This1 string2 will3 be 44 sluggified10'</span>;</span><br><span class="line">    $expectedResult = <span class="string">'this1-string2-will3-be-44-sluggified10'</span>;</span><br><span class="line"></span><br><span class="line">    $url = <span class="keyword">new</span> URL();</span><br><span class="line"></span><br><span class="line">    result=result=url-&gt;sluggify($originalString);</span><br><span class="line"></span><br><span class="line">    this−&gt;assertEquals(this−&gt;assertEquals(expectedResult, $result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsExpectedForStringsContainingSpecialCharacters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    originalString = <span class="string">'This! @string#originalString = '</span>This! @string<span class="comment"># %$will ()be "sluggified';</span></span><br><span class="line">    $expectedResult = <span class="string">'this-string-will-be-sluggified'</span>;</span><br><span class="line"></span><br><span class="line">    $url = <span class="keyword">new</span> URL();</span><br><span class="line"></span><br><span class="line">    result=result=url-&gt;sluggify($originalString);</span><br><span class="line"></span><br><span class="line">    this−&gt;assertEquals(this−&gt;assertEquals(expectedResult, $result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsExpectedForStringsContainingNonEnglishCharacters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $originalString = <span class="string">"Tänk efter nu – förr'n vi föser dig bort"</span>;</span><br><span class="line">    $expectedResult = <span class="string">'tank-efter-nu-forrn-vi-foser-dig-bort'</span>;</span><br><span class="line"></span><br><span class="line">    $url = <span class="keyword">new</span> URL();</span><br><span class="line"></span><br><span class="line">    result=result=url-&gt;sluggify($originalString);</span><br><span class="line"></span><br><span class="line">    this−&gt;assertEquals(this−&gt;assertEquals(expectedResult, $result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsExpectedForEmptyStrings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $originalString = <span class="string">''</span>;</span><br><span class="line">    $expectedResult = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    $url = <span class="keyword">new</span> URL();</span><br><span class="line"></span><br><span class="line">    result=result=url-&gt;sluggify($originalString);</span><br><span class="line"></span><br><span class="line">    this−&gt;assertEquals(this−&gt;assertEquals(expectedResult, $result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试优化"><a href="#测试优化" class="headerlink" title="测试优化"></a>测试优化</h3><p>但这样是在是太麻烦了，PHPUnit为我们提供了@dataProvider方法来为一个方法提供多组数据</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">namespace</span> <span class="title">phpUnitTutorial</span>\<span class="title">Test</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">phpUnitTutorial</span>\<span class="title">URL</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">use</span> <span class="title">PHPUnit_Framework_TestCase</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> <span class="keyword">extends</span> <span class="title">PHPUnit_Framework_TestCase</span></span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line">    /**</span><br><span class="line">     * @param string $originalString String to be sluggified</span><br><span class="line">     * @param string $expectedResult What we expect our slug result to be</span><br><span class="line">     *</span><br><span class="line">     * @dataProvider providerTestSluggifyReturnsSluggifiedString</span><br><span class="line"><span class="php">     */</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSluggifyReturnsSluggifiedString</span><span class="params">($originalString, $expectedResult)</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        $url = <span class="keyword">new</span> URL();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        $result = $url-&gt;sluggify($originalString);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;assertEquals($expectedResult, $result);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">providerTestSluggifyReturnsSluggifiedString</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="keyword">array</span>(</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">'This string will be sluggified'</span>, <span class="string">'this-string-will-be-sluggified'</span>),</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">'THIS STRING WILL BE SLUGGIFIED'</span>, <span class="string">'this-string-will-be-sluggified'</span>),</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">'This1 string2 will3 be 44 sluggified10'</span>, <span class="string">'this1-string2-will3-be-44-sluggified10'</span>),</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">'This! @string#$ %$will ()be "sluggified'</span>, <span class="string">'this-string-will-be-sluggified'</span>),</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">"Tänk efter nu – förr'n vi föser dig bort"</span>, <span class="string">'tank-efter-nu-forrn-vi-foser-dig-bort'</span>),</span></span><br><span class="line"><span class="php">            <span class="keyword">array</span>(<span class="string">''</span>, <span class="string">''</span>),</span></span><br><span class="line"><span class="php">        );</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>
<p>运行phpunit</p>
<p><img src="/2016/02/20/phpunit-tutorial-1/2.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHPUnit第一章——介绍]]></title>
      <url>http://yoursite.com/2016/02/20/phpunit-tutorial-0/</url>
      <content type="html"><![CDATA[<p><center>本文主要对PHPunit做一个简短的介绍,教程的源码都在我的github里</center><br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PHPUnit是对PHP语言进行测试的框架<br>高质量的单元测试是保证项目质量的基础，能够有效的减少BUG，改善程序。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>建议通过composer安装</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">    <span class="attr">"require-dev"</span>: &#123;</span><br><span class="line">        <span class="attr">"phpunit/phpunit"</span>: <span class="string">"5.0.*"</span>  </span><br><span class="line">        <span class="string">"phpunit/dbunit"</span>: <span class="string">"&gt;=1.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移植到 PHP/PHPUnit 上的 DbUnit 用于提供对数据库交互测试的支持。<br>PHPUnit 的 PHAR 分发中已经包含了此组件包。若要通过Composer 安装此组件包,添加如下 “require-dev” 依赖项: “phpunit/dbunit”: “&gt;=1.2”</p>
</blockquote>
<h3 id="安装需求"><a href="#安装需求" class="headerlink" title="安装需求"></a>安装需求</h3><p>代码覆盖率分析报告功能需要 Xdebug（2.2.1以上）与tokenizer扩展。生成 XML 格式的报告需要有xmlwriter扩展。</p>
<h2 id="运行PHPUnit"><a href="#运行PHPUnit" class="headerlink" title="运行PHPUnit"></a>运行PHPUnit</h2><p><img src="/2016/02/20/phpunit-tutorial-0/1.png" alt=""></p>
<p>证明安装成功</p>
<h2 id="设置phpunit-xml"><a href="#设置phpunit-xml" class="headerlink" title="设置phpunit.xml"></a>设置phpunit.xml</h2><p>运行PHPUnit可以通过默认的命令行进行,但这样非常的繁琐，有一个更好的方式:<br>    在项目的根目录编写一个<em>phpunit.xml</em>配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">phpunit</span> <span class="attr">colors</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testsuites</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testsuite</span> <span class="attr">name</span>=<span class="string">"Application Test Suite"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>./phpUnitTutorial/Test/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span>/path/to/MyTest.php<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>/path/to/exclude<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testsuite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testsuites</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">php</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includePath</span>&gt;</span>.<span class="tag">&lt;/<span class="name">includePath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ini</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">const</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">var</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">env</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">post</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">get</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cookie</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">files</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">request</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"bar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">php</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">phpunit</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">解释:</span><br><span class="line">colors=<span class="string">"true"</span> =&gt; 确保你的测试结果是彩色的,便于阅读</span><br><span class="line">&lt;testsuites&gt; =&gt; 带有一个或多个 &lt;testsuite&gt; 子元素的 &lt;testsuites&gt; 元素用于将测试套件及测试用例</span><br><span class="line"></span><br><span class="line">&lt;php&gt; =&gt; 以上 XML 配置对应于如下 PHP 代码:</span><br><span class="line">    ini_set(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">    define(<span class="string">'foo'</span>, <span class="string">'bar'</span>);</span><br><span class="line">    $GLOBALS[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_ENV[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_POST[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_GET[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_COOKIE[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_SERVER[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_FILES[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br><span class="line">    $_REQUEST[<span class="string">'foo'</span>] = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHPUnit </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHPUnit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac下php版本切换]]></title>
      <url>http://yoursite.com/2016/02/16/mac-php-version/</url>
      <content type="html"><![CDATA[<center>本文介绍在Mac开发环境下怎样进行php版本的切换</center>

<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>默认php的安装方式是homebrew,如果不是,那就别看了。。。</p>
<h2 id="安装php多版本"><a href="#安装php多版本" class="headerlink" title="安装php多版本"></a>安装php多版本</h2><p>Mac下默认安装了php但是版本不是很高,用php -v查看php版本</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ Ken$ php -v</span><br><span class="line">PHP 5.6.17 (cli) (built: Jan  8 2016 10:27:48) </span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies</span><br><span class="line">    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans</span><br><span class="line">localhost:~ Ken$</span><br></pre></td></tr></table></figure>
<p>是php 5.6,我们希望安装php7又不把php5.6卸载,咋办呢？<br>首先,我们先用 brew install php70 安装php7</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ Ken$ brew install php70</span><br><span class="line">==&gt; Installing php70 from homebrew/php</span><br><span class="line"><span class="keyword">Error: </span>Cannot install homebrew/php/php70 because conflicting formulae are installed.</span><br><span class="line"></span><br><span class="line">  php56: because different php versions install the same binaries.</span><br><span class="line"></span><br><span class="line">Please `brew unlink php56` before continuing.</span><br><span class="line"></span><br><span class="line">Unlinking removes a formula's symlinks from /usr/local. You can</span><br><span class="line">link the formula again after the install finishes. You can --force this</span><br><span class="line">install, but the build may fail or cause obscure side-effects in the</span><br><span class="line">resulting software.</span><br></pre></td></tr></table></figure>
<p>显示冲突,我们需要用 brew unlink取消homebrew与php56的关联,再安装php7</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ Ken$ brew <span class="keyword">install</span> php70</span><br><span class="line">==&gt; Installing php70 <span class="keyword">from</span> homebrew/php</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles-php/php70<span class="number">-7.</span></span><br><span class="line">###################################################################### <span class="number">100.0</span>%</span><br><span class="line">==&gt; Pouring php70<span class="number">-7.0</span><span class="number">.2</span>.el_capitan.bottle<span class="number">.10</span>.tar.gz</span><br><span class="line">==&gt; Caveats</span><br><span class="line"><span class="keyword">To</span> <span class="keyword">enable</span> PHP <span class="keyword">in</span> Apache <span class="keyword">add</span> the <span class="keyword">following</span> <span class="keyword">to</span> httpd.conf <span class="keyword">and</span> restart Apache:</span><br><span class="line">    LoadModule php7_module    /usr/<span class="keyword">local</span>/opt/php70/libexec/apache2/libphp7.so</span><br><span class="line">    </span><br><span class="line">    &lt;FilesMatch .php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">    &lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">Finally, <span class="keyword">check</span> DirectoryIndex includes index.php</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line"></span><br><span class="line">The php.ini <span class="keyword">file</span> can be <span class="keyword">found</span> <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="keyword">local</span>/etc/php/<span class="number">7.0</span>/php.ini</span><br><span class="line"></span><br><span class="line">✩✩✩✩ Extensions ✩✩✩✩</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you <span class="keyword">are</span> <span class="keyword">having</span> issues <span class="keyword">with</span> custom extension compiling, ensure that</span><br><span class="line">you <span class="keyword">are</span> <span class="keyword">using</span> the brew <span class="keyword">version</span>, <span class="keyword">by</span> placing /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> <span class="keyword">before</span> /usr/sbin <span class="keyword">in</span> your <span class="keyword">PATH</span>:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">PATH</span>=<span class="string">"/usr/local/bin:$PATH"</span></span><br><span class="line"></span><br><span class="line">PHP70 Extensions will <span class="keyword">always</span> be <span class="keyword">compiled</span> against this PHP. Please <span class="keyword">install</span> them</span><br><span class="line"><span class="keyword">using</span> <span class="comment">--without-homebrew-php to enable compiling against system PHP.</span></span><br><span class="line"></span><br><span class="line">✩✩✩✩ PHP CLI ✩✩✩✩</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you wish <span class="keyword">to</span> swap the PHP you <span class="keyword">use</span> <span class="keyword">on</span> the command line, you should <span class="keyword">add</span> the <span class="keyword">following</span> <span class="keyword">to</span> ~/.bashrc,</span><br><span class="line">~/.zshrc, ~/.profile <span class="keyword">or</span> your shell<span class="string">'s equivalent configuration file:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      export PATH="$(brew --prefix homebrew/php/php70)/bin:$PATH"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">✩✩✩✩ FPM ✩✩✩✩</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To launch php-fpm on startup:</span></span><br><span class="line"><span class="string">    mkdir -p ~/Library/LaunchAgents</span></span><br><span class="line"><span class="string">    cp /usr/local/opt/php70/homebrew.mxcl.php70.plist ~/Library/LaunchAgents/</span></span><br><span class="line"><span class="string">    launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php70.plist</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The control script is located at /usr/local/opt/php70/sbin/php70-fpm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OS X 10.8 and newer come with php-fpm pre-installed, to ensure you are using the brew version you need to make sure /usr/local/sbin is before /usr/sbin in your PATH:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  PATH="/usr/local/sbin:$PATH"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You may also need to edit the plist to use the correct "UserName".</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please note that the plist was called '</span>homebrew-php.josegonzalez.php70.plist<span class="string">' in old versions</span></span><br><span class="line"><span class="string">of this formula.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To have launchd start homebrew/php/php70 at login:</span></span><br><span class="line"><span class="string">  ln -sfv /usr/local/opt/php70/*.plist ~/Library/LaunchAgents</span></span><br><span class="line"><span class="string">Then to load homebrew/php/php70 now:</span></span><br><span class="line"><span class="string">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php70.plist</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/php70/7.0.2: 331 files, 49.3M</span></span><br></pre></td></tr></table></figure>
<p>显示安装成功！</p>
<h2 id="安装php－version"><a href="#安装php－version" class="headerlink" title="安装php－version"></a>安装php－version</h2><p>此时我们再安装php－version ==&gt; php版本切换工具<br>安装命令：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install php-<span class="keyword">version</span></span><br><span class="line"><span class="keyword">source</span> $(brew --prefix php-<span class="keyword">version</span>)/php-<span class="keyword">version</span>.<span class="keyword">sh</span> &amp;&amp; php-<span class="keyword">version</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>执行php－version查看已存在的php版本,前面带＊的是当前环境正在使用的php版本,使用php－versiom＋版本号的方式切换php版本～</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ Ken$ php-version</span><br><span class="line">  5.5.30</span><br><span class="line">* 5.6.17</span><br><span class="line">  7.0.2</span><br><span class="line">localhost:~ Ken$ php-version 7.0.2</span><br><span class="line">localhost:~ Ken$ php -v</span><br><span class="line">PHP 7.0.2 (cli) (built: Jan  7 2016 10:40:26) ( NTS )</span><br><span class="line">Copyright (c) 1997-2015 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2015 Zend Technologies</span><br><span class="line">localhost:~ Ken$</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis介绍]]></title>
      <url>http://yoursite.com/2016/02/01/redis-1/</url>
      <content type="html"><![CDATA[<p><center>本文主要介绍redis的安装、简介与数据类型</center><br><a id="more"></a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Redis 是一款开源的，基于 BSD 许可的，高级键值 (key-value) 缓存 (cache) 和存储 (store) 系统。由于 Redis 的键包括 string，hash，list，set，sorted set，bitmap 和 hyperloglog，所以常常被称为数据结构服务器。</p>
<p>我们可以在这些类型上面运行原子操作，例如：</p>
<ul>
<li>追加字符串</li>
<li>增加哈希中的值</li>
<li>加入一个元素到列表</li>
<li>计算集合的交集、并集和差集</li>
<li>从有序集合中获取最高排名的元素。</li>
</ul>
<h3 id="redis与memcached的区别"><a href="#redis与memcached的区别" class="headerlink" title="redis与memcached的区别"></a>redis与memcached的区别</h3><p>redis和memcached相比,的独特之处:<br>1.redis可以用来做存储(storge), 而memccached是用来做缓存(cache)<br>  这个特点主要因为其有”持久化”的功能.<br>2.存储的数据有”结构”,对于memcached来说,存储的数据,只有1种类型–”字符串”,<br>  而redis则可以存储字符串,链表,哈希结构,集合,有序集合.</p>
<h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><h3 id="Mac下的安装"><a href="#Mac下的安装" class="headerlink" title="Mac下的安装"></a>Mac下的安装</h3><p>直接homebrew安装～</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>redis</span><br></pre></td></tr></table></figure>
<p>没啥说的</p>
<h3 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt-<span class="builtin-name">get</span> update</span><br><span class="line"><span class="variable">$sudo</span> apt-<span class="builtin-name">get</span> install redis-server</span><br></pre></td></tr></table></figure>
<h3 id="安装完后得到的命令"><a href="#安装完后得到的命令" class="headerlink" title="安装完后得到的命令"></a>安装完后得到的命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>redis-server</td>
<td>服务器端</td>
</tr>
<tr>
<td>redis-cli</td>
<td>客户端</td>
</tr>
<tr>
<td>redis-benchmark</td>
<td>性能测试工具</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>检查aof日志的工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>检查rbd日志的工具</td>
</tr>
</tbody>
</table>
<h3 id="启动与连接"><a href="#启动与连接" class="headerlink" title="启动与连接"></a>启动与连接</h3><p>必须先启动redis服务器才能连接redis客户端…..</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> redis-server 启动服务器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-cli        连接服务器</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>字符串是 Redis 最基本的数据类型</p>
<blockquote>
<p>注：字符串值可以存储最大512M的长度。</p>
</blockquote>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表(Lists)"></a>列表(Lists)</h3><p>Redis 列表仅仅是按照插入顺序排序的字符串列表。可以添加一个元素到 Redis 列表的头部 (左边) 或者尾部 (右边)。</p>
<h3 id="集合-Sets"><a href="#集合-Sets" class="headerlink" title="集合(Sets)"></a>集合(Sets)</h3><p>Redis 集合是没有顺序的字符串集合 (collection)。可以在 O(1) 的时间复杂度添加、删除和测试元素存在与否 (不管集合中有多少元素都是常量时间)。</p>
<p>加入一个元素到集合中并不需要检查元素是否已存在。<br>Redis支持很多服务器端的命令,可以在很短的时间内和已经存在的集合一起计算并集,交集和差集。</p>
<h3 id="哈希／散列-Hashes"><a href="#哈希／散列-Hashes" class="headerlink" title="哈希／散列(Hashes)"></a>哈希／散列(Hashes)</h3><p>Redis 哈希是字符串字段 (field) 与字符串值之间的映射，所以是表示对象的理想数据类型。<br>拥有少量字段 (少量指的是大约 100) 的哈希会以占用很少存储空间的方式存储，所以你可以在一个很小的Redis实例里存储数百万的对象。</p>
<h3 id="有序集合-Sorted-sets"><a href="#有序集合-Sorted-sets" class="headerlink" title="有序集合(Sorted sets)"></a>有序集合(Sorted sets)</h3><p>Redis 有序集合和 Redis 集合类似，是非重复字符串集合 (collection)。不同的是，每一个有序集合的成员都有一个关联的分数 (score)，用于按照分数高低排序。尽管成员是唯一的，但是分数是可以重复的。</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim操作指南]]></title>
      <url>http://yoursite.com/2016/01/28/vim-study/</url>
      <content type="html"><![CDATA[<center>本文介绍vim的常用操作</center>

<a id="more"></a>
<h2 id="为什么要学习vim"><a href="#为什么要学习vim" class="headerlink" title="为什么要学习vim"></a>为什么要学习vim</h2><p>因为linux下别无选择。。。。</p>
<h2 id="vim模式"><a href="#vim模式" class="headerlink" title="vim模式"></a>vim模式</h2><p>vim共分为三种模式:</p>
<ul>
<li><p>一般模式</p>
<blockquote>
<p>用户打开文档直接进入的就是一般模式,可以用方向键移动光标查看能容,也可以进行复制、粘贴、删除操作</p>
</blockquote>
</li>
<li><p>编辑模式</p>
<blockquote>
<p>按下i键进入编辑模式,编辑文件内容,按esc键退出编辑模式</p>
</blockquote>
</li>
<li><p>命令行模式</p>
<blockquote>
<p>进行存储、离开、搜索、替换、显示行号等一些动作</p>
</blockquote>
</li>
</ul>
<p><img src="http://images.cnitblog.com/blog/352838/201311/05111232-20205b3d047249fd86c324cbf5354036.png" alt="vim模式"></p>
<h2 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h2><h3 id="移动光标的方法"><a href="#移动光标的方法" class="headerlink" title="移动光标的方法"></a>移动光标的方法</h3><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">h(←)</td>
<td>左移一个字符</td>
</tr>
<tr>
<td style="text-align:center">j(↓)</td>
<td>下移一个字符</td>
</tr>
<tr>
<td style="text-align:center">k(↑)</td>
<td>上移一个字符</td>
</tr>
<tr>
<td style="text-align:center">l(→)</td>
<td>右移一个字符</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+[f]</td>
<td>屏幕”向下”移动一页</td>
</tr>
<tr>
<td style="text-align:center">[Ctrl]+[b]</td>
<td>屏幕”向上”移动一页</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>光标移动到非空格符的下一列</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td>光标移动到非空格符的上一列</td>
</tr>
<tr>
<td style="text-align:center">n+[space]</td>
<td>n表示”数字”按下数字后再按空格键,光标会向右移动这一行的n个字符<br>例如20+[space]</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td>移动到这一行的最前面字符处</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>移动到这一行的最后面字符处</td>
</tr>
<tr>
<td style="text-align:center">H</td>
<td>光标移动到这个屏幕的最上方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:center">M</td>
<td>光标移动到这个屏幕的中央那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:center">L</td>
<td>光标移动到这个屏幕的最下方那一行的第一个字符</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td>移动到这个档案的最后一行</td>
</tr>
<tr>
<td style="text-align:center">nG</td>
<td>n为数字。移动到这个档案的第n行。例如 20G</td>
</tr>
<tr>
<td style="text-align:center">gg</td>
<td>移动到这个档案的第一行</td>
</tr>
<tr>
<td style="text-align:center">n+[Enter]</td>
<td>n为数字。光标向下移动n行</td>
</tr>
</tbody>
</table>
<h3 id="搜索与取代"><a href="#搜索与取代" class="headerlink" title="搜索与取代"></a>搜索与取代</h3><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/word</td>
<td>向光标之下寻找一个名称为”word”的字符串</td>
</tr>
<tr>
<td style="text-align:center">?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串</td>
</tr>
<tr>
<td style="text-align:center">n</td>
<td>这个n是英文按键,表示向下继续搜索word</td>
</tr>
<tr>
<td style="text-align:center">N</td>
<td>这个N是英文按键。与n刚好相反,表示向上搜索word</td>
</tr>
<tr>
<td style="text-align:center">:n1,n2s/word1/word2/g</td>
<td>n1与n2 为数字。<br>在第n1与n2行之间寻找word1这个字符串,并将该字符串取代为word2<br> 在100到200行之间搜寻vbird并取代为VBIRD则：<br>[:100,200s/vbird/VBIRD/g]</td>
</tr>
<tr>
<td style="text-align:center">[:1,$s/word1/word2/gc]</td>
<td>从第一行到最后一行寻找word1字符串,并将该字符串取代为word2<br>且在取代前显示提示字符给用户确认是否需要取代</td>
</tr>
</tbody>
</table>
<h3 id="复制删除和粘贴"><a href="#复制删除和粘贴" class="headerlink" title="复制删除和粘贴"></a>复制删除和粘贴</h3><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x, X</td>
<td>x为向后删除一个字符,X为向前删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">nx</td>
<td>n为数字,连续向后删除 n 个字符。连续删除 10 个字符,”10x”</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td>删除游标所在的那一整行</td>
</tr>
<tr>
<td style="text-align:center">ndd</td>
<td>n为数字。删除光标所在的向下n列,删除20列,”20dd”</td>
</tr>
<tr>
<td style="text-align:center">d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td style="text-align:center">dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td style="text-align:center">d$</td>
<td>删除游标所在处,到该行的最后一个字符</td>
</tr>
<tr>
<td style="text-align:center">d0</td>
<td>删除游标所在处,到该行的最前面一个字符</td>
</tr>
<tr>
<td style="text-align:center">yy</td>
<td>复制游标所在的那一行</td>
</tr>
<tr>
<td style="text-align:center">nyy</td>
<td>n为数字。复制光标所在的向下n列,”20yy”,复制20列</td>
</tr>
<tr>
<td style="text-align:center">y1G</td>
<td>复制游标所在列到第一列的所有数据</td>
</tr>
<tr>
<td style="text-align:center">yG</td>
<td>复制游标所在列到最后一列的所有数据</td>
</tr>
<tr>
<td style="text-align:center">y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td style="text-align:center">p, P</td>
<td>粘贴命令,p为粘贴在光标下一行,P为粘贴在上一行</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td>恢复前一个动作</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td>重复前一个动作</td>
</tr>
<tr>
<td style="text-align:center">y+¥</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
</tbody>
</table>
<h3 id="区块选择"><a href="#区块选择" class="headerlink" title="区块选择"></a>区块选择</h3><p>光标到想选择的地方按下ctrl+c,出现Visual Block后进行选择</p>
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">v</td>
<td>字符选择,会将光标经过的地方反白选择</td>
</tr>
<tr>
<td style="text-align:center">V</td>
<td>行选择,会将光标经过的行反白选择</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td>将反白的地方复制起来</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td>将反白的地方删除掉</td>
</tr>
</tbody>
</table>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p> 按i a o r进入插入模式,没啥说的</p>
<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:w</td>
<td>将编辑的数据写入硬盘档案中</td>
</tr>
<tr>
<td style="text-align:center">:w!</td>
<td>若文件属性为”只读”时,强制写入该档案</td>
</tr>
<tr>
<td style="text-align:center">:q</td>
<td>离开</td>
</tr>
<tr>
<td style="text-align:center">:q!</td>
<td>强制离开不储存档案</td>
</tr>
<tr>
<td style="text-align:center">:wq</td>
<td>储存后离开</td>
</tr>
<tr>
<td style="text-align:center">ZZ</td>
<td>若档案没有更动,则不储存离开,若档案已经被更动过,则储存后离开</td>
</tr>
<tr>
<td style="text-align:center">:w [filename]</td>
<td>编辑文件另存为filename</td>
</tr>
<tr>
<td style="text-align:center">:r [filename]</td>
<td>将filename内容插入到当前文件</td>
</tr>
<tr>
<td style="text-align:center">:! command</td>
<td>暂时离开 vi 到指令列模式下执行 command 的显示结果<br>例如”:! ls “即可在vim查看文件列表</td>
</tr>
<tr>
<td style="text-align:center">:set nu</td>
<td>显示行号,设定之后,会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td style="text-align:center">:set nonu</td>
<td>与set nu相反,为取消行号</td>
</tr>
</tbody>
</table>
<h2 id="多窗口功能"><a href="#多窗口功能" class="headerlink" title="多窗口功能"></a>多窗口功能</h2><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:sp [filename]</td>
<td>开启一个新窗口,如果有加 filename, 表示在新窗口开启一个新档案<br>否则表示两个窗口为同一个档案内容(同步显示)</td>
</tr>
<tr>
<td style="text-align:center">[ctrl]+w</td>
<td>切换窗口</td>
</tr>
</tbody>
</table>
<p><img src="http://vbird.dic.ksu.edu.tw/linux_basic/0310vi_files/vim-window-01.jpg" alt=""></p>
<h2 id="环境参数设置"><a href="#环境参数设置" class="headerlink" title="环境参数设置"></a>环境参数设置</h2><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:set nu</td>
<td>设定行号</td>
</tr>
<tr>
<td style="text-align:center">:set nonu</td>
<td>取消行号</td>
</tr>
<tr>
<td style="text-align:center">:set autoindent</td>
<td>自动缩进</td>
</tr>
<tr>
<td style="text-align:center">:set noautoindent</td>
<td>不自动缩进</td>
</tr>
<tr>
<td style="text-align:center">:set ruler</td>
<td>显示右下角状态栏说明｜</td>
</tr>
<tr>
<td style="text-align:center">:set showmode</td>
<td>是否要显示 –INSERT– 之类的字眼在左下角的状态栏</td>
</tr>
<tr>
<td style="text-align:center">:set all</td>
<td>显示目前所有的环境参数设定值</td>
</tr>
<tr>
<td style="text-align:center">:set</td>
<td>显示与系统默认值不同的设定参数</td>
</tr>
<tr>
<td style="text-align:center">:syntax on</td>
<td>开启语法高亮</td>
</tr>
<tr>
<td style="text-align:center">:syntax off</td>
<td>关闭语法高亮</td>
</tr>
<tr>
<td style="text-align:center">:set bg=dark</td>
<td>加深字体颜色</td>
</tr>
<tr>
<td style="text-align:center">:set bg=light</td>
<td>默认字体颜色</td>
</tr>
</tbody>
</table>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.<a href="http://vbird.dic.ksu.edu.tw/linux_basic/0310vi.php#vi" target="_blank" rel="external">鸟哥的Linux私房菜</a><br>2.《Linux命令行与Shell脚本编程大全》第2版</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP扩展Mysqli常用操作]]></title>
      <url>http://yoursite.com/2016/01/26/php-mysqli-common-use/</url>
      <content type="html"><![CDATA[<center>本文介绍php mysqli扩展库的常用操作</center>

<a id="more"></a>
<h1 id="mysqli常用操作"><a href="#mysqli常用操作" class="headerlink" title="mysqli常用操作"></a>mysqli常用操作</h1><h2 id="连接关闭数据库"><a href="#连接关闭数据库" class="headerlink" title="连接关闭数据库"></a>连接关闭数据库</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqli_connect(host,username,password,dbname,port,socket)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">$mysqli</span> = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"user"</span>, <span class="string">"password"</span>, <span class="string">"database"</span>)<span class="comment">;</span></span><br><span class="line"><span class="built_in">$mysqli</span>-&gt;<span class="keyword">close</span>()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="设置字符串编码"><a href="#设置字符串编码" class="headerlink" title="设置字符串编码"></a>设置字符串编码</h2><p>为了避免显示乱码问题需要指定字符串编码</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mysqli</span>-&gt;set_charset(<span class="string">'utf8'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="查看字符串编码"><a href="#查看字符串编码" class="headerlink" title="查看字符串编码"></a>查看字符串编码</h2><p>返回当前数据库连接的默认字符编码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> mysqli::character_set_name ( <span class="keyword">void</span> )</span><br></pre></td></tr></table></figure>
<h2 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mysqli</span>-&gt;query(<span class="variable">$sql</span>); <span class="regexp">//</span>失败时返回FALSE</span><br></pre></td></tr></table></figure>
<h1 id="mysqli错误信息"><a href="#mysqli错误信息" class="headerlink" title="mysqli错误信息"></a>mysqli错误信息</h1><h2 id="显示上一次错误描述"><a href="#显示上一次错误描述" class="headerlink" title="显示上一次错误描述"></a>显示上一次错误描述</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> $mysql-&gt;<span class="keyword">error</span></span><br></pre></td></tr></table></figure>
<h2 id="显示错误列表"><a href="#显示错误列表" class="headerlink" title="显示错误列表"></a>显示错误列表</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span> $mysqli-&gt;error_list;</span><br><span class="line"><span class="comment">//返回样例</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">Array</span></span><br><span class="line">        (</span><br><span class="line">            [errno] =&gt; <span class="number">1193</span></span><br><span class="line">            [sqlstate] =&gt; HY000</span><br><span class="line">            [error] =&gt; Unknown system variable <span class="string">'a'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="返回连接错误编号和内容"><a href="#返回连接错误编号和内容" class="headerlink" title="返回连接错误编号和内容"></a>返回连接错误编号和内容</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysqli_connect_errno <span class="regexp">//</span>Returns an error code value. Zero <span class="keyword">if</span> no error occurred    </span><br><span class="line">mysqli_connect_error <span class="regexp">//</span>Return an error message,NULL <span class="keyword">if</span> no error</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>example</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$mysqli</span> = new mysqli(<span class="string">"localhost"</span>, <span class="string">"my_user"</span>, <span class="string">"my_password"</span>, <span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">/* check connection */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;connect_errno) &#123;</span><br><span class="line">    printf(<span class="string">"Connect failed: %s\n"</span>, <span class="variable">$mysqli</span>-&gt;connect_error);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mysqli事务"><a href="#mysqli事务" class="headerlink" title="mysqli事务"></a>mysqli事务</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$mysqli-&gt;begin_transaction();<span class="comment">//开启事务</span></span><br><span class="line">$mysqli-&gt;rollback();<span class="comment">//事务回滚</span></span><br><span class="line">$mysqli-&gt;commit();<span class="comment">//提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"127.0.0.1"</span>, <span class="string">"my_user"</span>, <span class="string">"my_password"</span>, <span class="string">"sakila"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($mysqli-&gt;connect_errno) &#123;</span><br><span class="line">    printf(<span class="string">"Connect failed: %s\n"</span>, $mysqli-&gt;connect_error);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mysqli-&gt;begin_transaction(MYSQLI_TRANS_START_READ_ONLY);</span><br><span class="line"></span><br><span class="line">$mysqli-&gt;query(<span class="string">"SELECT first_name, last_name FROM actor"</span>);</span><br><span class="line">$mysqli-&gt;commit();</span><br><span class="line"></span><br><span class="line">$mysqli-&gt;close();</span><br></pre></td></tr></table></figure>
<h1 id="mysqli-stmt类"><a href="#mysqli-stmt类" class="headerlink" title="mysqli_stmt类"></a>mysqli_stmt类</h1><p>代表mysqli预处理类</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$stmt-&gt;prepare($sql)<span class="comment">//预处理语句 成功返回TRUE，失败返回FALSE</span></span><br><span class="line">$stmt-&gt;bind_param()<span class="comment">//绑定参数 成功返回TRUE，失败返回FALSE</span></span><br><span class="line">&gt;参数类型:i =&gt; 整数,d =&gt; 浮点数,s =&gt; 字符串</span><br><span class="line"></span><br><span class="line">$stmt-&gt;execute()<span class="comment">//执行预处理语句 成功返回TRUE，失败返回FALSE</span></span><br><span class="line">$stmt-&gt;close()<span class="comment">//关闭预处理语句 成功返回TRUE，失败返回FALSE</span></span><br><span class="line">$stmt-&gt;bind_result()<span class="comment">//绑定结果集  成功返回TRUE，失败返回FALSE</span></span><br><span class="line">$stmt-&gt;fetch()<span class="comment">//依次取结果集 成功返回TRUE，失败返回FALSE</span></span><br><span class="line">$stmt-&gt;get_result()<span class="comment">//获取预处理语句的结果集</span></span><br><span class="line">$stmt-&gt;store_result()<span class="comment">//保存结果集</span></span><br><span class="line">$stmt-&gt;free_result()<span class="comment">//释放结果集</span></span><br><span class="line">$stmt-&gt;num_rows()<span class="comment">//返回储存结果集的数量</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"my_user"</span>, <span class="string">"my_password"</span>, <span class="string">"world"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (mysqli_connect_errno()) &#123;</span></span><br><span class="line"><span class="php">    printf(<span class="string">"Connect failed: %s\n"</span>, mysqli_connect_error());</span></span><br><span class="line"><span class="php">    <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">/* prepare statement */</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($stmt = $mysqli-&gt;prepare(<span class="string">"SELECT Code, Name FROM Country ORDER BY Name LIMIT 5"</span>)) &#123;</span></span><br><span class="line"><span class="php">    $stmt-&gt;execute();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* bind variables to prepared statement */</span></span></span><br><span class="line"><span class="php">    $stmt-&gt;bind_result($col1, $col2);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* fetch values */</span></span></span><br><span class="line"><span class="php">    <span class="keyword">while</span> ($stmt-&gt;fetch()) &#123;</span></span><br><span class="line"><span class="php">        printf(<span class="string">"%s %s\n"</span>, $col1, $col2);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* close statement */</span></span></span><br><span class="line"><span class="php">    $stmt-&gt;close();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">/* close connection */</span></span></span><br><span class="line"><span class="php">$mysqli-&gt;close();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AFG Afghanistan</span><br><span class="line">ALB Albania</span><br><span class="line">DZA Algeria</span><br><span class="line"><span class="keyword">ASM</span> American Samoa</span><br><span class="line"><span class="keyword">AND</span> Andorra</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">/* Open a connection */</span></span></span><br><span class="line"><span class="php">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"my_user"</span>, <span class="string">"my_password"</span>, <span class="string">"world"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">/* check connection */</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (mysqli_connect_errno()) &#123;</span></span><br><span class="line"><span class="php">    printf(<span class="string">"Connect failed: %s\n"</span>, mysqli_connect_error());</span></span><br><span class="line"><span class="php">    <span class="keyword">exit</span>();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$query = <span class="string">"SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($stmt = $mysqli-&gt;prepare($query)) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* execute query */</span></span></span><br><span class="line"><span class="php">    $stmt-&gt;execute();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* store result */</span></span></span><br><span class="line"><span class="php">    $stmt-&gt;store_result();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    printf(<span class="string">"Number of rows: %d.\n"</span>, $stmt-&gt;num_rows);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">    <span class="comment">/* close statement */</span></span></span><br><span class="line"><span class="php">    $stmt-&gt;close();</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="comment">/* close connection */</span></span></span><br><span class="line"><span class="php">$mysqli-&gt;close();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number <span class="keyword">of</span> rows: <span class="number">20</span>.</span><br></pre></td></tr></table></figure>
<h1 id="mysqli-result类"><a href="#mysqli-result类" class="headerlink" title="mysqli_result类"></a>mysqli_result类</h1><p>代表从一个数据库查询中获取的结果集。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数从结果集中取得所有行作为关联数组，或数字数组，或二者兼有</span></span><br><span class="line">mixed mysqli_result::fetch_all ([ <span class="keyword">int</span> $resulttype = MYSQLI_NUM ] )</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有。</span></span><br><span class="line">mixed mysqli_result::fetch_array ([ <span class="keyword">int</span> $resulttype = MYSQLI_BOTH ] )</span><br><span class="line"></span><br><span class="line">$resulttype 可选。规定应该产生哪种类型的数组。</span><br><span class="line">可以是以下值中的一个：</span><br><span class="line">                MYSQLI_ASSOC</span><br><span class="line">                MYSQLI_NUM</span><br><span class="line">                MYSQLI_BOTH</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux文件管理]]></title>
      <url>http://yoursite.com/2016/01/23/Linux-file-manage/</url>
      <content type="html"><![CDATA[<p><center>本文主要介绍linux下关于文件管理的一些操作</center><br><a id="more"></a></p>
<h2 id="目录基本操作"><a href="#目录基本操作" class="headerlink" title="目录基本操作"></a>目录基本操作</h2><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>显示目标列表</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ls</span>     <span class="params">(选项)</span>    <span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><p>常用选项</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">a：显示所有档案及目录（ls内定将档案名或目录名称为“.”的视为隐藏，不会列出）； </span></span><br><span class="line"><span class="ruby">-A：显示除影藏文件“.”和“..”以外的所有文件列表；</span></span><br><span class="line"><span class="ruby">-l：所有输出信息用单列格式输出，不输出为多列；</span></span><br><span class="line"><span class="ruby">-i：显示文件索引节点号（inode）。一个索引节点代表一个文件；</span></span><br><span class="line"><span class="ruby">-s：显示文件和目录的大小，以区块为单位；</span></span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>目录：指定要显示列表的目录，也可以是具体的文件</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@AY130520180402842260Z home]<span class="comment"># ls</span></span><br><span class="line">2.php  a    Auth.class.php  cmd.php     empty.php     global.php  logs     pheanstalk  pids     s_w.php         utils.php    worker.php</span><br><span class="line">3.php  api  b.sh            config.php  gen_addr.php  inc         modules  php.txt     s_c.php  task_state.php  watcher.php</span><br><span class="line"></span><br><span class="line">[root@AY130520180402842260Z home]<span class="comment"># ls -sail</span></span><br><span class="line">total 144</span><br><span class="line">2614648 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 9 </span>root root <span class="number"> 4096 </span>Jan<span class="number"> 13 </span>16:58 .</span><br><span class="line">2614647 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Oct<span class="number"> 21 </span>10:23 ..</span><br><span class="line">2615501 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 500 </span>Jan<span class="number"> 13 </span>16:58 2.php</span><br><span class="line">2615486 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 555 </span>Sep <span class="number"> 2 </span>17:09 3.php</span><br><span class="line">2630038 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Nov<span class="number"> 20 </span>14:34 a</span><br><span class="line">2614771 <span class="number"> 4 </span>drwxr-xr-x<span class="number"> 21 </span>root root <span class="number"> 4096 </span>Aug<span class="number"> 21 </span>15:54 api</span><br><span class="line">2615484 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 3719 </span>Sep <span class="number"> 2 </span>17:01 Auth.class.php</span><br><span class="line">2615485 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root   <span class="number"> 59 </span>Sep <span class="number"> 2 </span>14:40 b.sh</span><br><span class="line">2615405 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 2717 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>cmd.php</span><br><span class="line">2615594 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 887 </span>Aug <span class="number"> 4 </span>10:46 config.php</span><br><span class="line">2615408 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 616 </span>May <span class="number"> 5 </span><span class="number"> 2015 </span>empty.php</span><br><span class="line">2615412 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 2012 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>gen_addr.php</span><br><span class="line">2615410 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 2208 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>global.php</span><br><span class="line">2621841 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>inc</span><br><span class="line">2621544 <span class="number"> 4 </span>drwxr-xr-x<span class="number"> 24 </span>root root <span class="number"> 4096 </span>Jan<span class="number"> 15 </span>11:21 logs</span><br><span class="line">2614653 <span class="number"> 4 </span>drwxr-xr-x<span class="number"> 10 </span>root root <span class="number"> 4096 </span>Aug <span class="number"> 4 </span>13:48 modules</span><br><span class="line">2621791 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 3 </span>root root <span class="number"> 4096 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>pheanstalk</span><br><span class="line">2615479<span class="number"> 32 </span>-rw-r--r-- <span class="number"> 1 </span>root root<span class="number"> 31305 </span>Sep <span class="number"> 2 </span>10:21 php.txt</span><br><span class="line">2621789 <span class="number"> 4 </span>drwxr-xr-x <span class="number"> 2 </span>root root <span class="number"> 4096 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>pids</span><br><span class="line">2615500 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 365 </span>Jan<span class="number"> 11 </span>18:01 s_c.php</span><br><span class="line">2615499 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 539 </span>Jan<span class="number"> 11 </span>18:01 s_w.php</span><br><span class="line">2615407 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root  <span class="number"> 484 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>task_state.php</span><br><span class="line">2615487<span class="number"> 12 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 9805 </span>Sep <span class="number"> 2 </span>15:47 utils.php</span><br><span class="line">2614651 <span class="number"> 4 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 3734 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>watcher.php</span><br><span class="line">2615404<span class="number"> 12 </span>-rw-r--r-- <span class="number"> 1 </span>root root <span class="number"> 9855 </span>Apr<span class="number"> 22 </span><span class="number"> 2015 </span>worker.php</span><br><span class="line"></span><br><span class="line">[root@AY130520180402842260Z home]<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>pwd命令以绝对路径的方式显示用户当前工作目录</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@AY130520180402842260Z <span class="built_in">home</span>]<span class="meta"># pwd</span></span><br><span class="line">/root/<span class="built_in">home</span></span><br></pre></td></tr></table></figure>
<h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>cd命令用来切换工作目录至dirname。</p>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dirname</span><br></pre></td></tr></table></figure>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> 进入用户主目录； </span><br><span class="line"><span class="keyword">cd</span> ~ 进入用户主目录； </span><br><span class="line"><span class="keyword">cd</span> - 返回进入此目录之前所在的目录； </span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span> 返回上级目录</span><br><span class="line"><span class="keyword">cd</span> <span class="string">../..</span> 返回上两级目录； </span><br><span class="line"><span class="keyword">cd</span> !$ 把上个命令的参数作为<span class="keyword">cd</span>参数使用</span><br></pre></td></tr></table></figure>
<h3 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h3><p>mv命令用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中<br><code>注意事项</code>：mv与cp的结果不同，mv好像文件“搬家”，文件个数并未增加。而cp对文件进行复制，文件个数增加了。</p>
<h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv source <span class="keyword">target</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#将文件ex3改名为new1 </span></span><br><span class="line">mv ex3 <span class="keyword">new</span><span class="type">1</span> </span><br><span class="line"><span class="meta">#将目录/usr/men中的所有文件移到当前目录（用.表示）中： </span></span><br><span class="line">mv /usr/men<span class="comment">/* .</span></span><br></pre></td></tr></table></figure>
<h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><p>cp命令用来将一个或多个源文件或者目录复制到指定的目的文件或目录。</p>
<h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> <span class="keyword">source</span> target</span><br></pre></td></tr></table></figure>
<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将文件<span class="keyword">file</span>复制到目录<span class="regexp">/usr/</span>下，并改名为file1 </span><br><span class="line">cp <span class="keyword">file</span> <span class="regexp">/usr/</span>file1</span><br></pre></td></tr></table></figure>
<h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><p>rm命令可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下属的所有文件及其子目录均删除掉。对于链接文件，只是删除整个链接文件，而原有文件保持不变。</p>
<h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">rm</span>     <span class="params">(选项)</span>    <span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">d：直接把欲删除的目录的硬连接数据删除成<span class="number">0</span>，删除该目录； </span></span><br><span class="line"><span class="ruby">-f：强制删除文件或目录； </span></span><br><span class="line"><span class="ruby">-i：删除已有文件或目录之前先询问用户； </span></span><br><span class="line"><span class="ruby">-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</span></span><br></pre></td></tr></table></figure>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>文件：指定被删除的文件列表，如果参数中含有目录，则必须加上-r或者-R选项。</p>
<h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@AY130520180402842260Z</span> ~]<span class="meta"># rm hello.php</span></span><br></pre></td></tr></table></figure>
<h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>mkdir命令用来创建目录</p>
<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mkdir</span> 	<span class="params">(选项)</span>	<span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-m<span class="tag">&lt;<span class="name">目标属性</span>&gt;</span>或--mode<span class="tag">&lt;<span class="name">目标属性</span>&gt;</span>建立目录的同时设置目录的权限；</span><br></pre></td></tr></table></figure>
<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><p>目录：指定要创建的目录列表，多个目录之间用空格隔开。</p>
<h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m <span class="number">700</span> dirname</span><br></pre></td></tr></table></figure>
<h3 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h3><p>用来删除<code>空目录</code>。</p>
<h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> dirname</span><br></pre></td></tr></table></figure>
<h4 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> emptyfile</span><br></pre></td></tr></table></figure>
<h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>tail命令用于输入文件中的尾部内容。tail命令默认在屏幕上显示指定文件的末尾10行。如果给定的文件不止一个，则在显示的每个文件前面加一个文件名标题。如果没有指定文件或者文件名为“-”，则读取标准输入。</p>
<h4 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">tail</span>	<span class="params">(选项)</span>	<span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-3"><a href="#选项-3" class="headerlink" title="选项"></a>选项</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">n</span>或——line=：输出文件的尾部<span class="built_in">N</span>（<span class="built_in">N</span>位数字）行内容</span><br><span class="line">+&lt;<span class="built_in">N</span>&gt;<span class="symbol">:</span>输出文件从第<span class="built_in">N</span>行开始到文件尾部的内容</span><br><span class="line">-c或——bytes=：输出文件尾部的<span class="built_in">N</span>（<span class="built_in">N</span>为整数）个字节内容；</span><br></pre></td></tr></table></figure>
<h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><p>文件名称列表</p>
<h4 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tail <span class="built_in">file</span> （显示文件<span class="built_in">file</span>的最后<span class="number">10</span>行） </span><br><span class="line">tail +<span class="number">20</span> <span class="built_in">file</span> （显示文件<span class="built_in">file</span>的内容，从第<span class="number">20</span>行至文件末尾） </span><br><span class="line">tail -n <span class="number">20</span> <span class="built_in">file</span> （显示文件<span class="built_in">file</span>的最后<span class="number">20</span>行）</span><br><span class="line">tail -c <span class="number">10</span> <span class="built_in">file</span> （显示文件<span class="built_in">file</span>的最后<span class="number">10</span>个字符)</span><br></pre></td></tr></table></figure>
<h3 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h3><p>head命令用于显示文件的开头的内容。在默认情况下，head命令显示文件的头10行内容。</p>
<h4 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">head</span>  <span class="params">(选项)</span>  <span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-4"><a href="#选项-4" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">n&lt;数字&gt;：指定显示头部内容的行数； </span></span><br><span class="line"><span class="ruby">-c&lt;字符数&gt;：指定显示头部内容的字符数;</span></span><br></pre></td></tr></table></figure>
<h4 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h4><p>文件列表：指定显示头部内容的文件列表。</p>
<h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，<br>支持vi中的关键字定位操作。<br>more名单中内置了若干快捷键，常用的有</p>
<ul>
<li>H（获得帮助信息）</li>
<li>Enter（向下翻滚一行）</li>
<li>空格（向下滚动一屏）</li>
<li>B(向前滚动一屏)</li>
<li>Q（退出命令）</li>
</ul>
<h4 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">more</span>     <span class="params">(选项)</span>    <span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-5"><a href="#选项-5" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">&lt;数字&gt;：指定每屏显示的行数； </span></span><br><span class="line"><span class="ruby">-d：显示“[press space to continue,<span class="string">'q'</span> to quit.]”和“[Press <span class="string">'h'</span> <span class="keyword">for</span> instructions]”； </span></span><br><span class="line"><span class="ruby">-c：不进行滚屏操作。每次刷新这个屏幕； </span></span><br><span class="line"><span class="ruby">-s：将多个空行压缩成一行显示； </span></span><br><span class="line"><span class="ruby">-u：禁止下划线； </span></span><br><span class="line"><span class="ruby">+&lt;数字&gt;：从指定数字的行开始显示。</span></span><br></pre></td></tr></table></figure>
<h4 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h4><p>文件：指定分页显示内容的文件。</p>
<h3 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h3><p> less命令的作用与more十分相似，都可以用来浏览文字档案的内容，不同的是less命令允许用户向前或向后浏览文件，而more命令只能向前浏览。用less命令显示文件时，用PageUp键向上翻页，用PageDown键向下翻页。要退出less程序，应按Q键。</p>
<h2 id="文件查找和比较"><a href="#文件查找和比较" class="headerlink" title="文件查找和比较"></a>文件查找和比较</h2><h3 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h3><p>which命令用于查找并显示给定命令的绝对路径，环境变量PATH中保存了查找命令时需要遍历的目录。which指令会在环境变量$PATH设置的目录里查找符合条件的文件。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>
<h4 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h4><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@AY130520180402842260Z</span> home]<span class="meta"># which php</span></span><br><span class="line">/usr/<span class="keyword">local</span>/bin/php</span><br></pre></td></tr></table></figure>
<h3 id="whereis命令"><a href="#whereis命令" class="headerlink" title="whereis命令"></a>whereis命令</h3><p>which只能查找二进制程序<br>whereis命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径。 </p>
<p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。 </p>
<h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><h4 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">find</span><span class="params">(选项)</span><span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-6"><a href="#选项-6" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span></span><br><span class="line"><span class="ruby">-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span></span><br><span class="line"><span class="ruby">-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别； </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span></span><br><span class="line"><span class="ruby">-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-type&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span></span><br><span class="line"><span class="ruby">	类型参数列表： f 普通文件 l 符号连接 d 目录 c 字符设备 b 块设备 s 套接字 p Fifo</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-maxdepth&lt;目录层级&gt;：设置最大目录层级； </span></span><br><span class="line"><span class="ruby">-mindepth&lt;目录层级&gt;：设置最小目录层级；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算； </span></span><br><span class="line"><span class="ruby">-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录； </span></span><br><span class="line"><span class="ruby">-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算； </span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-atime&lt;<span class="number">24</span>小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以<span class="number">24</span>小时计算； </span></span><br><span class="line"><span class="ruby">-ctime&lt;<span class="number">24</span>小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以<span class="number">24</span>小时计算；</span></span><br><span class="line"><span class="ruby">-mtime&lt;<span class="number">24</span>小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以<span class="number">24</span>小时计算；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-delete：删除符号要求的文件</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span></span><br><span class="line"><span class="ruby">-nogroup：找出不属于本地主机群组识别码的文件或目录；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span></span><br><span class="line"><span class="ruby">-nouser：找出不属于本地主机用户识别码的文件或目录；</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">-empty  列出所有为空的文件</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#列出当前目录及子目录下所有文件和文件夹 </span></span><br><span class="line"><span class="builtin-name">find</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment">#在/home目录下查找以.txt结尾的文件名</span></span><br><span class="line"><span class="builtin-name">find</span> /home -name <span class="string">"*.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同上，但忽略大小写 </span></span><br><span class="line"><span class="builtin-name">find</span> /home -iname <span class="string">"*.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前目录及子目录下查找所有以.txt和.pdf结尾的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . \( -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.pdf"</span> \) </span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="builtin-name">find</span> . -name <span class="string">"*.txt"</span> -o -name <span class="string">"*.pdf"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配文件路径或者文件 </span></span><br><span class="line"><span class="builtin-name">find</span> /usr/ -path <span class="string">"*local*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#基于正则表达式匹配文件路径 </span></span><br><span class="line"><span class="builtin-name">find</span> . -regex <span class="string">".*\(\.txt\|\.pdf\)$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同上，但忽略大小写 </span></span><br><span class="line"><span class="builtin-name">find</span> . -iregex <span class="string">".*\(\.txt\|\.pdf\)$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#找出/home下不是以.txt结尾的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> /home ! -name <span class="string">"*.txt"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件类型进行搜索 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type 类型参数 </span><br><span class="line"></span><br><span class="line"><span class="comment">#基于目录深度搜索 向下最大深度限制为3 </span></span><br><span class="line"><span class="builtin-name">find</span> . -maxdepth 3 -type f </span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索出深度距离当前目录至少2个子目录的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -mindepth 2 -type f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#UNIX/Linux文件系统每个文件都有三种时间戳： </span></span><br><span class="line"><span class="comment">#访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。 </span></span><br><span class="line"><span class="comment">#修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。 </span></span><br><span class="line"><span class="comment">#变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索最近七天内被访问过的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -atime -7 </span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索恰好在七天前被访问过的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -atime 7 </span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索超过七天内被访问过的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -atime +7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件大小进行匹配 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -size 文件大小单元 </span><br><span class="line"><span class="comment">#文件大小单元： b —— 块（512字节） c —— 字节 w —— 字（2字节） k —— 千字节 M —— 兆字节 G —— 吉字节 </span></span><br><span class="line"><span class="comment">#搜索大于10KB的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -size +10k</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索小于10KB的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -size -10k </span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索等于10KB的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -size 10k</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除当前目录下所有.txt文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -name <span class="string">"*.txt"</span> -delete</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出当前目录下权限不是644的php文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -name <span class="string">"*.php"</span> ! -perm 644</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出当前目录用户tom拥有的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -user tom </span><br><span class="line"><span class="comment">#找出当前目录用户组sunk拥有的所有文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -type f -group sunk</span><br><span class="line"></span><br><span class="line"><span class="comment">#要列出所有长度为零的文件 </span></span><br><span class="line"><span class="builtin-name">find</span> . -empty</span><br></pre></td></tr></table></figure>
<h3 id="locate-slocate命令"><a href="#locate-slocate命令" class="headerlink" title="locate/slocate命令"></a>locate/slocate命令</h3><p>locate命令和slocate命令都用来查找文件或目录。<br>locate命令其实是find -name的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库/var/lib/locatedb，这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<code>updatedb</code>命令，手动更新数据库。</p>
<h4 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">搜索用户主目录下，所有以m开头的文件 </span><br><span class="line"><span class="keyword">locate</span> ~/m</span><br></pre></td></tr></table></figure>
<h3 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h3><p>diff命令在最简单的情况下，比较给定的两个文件的不同。<br>diff命令是以逐行的方式，比较文本文件的异同处。<br>如果该命令指定进行目录的比较，则将会比较该目录中具有相同文件名的文件，而不会对其子目录文件进行任何比较操作。</p>
<h4 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">localhost:</span><span class="string">Documents</span> <span class="string">Ken$</span> <span class="string">diff</span> <span class="string">aaaaaaa</span> <span class="string">bbbbbbbb</span> </span><br><span class="line"><span class="number">1</span><span class="string">c1</span></span><br><span class="line"><span class="string">&lt;</span> <span class="string">aaaaaaa</span></span><br><span class="line"><span class="string">\</span> <span class="literal">No</span> <span class="string">newline</span> <span class="string">at</span> <span class="string">end</span> <span class="string">of</span> <span class="string">file</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&gt; bbbbbbbb</span></span><br></pre></td></tr></table></figure>
<h3 id="cmp命令"><a href="#cmp命令" class="headerlink" title="cmp命令"></a>cmp命令</h3><p>cmp命令用来比较两个文件是否有差异。当相互比较的两个文件完全一样时，则该指令不会显示任何信息。<br>若发现有差异，预设会标示出第一个不通之处的字符和列数编号</p>
<h4 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">localhost</span>:Documents Ken$ <span class="keyword">cmp </span>aaaaaaa <span class="keyword">bbbbbbbb </span></span><br><span class="line"><span class="symbol">aaaaaaa</span> <span class="keyword">bbbbbbbb </span>differ: char <span class="number">1</span>, line <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="iconv命令"><a href="#iconv命令" class="headerlink" title="iconv命令"></a>iconv命令</h3><p>用来转换文件的编码方式，比如它可以将UTF8编码的转换成GB18030的编码</p>
<h4 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f encoding [-t encoding] [inputfile]...</span><br></pre></td></tr></table></figure>
<h4 id="选项-7"><a href="#选项-7" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">f encoding <span class="symbol">:</span>把字符从encoding编码开始转换。 </span></span><br><span class="line"><span class="ruby">-t encoding <span class="symbol">:</span>把字符转换到encoding编码。 </span></span><br><span class="line"><span class="ruby">-l <span class="symbol">:</span>列出已知的编码字符集合 </span></span><br><span class="line"><span class="ruby">-o file <span class="symbol">:</span>指定输出文件 </span></span><br><span class="line"><span class="ruby">-c <span class="symbol">:</span>忽略输出的非法字符 </span></span><br><span class="line"><span class="ruby">-s <span class="symbol">:</span>禁止警告信息，但不是错误信息 </span></span><br><span class="line"><span class="ruby">--verbose <span class="symbol">:</span>显示进度信息</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#1. 文件装换</span></span><br><span class="line">iconv -f ISO88592 -t UTF8 &lt; input.txt &gt; -o &lt; output.txt &gt;</span><br><span class="line"><span class="meta">#ISO88592：原编码格式</span></span><br><span class="line"><span class="meta">#UTF8：要转换的编码格式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#2. 转换网页</span></span><br><span class="line">curl -s http:<span class="comment">//www.dreamdu.com/ | iconv -f utf8 -t gbk</span></span><br><span class="line">curl -s http:<span class="comment">//www.google.com.hk/ | iconv -f big5 -t gbk</span></span><br></pre></td></tr></table></figure>
<h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h3><p>touch命令有两个功能：</p>
<ul>
<li>是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；</li>
<li>是用来创建新的空文件。 语法 touch(选项)(参数) </li>
</ul>
<h4 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-tag">demo</span><span class="selector-class">.php</span></span><br></pre></td></tr></table></figure>
<h3 id="unlink命令"><a href="#unlink命令" class="headerlink" title="unlink命令"></a>unlink命令</h3><p>同<code>rm</code>，都是用于删除文件</p>
<h2 id="文件权限属性设置"><a href="#文件权限属性设置" class="headerlink" title="文件权限属性设置"></a>文件权限属性设置</h2><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>chmod命令用来变更文件或目录的权限。</p>
<p>在UNIX系统家族里，文件或目录权限的控制分别以读取、写入、执行3种一般权限来区分，另有3种特殊权限可供运用。用户可以使用chmod指令去变更文件与目录的权限，设置方式采用文字或数字代号皆可。符号连接的权限无法变更，如果用户对符号连接修改权限，其改变会作用在被连接的原始文件。 </p>
<p>权限范围的表示法如下： </p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u User，即文件或目录的拥有者； </span><br><span class="line">g Group，即文件或目录的所属群组； </span><br><span class="line">o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围； </span><br><span class="line">a All，即全部的用户，包含拥有者，所属群组以及其他用户； </span><br><span class="line">r 读取权限，数字代号为“<span class="number">4</span>”; </span><br><span class="line">w 写入权限，数字代号为“<span class="number">2</span>”； </span><br><span class="line">x 执行或切换权限，数字代号为“<span class="number">1</span>”； </span><br><span class="line">- 不具任何权限，数字代号为“<span class="number">0</span>”； </span><br><span class="line">s 特殊功能说明：变更文件或目录的权限。</span><br></pre></td></tr></table></figure>
<h4 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h4><p><img src="http://man.linuxde.net/wp-content/uploads/2013/11/chmod.gif" alt=""></p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> u+<span class="keyword">x</span>,g+w f01　　//为文件f01设置自己可以执行，组员可以写入的权限 </span><br><span class="line"><span class="keyword">chmod</span> u=rwx,g=rw,o=r f01 </span><br><span class="line"><span class="keyword">chmod</span> <span class="number">764</span> f01 </span><br><span class="line"><span class="keyword">chmod</span> a+<span class="keyword">x</span> f01　　//对文件f01的u,g,o都设置可执行属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">chown</span> user:market f01　　//把文件f01给uesr，添加到market组</span><br></pre></td></tr></table></figure>
<h3 id="stat命令"><a href="#stat命令" class="headerlink" title="stat命令"></a>stat命令</h3><p>stat命令用于显示文件的状态信息。stat命令的输出信息比ls命令的输出信息要更详细。</p>
<h3 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h3><p>file命令用来探测给定文件的类型。file命令对文件的检查分为文件系统、魔法幻数检查和语言检查3个过程</p>
<h4 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhos<span class="variable">t:Documents</span> Ken$ <span class="keyword">file</span> aaaaaaa </span><br><span class="line">aaaaaa<span class="variable">a:</span> ASCII text, with <span class="keyword">no</span> <span class="built_in">line</span> terminators</span><br></pre></td></tr></table></figure>
<h2 id="文件过滤分割与合并"><a href="#文件过滤分割与合并" class="headerlink" title="文件过滤分割与合并"></a>文件过滤分割与合并</h2><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>grep是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。</p>
<h4 id="选项-8"><a href="#选项-8" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">c 计算符合范本样式的列数</span></span><br><span class="line"><span class="ruby">-w 只显示全字符合的列 </span></span><br><span class="line"><span class="ruby">-x 只显示全列符合的列</span></span><br><span class="line"><span class="ruby">-i 忽略字符大小写的差别</span></span><br><span class="line"><span class="ruby">-y 此参数效果跟“-i”相同 </span></span><br><span class="line"><span class="ruby">-o 只输出文件中匹配到的部分</span></span><br><span class="line"><span class="ruby">-n 在显示符合范本样式的那一列之前，标示出该列的编号</span></span><br><span class="line"><span class="ruby">-l 列出文件内容符合指定的范本样式的文件名称</span></span><br><span class="line"><span class="ruby">-E 使用扩展正则表达式</span></span><br><span class="line"><span class="ruby">-q 不显示任何信息</span></span><br><span class="line"><span class="ruby">-R/-r 递归的查找</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行： </span></span><br><span class="line">grep <span class="string">"match_pattern"</span> file_name </span><br><span class="line"></span><br><span class="line"><span class="meta">#在多个文件中查找： </span></span><br><span class="line">grep <span class="string">"match_pattern"</span> file_1 file_2 file_3 ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#标记匹配颜色 --color=auto 选项： </span></span><br><span class="line">grep <span class="string">"match_pattern"</span> file_name --color=auto</span><br><span class="line"></span><br><span class="line"><span class="meta">#使用正则表达式 -E 选项： </span></span><br><span class="line">grep -E <span class="string">"[1-9]+"</span>  file_name</span><br><span class="line"></span><br><span class="line"><span class="meta">#统计文件或者文本中包含匹配字符串的行数 -c 选项： </span></span><br><span class="line">grep -c <span class="string">"text"</span> file_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#输出包含匹配字符串的行数 -n 选项： </span></span><br><span class="line">grep <span class="string">"text"</span> -n file_name </span><br><span class="line"><span class="meta">#多个文件 </span></span><br><span class="line">grep <span class="string">"text"</span> -n file_1 file_2</span><br><span class="line"></span><br><span class="line"><span class="meta">#搜索多个文件并查找匹配文本在哪些文件中： </span></span><br><span class="line">grep -l <span class="string">"text"</span> file1 file2 file3...</span><br><span class="line"></span><br><span class="line"><span class="meta">#在多级目录中对文本进行递归搜索： </span></span><br><span class="line">grep <span class="string">"text"</span> . -r -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#在grep搜索结果中包括或者排除指定文件： </span></span><br><span class="line"><span class="meta">#只在目录中所有的.php和.html文件中递归搜索字符"main()" </span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --include *.&#123;php,html&#125; </span><br><span class="line"><span class="meta">#在搜索结果中排除所有README文件 </span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --exclude <span class="string">"README"</span> </span><br><span class="line"><span class="meta">#在搜索结果中排除filelist文件列表里的文件 </span></span><br><span class="line">grep <span class="string">"main()"</span> . -r --exclude-from filelist</span><br></pre></td></tr></table></figure>
<h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><p>wc命令用来计算数字。利用wc指令我们可以计算文件的Byte数、字数或是列数，若不指定文件名称，或是所给予的文件名为“-”，则wc指令会从标准输入设备读取数据。 </p>
<h4 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">wc</span><span class="params">(选项)</span><span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-9"><a href="#选项-9" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">c或--bytes或——chars：只显示Bytes数； </span></span><br><span class="line"><span class="ruby">-l或——lines：只显示列数； </span></span><br><span class="line"><span class="ruby">-w或——words：只显示字数。</span></span><br></pre></td></tr></table></figure>
<h4 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">localhost:Server-v1 Ken$ wc  api<span class="selector-class">.php</span> </span><br><span class="line">      <span class="number">94</span>     <span class="number">248</span>    <span class="number">2096</span> api.php</span><br><span class="line">localhost:Server-v1 Ken$ wc -w  api<span class="selector-class">.php</span> </span><br><span class="line">     <span class="number">248</span> api.php</span><br><span class="line">localhost:Server-v1 Ken$ wc -l  api<span class="selector-class">.php</span> </span><br><span class="line">      <span class="number">94</span> api.php</span><br><span class="line">localhost:Server-v1 Ken$ wc -c  api<span class="selector-class">.php</span> </span><br><span class="line">    <span class="number">2096</span> api.php</span><br></pre></td></tr></table></figure>
<h2 id="文件压缩与解压"><a href="#文件压缩与解压" class="headerlink" title="文件压缩与解压"></a>文件压缩与解压</h2><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p>
<p>首先要弄清两个概念：<code>打包和压缩</code></p>
<ul>
<li>打包是指将一大堆文件或目录变成一个总的文件；</li>
<li>压缩则是将一个大的文件通过一些压缩算法变成一个小文件。 </li>
</ul>
<p>为什么要区分这两个概念呢？</p>
<blockquote>
<p>这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p>
</blockquote>
<h4 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">tar</span> <span class="params">(选项)</span>  <span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选项-10"><a href="#选项-10" class="headerlink" title="选项"></a>选项</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">A或--catenate：新增文件到以存在的备份文件； </span></span><br><span class="line"><span class="ruby">-B：设置区块大小； </span></span><br><span class="line"><span class="ruby">-c或--create：建立新的备份文件； </span></span><br><span class="line"><span class="ruby">-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。 </span></span><br><span class="line"><span class="ruby">-d：记录文件的差别； </span></span><br><span class="line"><span class="ruby">-x或--extract或--get：从备份文件中还原文件； </span></span><br><span class="line"><span class="ruby">-t或--list：列出备份文件的内容； </span></span><br><span class="line"><span class="ruby">-z或--gzip或--ungzip：通过gzip指令处理备份文件； </span></span><br><span class="line"><span class="ruby">-Z或--compress或--uncompress：通过compress指令处理备份文件； </span></span><br><span class="line"><span class="ruby">-<span class="symbol">f:</span> 使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！</span></span><br><span class="line"><span class="ruby">-v或--verbose：显示指令执行过程； </span></span><br><span class="line"><span class="ruby">-r：添加文件到已经压缩的文件； </span></span><br><span class="line"><span class="ruby">-u：添加改变了和现有的文件到已经存在的压缩文件； </span></span><br><span class="line"><span class="ruby">-j：支持bzip2解压文件； </span></span><br><span class="line"><span class="ruby">-v：显示操作过程； </span></span><br><span class="line"><span class="ruby">-l：文件系统边界设置； </span></span><br><span class="line"><span class="ruby">-k：保留原有文件不覆盖； </span></span><br><span class="line"><span class="ruby">-m：保留文件不被覆盖； </span></span><br><span class="line"><span class="ruby">-w：确认压缩文件的正确性；</span></span><br><span class="line"><span class="ruby">-x：解压 </span></span><br><span class="line"><span class="ruby">-p或--same-permissions：用原来的文件权限还原文件； </span></span><br><span class="line"><span class="ruby">-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；</span></span><br></pre></td></tr></table></figure>
<h4 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件或目录：指定要打包的文件或目录列表。</span><br></pre></td></tr></table></figure>
<h4 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar</span></span><br><span class="line">[txw1958@redhat ~]# tar -cvf /tmp/etc.tar /etc      　　　　&lt;==仅打包，不压缩！ </span><br><span class="line">[txw1958@redhat ~]# tar -zcvf /tmp/etc.tar.gz /etc  　　　　&lt;==打包后，以 gzip 压缩 </span><br><span class="line">[txw1958@redhat ~]# tar -jcvf /tmp/etc.tar.bz2 /etc　　　　 &lt;==打包后，以 bzip2 压缩 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～ </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果加 j 参数，则以 .tar.bz2 来作为附档名啊～ </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上述指令在执行的时候，会显示一个警告讯息： </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 『tar: Removing leading `/<span class="string">" from member names』那是关於绝对路径的特殊设定。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？</span></span><br><span class="line">[txw1958@redhat ~]# tar -ztvf /tmp/etc.tar.gz </span><br><span class="line"><span class="meta">#</span><span class="bash"> 由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时， </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就得要加上 z 这个参数了！这很重要的！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">范例三：将 /tmp/etc.tar.gz 文件解压缩在 /usr/<span class="built_in">local</span>/src 底下</span></span><br><span class="line">[txw1958@redhat src]# tar -zxvf /tmp/etc.tar.gz </span><br><span class="line"><span class="meta">#</span><span class="bash"> 在预设的情况下，我们可以将压缩档在任何地方解开的！以这个范例来说， </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我先将工作目录变换到 /usr/<span class="built_in">local</span>/src 底下，并且解开 /tmp/etc.tar.gz ， </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则解开的目录会在 /usr/<span class="built_in">local</span>/src/etc 呢！另外，如果您进入 /usr/<span class="built_in">local</span>/src/etc </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则会发现，该目录下的文件属性与 /etc/ 可能会有所不同喔！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已</span></span><br><span class="line">[txw1958@redhat ~]# cd /tmp </span><br><span class="line">[txw1958@redhat tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd </span><br><span class="line"><span class="meta">#</span><span class="bash"> 我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件， </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="http://man.linuxde.net/" target="_blank" rel="external">Linux命令大全</a></li>
<li><a href="http://www.cnblogs.com/txw1958/archive/2012/09/13/linux-tar.html" target="_blank" rel="external">方倍工作室</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git的日常使用命令]]></title>
      <url>http://yoursite.com/2016/01/18/git-common-use/</url>
      <content type="html"><![CDATA[<p><center>本文介绍了几个git常用的命令</center><br><a id="more"></a></p>
<ul>
<li>初始化一个Git仓库，使用<code>git init</code>命令。</li>
<li>添加文件到Git仓库，分两步：<br>  第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；<br>  第二步，使用命令<code>git commit</code>，完成。</li>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>
<li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li>
<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
<li>命令<code>git rm</code>用于删除一个文件</li>
<li><code>git push origin master</code>提交到远程仓库</li>
<li>从仓库更新最新文档到本地<code>git checkout</code></li>
<li>取回远程仓库的变化，并与本地分支合并,<code>git pull</code></li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用svn指令]]></title>
      <url>http://yoursite.com/2016/01/18/linux-svn/</url>
      <content type="html"><![CDATA[<center>本文主要介绍linux os下控制行的常用svn指令</center>

<a id="more"></a>
<p>​</p>
<h2 id="将文件checkout到本地目录"><a href="#将文件checkout到本地目录" class="headerlink" title="将文件checkout到本地目录"></a>将文件checkout到本地目录</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ svn <span class="params">--username=yourname</span> co svn_path  local_path</span><br><span class="line"><span class="string">//</span>其中co是checkout的简写</span><br><span class="line">$ svn <span class="params">--username=ken</span> co https:<span class="string">//121.222.222.21/svn/web</span>  <span class="string">/home/ken/web</span></span><br></pre></td></tr></table></figure>
<h2 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> svn update <span class="comment">//更新整体svn文件</span></span><br><span class="line"><span class="symbol">$</span> svn update -r <span class="number">27</span> demo.php <span class="comment">//将demo.php文件更新到27版本</span></span><br><span class="line"><span class="symbol">$</span> svn update ./    <span class="comment">//跟新当前文件夹</span></span><br><span class="line"><span class="symbol">$</span> svn up <span class="comment">//简写格式</span></span><br></pre></td></tr></table></figure>
<h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> svn commit -m <span class="string">"更新信息"</span>   [更新的文件名|文件夹名]   </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn ci -m <span class="string">"修改了显示bug"</span>   show.html    //ci是简写格式</span></span><br></pre></td></tr></table></figure>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> svn <span class="built_in">log</span> 查看整体的日志   //建议不要这样干，日志太多的话就呵呵呵了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn <span class="built_in">log</span> --<span class="built_in">limit</span> 10 //查看最新的10条日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn <span class="built_in">log</span> --limt 10  --username=ken   info.php  //查看用户名是ken的对info.php操作的最新的十条日志</span></span><br></pre></td></tr></table></figure>
<h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ svn status [PATH...]</span><br><span class="line"></span><br><span class="line">ken@ken-K42JY:/var/www/weberp$ svn st   //st简写格式</span><br><span class="line">?       .idea</span><br><span class="line">M       trunk/<span class="built_in">source</span>/Application/Common/Common/function.php</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Cache/Home/9b1c26b1cee56f532f15c56b96a07c74.php</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Cache/Setting</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Cache/Stock</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Logs/Setting</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Logs/Stock</span><br><span class="line">?       trunk/<span class="built_in">source</span>/Application/Runtime/Logs/default</span><br><span class="line">M       trunk/<span class="built_in">source</span>/Application/Stock/Controller/ApiLogisticsSyncController.class.php</span><br><span class="line">M       trunk/<span class="built_in">source</span>/Application/Stock/Model/ApiLogisticsSyncModel.class.php</span><br><span class="line"></span><br><span class="line">//<span class="string">'A'</span>  新增;<span class="string">'D'</span>  删除;<span class="string">'M'</span>  修改;<span class="string">'R'</span>  替代;<span class="string">'C'</span>  冲突;</span><br><span class="line">//<span class="string">'I'</span>  忽略;<span class="string">'?'</span>  未受控;<span class="string">'!'</span>  丢失，一般是将受控文件直接删除导致</span><br></pre></td></tr></table></figure>
<h2 id="添加删除文件-夹"><a href="#添加删除文件-夹" class="headerlink" title="添加删除文件(夹)"></a>添加删除文件(夹)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> svn add -m  <span class="string">"message"</span> 文件名/目录名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn delete/del -m <span class="string">"message"</span> 文件名/目录名</span></span><br></pre></td></tr></table></figure>
<h2 id="比较不同"><a href="#比较不同" class="headerlink" title="比较不同"></a>比较不同</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> svn diff path      //将修改的文件与基础版本比较</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn diff test.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn diff -r m:n path    //对版本m和版本n比较差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn diff -r 200:201 test.php</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> svn di     //简写格式</span></span><br></pre></td></tr></table></figure>
<h2 id="查看文件详细信息"><a href="#查看文件详细信息" class="headerlink" title="查看文件详细信息"></a>查看文件详细信息</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ken<span class="meta">@ken</span>-<span class="string">K42JY:</span><span class="regexp">/var/</span>www<span class="regexp">/weberp$ svn info trunk/</span>source<span class="regexp">/Application/</span>Common<span class="regexp">/Common/</span>function.php</span><br><span class="line"><span class="string">Path:</span> trunk<span class="regexp">/source/</span>Application<span class="regexp">/Common/</span>Common/function.php</span><br><span class="line"><span class="string">Name:</span> function.php</span><br><span class="line">Working Copy Root <span class="string">Path:</span> <span class="regexp">/var/</span>www/weberp</span><br><span class="line"><span class="string">URL:</span> <span class="string">https:</span><span class="comment">//121.41.165.232/svn/weberp/trunk/source/Application/Common/Common/function.php</span></span><br><span class="line">Relative <span class="string">URL:</span> ^<span class="regexp">/trunk/</span>source<span class="regexp">/Application/</span>Common<span class="regexp">/Common/</span>function.php</span><br><span class="line">Repository <span class="string">Root:</span> <span class="string">https:</span><span class="comment">//121.41.165.232/svn/weberp</span></span><br><span class="line">Repository <span class="string">UUID:</span> <span class="number">40</span>d744e1<span class="number">-39</span>a9<span class="number">-8</span>d4d-b592<span class="number">-13256</span>b12d743</span><br><span class="line"><span class="string">Revision:</span> <span class="number">2390</span></span><br><span class="line">Node <span class="string">Kind:</span> file</span><br><span class="line"><span class="string">Schedule:</span> normal</span><br><span class="line">Last Changed <span class="string">Author:</span> changtao</span><br><span class="line">Last Changed <span class="string">Rev:</span> <span class="number">2387</span></span><br><span class="line">Last Changed <span class="string">Date:</span> <span class="number">2015</span><span class="number">-12</span><span class="number">-13</span> <span class="number">22</span>:<span class="number">43</span>:<span class="number">46</span> +<span class="number">0800</span> (Sun, <span class="number">13</span> Dec <span class="number">2015</span>)</span><br><span class="line">Text Last <span class="string">Updated:</span> <span class="number">2015</span><span class="number">-12</span><span class="number">-14</span> <span class="number">10</span>:<span class="number">11</span>:<span class="number">26</span> +<span class="number">0800</span> (Mon, <span class="number">14</span> Dec <span class="number">2015</span>)</span><br><span class="line"><span class="string">Checksum:</span> <span class="number">158</span>a7601292bf32085c74329a40d89f6eb03ee05</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> svn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门学习(五)]]></title>
      <url>http://yoursite.com/2016/01/14/learn-shell-5/</url>
      <content type="html"><![CDATA[<p><center>Shell的学习手册(五)</center><br><a id="more"></a></p>
<h1 id="Shell重定向"><a href="#Shell重定向" class="headerlink" title="Shell重定向"></a>Shell重定向</h1><p>Unix 命令默认从标准输入设备(stdin)获取输入,将结果输出到标准输出设备(stdout)显示。一般情况下,标准输入设备就是键盘,标准输出设备就是终端,即显示器。</p>
<p>输出重定向是大于号(&gt;),输入重定向是小于号(&lt;)。</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ who &gt;<span class="built_in"> users </span>＃输出重定向会覆盖文件内容</span><br><span class="line">$ who &gt;&gt;<span class="built_in"> users </span>#使用 &gt;&gt; 追加到文件末尾</span><br><span class="line">$ command &lt; file #输入重定向,这样本来需要从键盘获取输入的命令会转移到文件读取内容</span><br></pre></td></tr></table></figure>
<h2 id="深入理解重定向"><a href="#深入理解重定向" class="headerlink" title="深入理解重定向"></a>深入理解重定向</h2><p>一般情况下,每个 Unix/Linux 命令运行时都会打开三个文件:</p>
<p>1.标准输入文件(stdin):stdin的文件描述符为0,Unix程序默认从stdin读取数据。<br>2.标准输出文件(stdout):stdout 的文件描述符为1,Unix程序默认向stdout输出数据。<br>3.标准错误文件(stderr):stderr的文件描述符为2,Unix程序会向stderr流中写入错误信息。</p>
<p>默认情况下,command &gt; file 将 stdout 重定向到 file,command &lt; file 将stdin 重定向到 file。</p>
<p>如果希望 stderr 重定向到 file,可以这样写:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> 2 &gt; file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> 2 &gt;&gt; file</span></span><br></pre></td></tr></table></figure>
<p>如果希望将 stdout 和 stderr 合并后重定向到 file,可以这样写:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> &gt; file 2&gt;&amp;1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> &gt;&gt; file 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>
<p>如果希望对 stdin 和 stdout 都重定向,可以这样写:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">command</span> &lt; file1 &gt;file2</span></span><br></pre></td></tr></table></figure>
<p><img src="/shell-18.png" alt=""></p>
<h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><p>Here Document 是 Shell 中的一种特殊的重定向方式,它的基本的形式如下:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">command</span> &lt;&lt; <span class="title">delimiter</span></span><br><span class="line">    document</span><br><span class="line">delimiter</span><br></pre></td></tr></table></figure>
<p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p>
<p>注意:</p>
<ul>
<li>结尾的delimiter 一定要顶格写,前面不能有任何字符,后面也不能有任何字符,包括空格和 tab 缩进。</li>
<li>开始的delimiter前后的空格会被忽略掉。</li>
</ul>
<p>实例:</p>
<p><img src="/shell-19.png" alt=""></p>
<h2 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h2><p>如果希望执行某个命令,但又不希望在屏幕上显示输出结果,那么可以将输出重定向到 /dev/null</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">command</span> &gt; /dev/null</span></span><br></pre></td></tr></table></figure>
<p>/dev/null 是一个特殊的文件,写入到它的内容都会被丢弃；如果尝试从该文件读取内容,那么什么也读不到。但是 /dev/null 文件非常有用,将命令的输出重定向到它,会起到”禁止输出“的效果。</p>
<p>如果希望屏蔽 stdout 和 stderr,可以这样写:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>
<h1 id="Shell文件包括"><a href="#Shell文件包括" class="headerlink" title="Shell文件包括"></a>Shell文件包括</h1><p>像其他语言一样,Shell 也可以包含外部脚本,将外部脚本的内容合并到当前脚本。<br>Shell 中包含脚本可以使用:</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. <span class="keyword">filename</span></span><br><span class="line"><span class="keyword">source</span> <span class="keyword">filename</span></span><br><span class="line"><span class="comment">#两种方式的效果相同,简单起见,一般使用点号(.),但是注意点号(.)和文件名中间有一空格。</span></span><br></pre></td></tr></table></figure>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">. ./subscript.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$url</span></span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol>
<li><a href="http://c.biancheng.net/cpp/shell/" target="_blank" rel="external">C语言中文网Shell教程</a></li>
<li>Linux命令行与Shell脚本编程大全 第2版</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门学习(四)]]></title>
      <url>http://yoursite.com/2016/01/14/learn-shell-4/</url>
      <content type="html"><![CDATA[<p><center>Shell的学习手册(四)</center><br><a id="more"></a></p>
<h1 id="Shell语法"><a href="#Shell语法" class="headerlink" title="Shell语法"></a>Shell语法</h1><h2 id="Shell-If语句"><a href="#Shell-If语句" class="headerlink" title="Shell If语句"></a>Shell If语句</h2><p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。<br>Shell 有三种if … else 语句:</p>
<ul>
<li>if … fi 语句；</li>
<li>if … else … fi 语句；</li>
<li>if … elif … else … fi 语句。</li>
</ul>
<p>实例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is greater than b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is less than b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"None of the condition met"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h2 id="Shell-Case语句"><a href="#Shell-Case语句" class="headerlink" title="Shell Case语句"></a>Shell Case语句</h2><p>语法<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    <span class="keyword">command</span>1</span><br><span class="line">    <span class="keyword">command</span>2</span><br><span class="line">    <span class="keyword">command</span>3</span><br><span class="line">    ;;</span><br><span class="line">模式2)</span><br><span class="line">    <span class="keyword">command</span>1</span><br><span class="line">    <span class="keyword">command</span>2</span><br><span class="line">    <span class="keyword">command</span>3</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="keyword">command</span>1</span><br><span class="line">    <span class="keyword">command</span>2</span><br><span class="line">    <span class="keyword">command</span>3</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p>
<p>case工作方式如上所示。取值后面必须为关键字 in,每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后,其间所有命令开始执行直至 ;;。;; 与其他语言中的 break 类似,意思是跳到整个 case 语句的最后。</p>
<p>实例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'Input a number between 1 to 4'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Your number is:\c'</span></span><br><span class="line"><span class="built_in">read</span> aNum</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$aNum</span> <span class="keyword">in</span></span><br><span class="line">    1)  <span class="built_in">echo</span> <span class="string">'You select 1'</span></span><br><span class="line">    ;;</span><br><span class="line">    2)  <span class="built_in">echo</span> <span class="string">'You select 2'</span></span><br><span class="line">    ;;</span><br><span class="line">    3)  <span class="built_in">echo</span> <span class="string">'You select 3'</span></span><br><span class="line">    ;;</span><br><span class="line">    4)  <span class="built_in">echo</span> <span class="string">'You select 4'</span></span><br><span class="line">    ;;</span><br><span class="line">    *)  <span class="built_in">echo</span> <span class="string">'You do not select a number between 1 to 4'</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Shell-For循环"><a href="#Shell-For循环" class="headerlink" title="Shell For循环"></a>Shell For循环</h2><p>语法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<p>列表是一组值(数字、字符串等)组成的序列,每个值通过空格分隔。每循环一次,就将列表中的下一个值赋给变量。<br>in 列表是可选的,如果不用它,for 循环使用命令行的位置参数。</p>
<p>实例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> loop <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value is: <span class="variable">$loop</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Shell-While循环"><a href="#Shell-While循环" class="headerlink" title="Shell While循环"></a>Shell While循环</h2><p>语法<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">command</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">   Statement(s) <span class="built_in">to</span> be executed <span class="keyword">if</span> <span class="keyword">command</span> <span class="title">is</span> <span class="title">true</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<p>实例:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">COUNTER</span>=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$COUNTER</span> -lt 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="attribute">COUNTER</span>=<span class="string">'expr $COUNTER + 1'</span></span><br><span class="line">    echo <span class="variable">$COUNTER</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<h2 id="Shell-until循环"><a href="#Shell-until循环" class="headerlink" title="Shell until循环"></a>Shell until循环</h2><p>语法:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> <span class="keyword">command</span></span><br><span class="line"><span class="built_in">do</span></span><br><span class="line">   Statement(s) <span class="built_in">to</span> be executed <span class="keyword">until</span> <span class="keyword">command</span> <span class="title">is</span> <span class="title">true</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>
<p>实例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line"></span><br><span class="line">until [ ! <span class="variable">$a</span> -lt 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">   a=`expr <span class="variable">$a</span> + 1`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Shell-跳出循环"><a href="#Shell-跳出循环" class="headerlink" title="Shell 跳出循环"></a>Shell 跳出循环</h2><p>break 和 continue</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break命令允许跳出所有循环(终止执行后面的所有循环)。<br>在嵌套循环中,break 命令后面还可以跟一个整数,表示跳出第几层循环。例如:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> n</span><br></pre></td></tr></table></figure></p>
<p>表示跳出第 n 层循环。<br><code>break n 跳到指定的循环,如果n不指定 , 默认跳到最大的循环.,继续执行最大循环里面的语句；如果n大于最大循环,条件一旦成立则跳出最大循环。</code></p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似,只有一点差别,它不会跳出所有循环,仅仅跳出当前循环。</p>
<h2 id="Shell函数"><a href="#Shell函数" class="headerlink" title="Shell函数"></a>Shell函数</h2><h2 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h2><p>Shell 函数的定义格式如下:</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span><span class="number">_n</span>ame () &#123;</span><br><span class="line">    list <span class="keyword">of</span> commands</span><br><span class="line">    [ <span class="keyword">return</span> <span class="keyword">value</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你愿意,也可以在函数名前加上关键字 function:<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">function_name</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">list</span> <span class="keyword">of</span> commands</span><br><span class="line">    [ <span class="keyword">return</span> value ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>函数返回值,可以显式增加return语句；如果不加,会将最后一条命令运行结果作为返回值。</code></p>
<blockquote>
<p>Shell 函数返回值只能是整数,一般用来表示函数执行成功与否,0表示成功,其他值表示失败。如果 return 其他数据,比如一个字符串,往往会得到错误提示:“numeric argument required”。<br>如果一定要让函数返回字符串,那么可以先定义一个变量,用来接收函数的计算结果,脚本在需要的时候访问这个变量来获得函数返回值。</p>
</blockquote>
<p>调用函数只需要给出函数名,不需要加括号。</p>
<h2 id="参数调用"><a href="#参数调用" class="headerlink" title="参数调用"></a>参数调用</h2><p>在Shell中,调用函数时可以向其传递参数。在函数体内部,通过 $n 的形式来获取参数的值,例如,$1表示第一个参数,$2表示第二个参数…<br>注意,$10 不能获取第十个参数,获取第十个参数需要${10}。当n&gt;=10时,需要使用${n}来获取参数。</p>
<p>实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of the first parameter is <span class="variable">$1</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of the second parameter is <span class="variable">$2</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of the tenth parameter is <span class="variable">$10</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of the tenth parameter is <span class="variable">$&#123;10&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The value of the eleventh parameter is <span class="variable">$&#123;11&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The amount of the parameters is <span class="variable">$#</span> !"</span>  <span class="comment"># 参数个数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The string of the parameters is $* !"</span>  <span class="comment"># 传递给函数的所有参数</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门学习(三)]]></title>
      <url>http://yoursite.com/2016/01/14/learn-shell-3/</url>
      <content type="html"><![CDATA[<p><center>Shell的学习手册(三)</center><br><a id="more"></a></p>
<h1 id="Shell语法"><a href="#Shell语法" class="headerlink" title="Shell语法"></a>Shell语法</h1><h2 id="Shell运算符"><a href="#Shell运算符" class="headerlink" title="Shell运算符"></a>Shell运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p><code>原生bash不支持简单的数学运算,但是可以通过其他命令来实现,expr 是一款表达式计算工具,使用它能完成表达式的求值操作。</code></p>
<p>两点注意:</p>
<ul>
<li>表达式和运算符之间要有空格,例如 2+2 是不对的,必须写成 2 + 2,这与我们熟悉的大多数编程语言不一样。</li>
<li>完整的表达式要被 `` 包含,注意这个字符不是常用的单引号,在 Esc 键下边</li>
</ul>
<p><img src="/shell-13.png" alt=""></p>
<p>注意:条件表达式要放在方括号之间,并且要有空格!!!<br>例如 [$a==$b] 是错误的,必须写成 [ $a == $b ]。</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字,不支持字符串,除非字符串的值是数字。</p>
<p><img src="/shell-14.png" alt=""></p>
<h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p><img src="/shell-15.png" alt=""></p>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p><img src="/shell-16.png" alt=""></p>
<h3 id="文件运算符"><a href="#文件运算符" class="headerlink" title="文件运算符"></a>文件运算符</h3><p><img src="/shell-17.png" alt=""></p>
<h2 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h2><p>以#开头的就是注释</p>
<h2 id="Shell字符串"><a href="#Shell字符串" class="headerlink" title="Shell字符串"></a>Shell字符串</h2><h3 id="单引号双引号的区别"><a href="#单引号双引号的区别" class="headerlink" title="单引号双引号的区别"></a>单引号双引号的区别</h3><p>单引号字符串的限制:</p>
<ul>
<li>单引号里的任何字符都会原样输出,单引号字符串中的变量是无效的；</li>
<li>单引号字串中不能出现单引号(对单引号使用转义符后也不行)。</li>
</ul>
<p>双引号的优点:</p>
<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
<p>所以一般都用双引号！！！</p>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"qinjx"</span></span><br><span class="line">greeting=<span class="string">"hello, "</span>$your_name<span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, $&#123;your_name&#125; !"</span></span><br><span class="line"></span><br><span class="line">echo $greeting $greeting_1</span><br><span class="line"></span><br><span class="line">//hello, qinjx ! hello, qinjx !</span><br></pre></td></tr></table></figure>
<h3 id="字符串长度获取"><a href="#字符串长度获取" class="headerlink" title="字符串长度获取"></a>字符串长度获取</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line">echo $｛<span class="comment">#string｝</span></span><br></pre></td></tr></table></figure>
<h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>=<span class="string">"alibaba is a great company"</span></span><br><span class="line">echo $&#123;<span class="built_in">string</span>:<span class="number">1</span>:<span class="number">4</span>&#125; <span class="comment">#输出liba</span></span><br></pre></td></tr></table></figure>
<h2 id="Shell数组"><a href="#Shell数组" class="headerlink" title="Shell数组"></a>Shell数组</h2><h3 id="数组定义的三种方式"><a href="#数组定义的三种方式" class="headerlink" title="数组定义的三种方式"></a>数组定义的三种方式</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">＃<span class="number">1</span></span><br><span class="line">array<span class="number">_n</span>ame=(<span class="keyword">value</span><span class="number">0</span> <span class="keyword">value</span><span class="number">1</span> <span class="keyword">value</span><span class="number">2</span> <span class="keyword">value</span><span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">＃<span class="number">2</span></span><br><span class="line">array<span class="number">_n</span>ame=(</span><br><span class="line">    <span class="keyword">value</span><span class="number">0</span></span><br><span class="line">    <span class="keyword">value</span><span class="number">1</span></span><br><span class="line">    <span class="keyword">value</span><span class="number">2</span></span><br><span class="line">    <span class="keyword">value</span><span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">＃<span class="number">3</span></span><br><span class="line">array<span class="number">_n</span>ame[<span class="number">0</span>]=<span class="keyword">value</span><span class="number">0</span></span><br><span class="line">array<span class="number">_n</span>ame[<span class="number">1</span>]=<span class="keyword">value</span><span class="number">1</span></span><br><span class="line">array<span class="number">_n</span>ame[<span class="number">2</span>]=<span class="keyword">value</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[index]&#125; <span class="comment">#读取数组值的一般方式 eg:$&#123;NAME[0]&#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[*]&#125;  <span class="comment">#使用@ 或 * 可以获取数组中的所有元素</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取得数组元素的个数</span></span><br><span class="line"><span class="attr">length</span>=<span class="variable">$&#123;＃array_name[@]&#125;</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">length</span>=<span class="variable">$&#123;＃array_name[*]&#125;</span></span><br><span class="line"><span class="comment">#取得数组单个元素的长度</span></span><br><span class="line"><span class="attr">lengthn</span>=<span class="variable">$&#123;＃array_name[n]&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示转移字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\"It is a test\""</span></span><br><span class="line"><span class="comment">#"It is a test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将结果重定向至文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示命令执行结果</span></span><br><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure>
<h2 id="Shell-Printf命令"><a href="#Shell-Printf命令" class="headerlink" title="Shell Printf命令"></a>Shell Printf命令</h2><p>printf 命令用于格式化输出, 是echo命令的增强版。它是C语言printf()库函数的一个有限的变形,并且在语法上有些不同。</p>
<p>语法:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>  format-<span class="built_in">string</span>  [arguments...]</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">format-string为双引号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">"%d %s\n"</span> 1 <span class="string">"abc"</span></span></span><br><span class="line">1 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">单引号与双引号效果一样 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">'%d %s\n'</span> 1 <span class="string">"abc"</span> </span></span><br><span class="line">1 abc</span><br><span class="line"><span class="meta">#</span><span class="bash">没有引号也可以输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> %s abcdef</span></span><br><span class="line">abcdef</span><br><span class="line"><span class="meta">#</span><span class="bash">格式只指定了一个参数,但多出的参数仍然会按照该格式输出,format-string 被重用</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> %s abc def</span></span><br><span class="line">abcdef</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">"%s\n"</span> abc def</span></span><br><span class="line">abc</span><br><span class="line">def</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">"%s %s %s\n"</span> a b c d e f g h i j</span></span><br><span class="line">a b c</span><br><span class="line">d e f</span><br><span class="line">g h i</span><br><span class="line">j</span><br><span class="line"><span class="meta">#</span><span class="bash">如果没有 arguments,那么 %s 用NULL代替,%d 用 0 代替</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">"%s and %d \n"</span> </span></span><br><span class="line">and 0</span><br><span class="line"><span class="meta">#</span><span class="bash">如果以 %d 的格式来显示字符串,那么会有警告,提示无效的数字,此时默认置为 0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">printf</span> <span class="string">"The first program always prints'%s,%d\n'"</span> Hello Shell</span></span><br><span class="line">-bash: printf: Shell: invalid number</span><br><span class="line">The first program always prints 'Hello,0'</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门学习(二)]]></title>
      <url>http://yoursite.com/2016/01/14/learn-shell-2/</url>
      <content type="html"><![CDATA[<p><center>Shell的学习手册(二)</center><br><a id="more"></a></p>
<h1 id="Shell语法"><a href="#Shell语法" class="headerlink" title="Shell语法"></a>Shell语法</h1><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><p>运行shell时,会同时存在三种变量:<br>1) 局部变量<br>局部变量在脚本或命令中定义,仅在当前shell实例中有效,其他shell启动的程序不能访问局部变量。<br>2) 环境变量<br>所有的程序,包括shell启动的程序,都能访问环境变量,有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。<br>3) shell变量<br>shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量,有一部分是局部变量,这些变量保证了shell的正常运行</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>定义变量时,变量名不加美元符号($)!!!</code>如:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variableName</span>=<span class="string">"value"</span></span><br></pre></td></tr></table></figure>
<p><code>注意,变量名和等号之间不能有空格</code></p>
<p>变量名的命名须遵循如下规则:</p>
<ul>
<li>首个字符必须为字母(a-z,A-Z)。</li>
<li>中间不能有空格,可以使用下划线(_)。</li>
<li>不能使用标点符号。</li>
<li>不能使用bash里的关键字(可用help命令查看保留关键字)</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>使用一个定义过的变量要在变量名前面加美元符号($),如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"mozhiyan"</span>   </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>变量名外面的花括号是可选的,加不加都行,加花括号是为了帮助解释器识别变量的边界</code></p>
<p><code>推荐给所有变量加上花括号,这是个好的编程习惯。</code><br>已定义过的变量可以重新定义:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aaa=<span class="string">"my aaa"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;myUrl&#125;</span></span><br><span class="line">aaa=<span class="string">"your bbb"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;myUrl&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用<code>readonly</code>命令可以将变量定义为只读变量,只读变量的值不能被改变。</p>
<h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p>使用<code>unset</code>命令可以删除变量。</p>
<h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><p>shell变量即特殊变量</p>
<h4 id="特殊变量列表"><a href="#特殊变量列表" class="headerlink" title="特殊变量列表"></a>特殊变量列表</h4><p><img src="/shell-2.png" alt=""></p>
<p>运行实例:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"File Name: <span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"First Parameter : <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"First Parameter : <span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Quoted Values: <span class="variable">$@</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Quoted Values: $*"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Total Number of Parameters : <span class="variable">$#</span>"</span></span><br></pre></td></tr></table></figure>
<p><img src="/shell-3.png" alt=""></p>
<h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$*和$@的区别"></a>$*和$@的区别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$* 和 <span class="variable">$@</span> 都表示传递给函数或脚本的所有参数,不被双引号(<span class="string">" "</span>)包含时,都以<span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span> … <span class="string">"<span class="variable">$n</span>"</span> 的形式输出所有参数。</span><br><span class="line">但是当它们被双引号(<span class="string">" "</span>)包含时,<span class="string">"$*"</span> 会将所有的参数作为一个整体,以<span class="string">"<span class="variable">$1</span> <span class="variable">$2</span> … <span class="variable">$n</span>"</span>的形式输出所有参数；<span class="string">"<span class="variable">$@</span>"</span> 会将各个参数分开,以<span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$2</span>"</span> … <span class="string">"<span class="variable">$n</span>"</span> 的形式输出所有参数。</span><br></pre></td></tr></table></figure>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>bash shell用一个称作<code>环境变量</code>的特性来存储有关shell会话和工作环境的信息。<br>它允许我们在内存中储存数据,以便运行在shell上的程序和脚本访问。<br>在bash shell中,环境变量分为两类:</p>
<ul>
<li>全局变量</li>
<li>局部变量</li>
</ul>
<h4 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h4><p><code>全局变量不仅对shell会话可见,对所有shell创建的子进程也可见；
局部变量仅对他们创建的shell可见。</code></p>
<p>查看全局变量用<code>printenv</code>命令:</p>
<p><img src="/shell-4.png" alt=""></p>
<p>如只要显示单个环境变量的值,可用<code>echo</code>命令,当引用环境变量时,必须在环境变量的名称前放置一个<code>$</code>符号</p>
<p><img src="/shell-5.png" alt=""></p>
<h4 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h4><p>即上文的局部变量!!!<br>查看局部变量的列表有些复杂,Linux并没有一个命令只显示局部变量。<code>set</code>命令会显示为某个特定进程设置的所有环境变量,包括全局变量。</p>
<p><img src="/shell-6.png" alt=""></p>
<p>除去全局变量剩下的就是局部变量了 ＝ ＝</p>
<h4 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h4><p>创建全局变量的方法是先创建一个局部变量,然后再将它通过<code>export</code>命令导入到全局变量中。</p>
<p><img src="/shell-7.png" alt=""></p>
<h4 id="设置PATH环境变量"><a href="#设置PATH环境变量" class="headerlink" title="设置PATH环境变量"></a>设置PATH环境变量</h4><p>PATH环境变量是Linux系统上造成最多问题的变量。它定义了命令行输入命令的搜索路径,如果找不到命令,它会产生一个错误。</p>
<p><img src="/shell-8.png" alt=""></p>
<p>PATH中的目录之间使用 <code>:</code> 分隔,如果想要添加新的目录到现有的PATH环境变量,无需重头定义,只需要像这样即可:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>PATH=<span class="variable">$PATH</span><span class="symbol">:/home/user/test</span></span><br></pre></td></tr></table></figure>
<p>也可以这样添加</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:.</span><br></pre></td></tr></table></figure>
<p>这个单点符代表将当前目录添加到PATH变量中去。</p>
<h2 id="Shell替换"><a href="#Shell替换" class="headerlink" title="Shell替换"></a>Shell替换</h2><h3 id="特殊字符替换"><a href="#特殊字符替换" class="headerlink" title="特殊字符替换"></a>特殊字符替换</h3><p>如果表达式中包含特殊字符,Shell 将会进行替换。例如,在双引号中使用变量就是一种替换,转义字符也是一种替换。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"Value of a is <span class="variable">$a</span> \n"</span></span><br><span class="line"><span class="comment">#这里 -e 表示对转义字符进行替换。如果不使用 -e 选项,将会原样输出</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Value of a is <span class="variable">$a</span> \n"</span></span><br></pre></td></tr></table></figure>
<p><img src="/shell-9.png" alt=""></p>
<h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换是指Shell可以先执行命令,将输出结果暂时保存,在适当的地方输出。<br>命令替换的语法:</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`command`</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=`date`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Date is <span class="variable">$DATE</span>"</span></span><br></pre></td></tr></table></figure>
<p>输出</p>
<p><img src="/shell-10.png" alt=""></p>
<h3 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h3><p>变量替换可以根据变量的状态(是否为空、是否定义等)来改变它的值</p>
<p><img src="/shell-11.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:-"Variable is not set"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"1 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:="Variable is not set"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> var</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:+"This is default value"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"3 - Value of var is <span class="variable">$var</span>"</span></span><br><span class="line"></span><br><span class="line">var=<span class="string">"Prefix"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:+"This is default value"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"4 - Value of var is <span class="variable">$var</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> var</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:?"Print this message"&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"5 - Value of var is <span class="variable">$&#123;var&#125;</span>"</span></span><br></pre></td></tr></table></figure>
<p><img src="/shell-12.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell入门学习(一)]]></title>
      <url>http://yoursite.com/2016/01/14/learn-shell-1/</url>
      <content type="html"><![CDATA[<p><center>Shell的学习手册(一)</center><br><a id="more"></a><br>​</p>
<h1 id="Shell介绍"><a href="#Shell介绍" class="headerlink" title="Shell介绍"></a>Shell介绍</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Shell本身是一个用C语言编写的程序,它是用户使用Unix/Linux的桥梁,用户的大部分工作都是通过Shell完成的。<br><code>Shell既是一种命令语言,又是一种程序设计语言</code><br>作为命令语言,它交互式地解释和执行用户输入的命令；<br>作为程序设计语言,它定义了各种变量和参数,并提供了许多在高级语言中才具有的控制结构,包括循环和分支。</p>
<h2 id="Shell有两种执行命令的方式"><a href="#Shell有两种执行命令的方式" class="headerlink" title="Shell有两种执行命令的方式"></a>Shell有两种执行命令的方式</h2><ul>
<li>交互式(Interactive):解释执行用户的命令,用户输入一条命令,Shell就解释执行一条。</li>
<li>批处理(Batch):用户事先写一个Shell脚本(Script),其中有很多条命令,让Shell一次把这些命令执行完,而不必一条一条地敲命令。</li>
</ul>
<h1 id="几种常见Shell"><a href="#几种常见Shell" class="headerlink" title="几种常见Shell"></a>几种常见Shell</h1><p>Shell是一种脚本语言,那么,就必须有解释器来执行这些脚本。<br>我们常说有多少种Shell,其实说的是Shell脚本解释器:</p>
<ul>
<li>bash &lt;=bash是Linux标准默认的shell,本文的Shell都是基于bash环境</li>
<li>sh</li>
<li>ash</li>
<li>csh</li>
<li>ksh</li>
</ul>
<h1 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本"></a>第一个Shell脚本</h1><p>打开文本编辑器,新建一个文件,扩展名为sh(sh代表shell),扩展名并不影响脚本执行,但一般都以<code>sh</code>做扩展名。</p>
<h2 id="编写Shell"><a href="#编写Shell" class="headerlink" title="编写Shell"></a>编写Shell</h2><p>输入一些代码:</p>
<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash   &lt;=“#!” 是一个约定的标记,它告诉系统这个脚本需要什么解释器来执行,即使用哪一种Shell</span></span><br><span class="line">echo <span class="string">"Hello World !"</span> &lt;=echo命令用于向窗口输出文本</span><br></pre></td></tr></table></figure>
<h2 id="运行Shell"><a href="#运行Shell" class="headerlink" title="运行Shell"></a>运行Shell</h2><p>两种方式运行Shell<br>1.作为可执行程序<br>将上面的代码保存为test.sh,并cd到相应目录:</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="string">./test.sh</span>  <span class="comment">#使脚本具有执行权限 </span></span><br><span class="line"><span class="string">./test.sh</span>  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure>
<p><code>注意,一定要写成./test.sh,而不是test.sh</code></p>
<blockquote>
<p>直接写test.sh,linux系统会去PATH里寻找有没有叫test.sh的,而只有/bin, /sbin, /usr/bin,/usr/sbin等在PATH里,你的当前目录通常不在PATH里,所以写成test.sh是会找不到命令的,要用./test.sh告诉系统说,就在当前目录找。</p>
</blockquote>
<p>2.作为解释器参数</p>
<p>这种运行方式是,直接运行解释器,其参数就是shell脚本的文件名,如:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/<span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/shell-1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP大小写问题]]></title>
      <url>http://yoursite.com/2016/01/10/PHP-case-question/</url>
      <content type="html"><![CDATA[<p><center>本文主要总结了PHP各种情况大小写是否敏感的问题</center><br><a id="more"></a></p>
<ul>
<li>变量名区分大小写</li>
<li>常量名默认区分大小写</li>
<li>函数名、方法名、类名不区分大小写<br>下面的引用要格外的注意！！！parent,self,static<blockquote>
<p>“parent” and “self”, “static” LSB tokens behave inconsistent when it comes to case-sensitivity. Class names in PHP are case-insensitive, but these three keywords aren’t always, as the parser sees them as raw T_STRINGs.</p>
</blockquote>
</li>
<li>魔术变量不区分大小写,但默认大写</li>
<li>null、true、false不区分大小写 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 大小写 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP邮件的发送]]></title>
      <url>http://yoursite.com/2016/01/08/php-mail-send/</url>
      <content type="html"><![CDATA[<p>php虽然提供了mail()函数，但并不好用，而PHPMailer是一个不错的邮件发送工具，使用起来也是非常简单！</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> (<span class="string">'class.phpmailer.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送邮件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $array $sendto_email 发件人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $subject  主题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $msg 内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> phpmailerException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">smtp_mail</span><span class="params">($sendto_email = $array<span class="params">()</span>, $subject, $msg)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">global</span> $g_email_host;</span><br><span class="line">   <span class="keyword">global</span> $g_email_user_name;</span><br><span class="line">   <span class="keyword">global</span> $g_email_password;</span><br><span class="line">   <span class="keyword">global</span> $g_email_sender_account;</span><br><span class="line">   <span class="keyword">global</span> $g_email_sender_name;</span><br><span class="line">   $mail = <span class="keyword">new</span> PHPMailer();    </span><br><span class="line">   $mail-&gt;IsSMTP();                  </span><br><span class="line">   $mail-&gt;Host = $g_email_host;     </span><br><span class="line">   $mail-&gt;SMTPAuth = <span class="keyword">true</span>;          </span><br><span class="line">   $mail-&gt;Username = $g_email_user_name;     <span class="comment">//发件人邮箱 </span></span><br><span class="line">   $mail-&gt;Password = $g_email_password; <span class="comment">// 发件人邮箱密码   </span></span><br><span class="line">   $mail-&gt;From = $g_email_sender_account;      <span class="comment">// 发件人邮箱    </span></span><br><span class="line">   $mail-&gt;FromName =  $g_email_sender_name;  </span><br><span class="line">  </span><br><span class="line">   $mail-&gt;CharSet = <span class="string">"UTF-8"</span>;      </span><br><span class="line">   $mail-&gt;setLanguage(<span class="string">'zh_cn'</span>);   </span><br><span class="line">   $mail-&gt;Encoding = <span class="string">"base64"</span>;    </span><br><span class="line">   <span class="keyword">foreach</span>($sendto_email <span class="keyword">as</span> $val)</span><br><span class="line">   &#123;</span><br><span class="line">      $mail-&gt;AddAddress($val,<span class="string">""</span>); </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">   $mail-&gt;Subject = $subject;      </span><br><span class="line">   $mail-&gt;Body =$msg;                                                                  </span><br><span class="line">   $date = date(<span class="string">'Y-m-d'</span>,time());  </span><br><span class="line">   <span class="keyword">if</span>(!$mail-&gt;Send())    </span><br><span class="line">   &#123;       </span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"邮件错误信息: "</span> . $mail-&gt;ErrorInfo;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      file_put_contents(<span class="string">"&#123;$date&#125;.log"</span>, date(<span class="string">'Y-m-d H:i:s'</span>, time()) . <span class="string">"邮件发送成功 \n"</span>, FILE_APPEND);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHPMailer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在命令行下执行PHP]]></title>
      <url>http://yoursite.com/2016/01/07/php-cli-use/</url>
      <content type="html"><![CDATA[<p><center>本文主要讲解在命令行下执行PHP</center><br><a id="more"></a></p>
<h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>从版本 4.3.0 开始，PHP 提供了一种新类型的 CLI SAPI（Server Application Programming Interface，服务端应用编程端口）支持，名为 CLI，意为 Command Line Interface，即命令行接口。顾名思义，该 CLI SAPI 模块主要用作 PHP 的开发外壳应用。</p>
<h2 id="CLI运行PHP代码"><a href="#CLI运行PHP代码" class="headerlink" title="CLI运行PHP代码"></a>CLI运行PHP代码</h2><p>CLI SAPI 模块有以下三种不同的方法来获取要运行的 PHP 代码：<br>1.让 PHP 运行指定文件。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">my_script</span><span class="selector-class">.php</span> </span><br><span class="line"><span class="selector-tag">php</span> <span class="selector-tag">-f</span> <span class="selector-tag">my_script</span><span class="selector-class">.php</span></span><br></pre></td></tr></table></figure>
<p>以上两种方法（使用或不使用 -f 参数）都能够运行给定的 my_script.php 文件。可以选择任何文件来运行，指定的 PHP 脚本并非必须要以 .php 为扩展名，它们可以有任意的文件名和扩展名。<br>2.在命令行直接运行 PHP 代码。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r 'print_r(<span class="name">get_defined_constants</span>())<span class="comment">;'</span></span><br></pre></td></tr></table></figure>
<p>在使用这种方法时，请注意外壳变量的替代及引号的使用。</p>
<blockquote>
<p>Note:<br>请仔细阅读以上范例，在运行代码时没有开始和结束的标记符！加上 -r 参数后，这些标记符是不需要的，加上它们会导致语法错误。</p>
</blockquote>
<p>3.<code>(这种没用过。。。)</code>通过标准输入（stdin）提供需要运行的 PHP 代码。<br>以上用法提供了非常强大的功能，使得可以如下范例所示，动态地生成 PHP 代码并通过命令行运行这些代码：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ some_application | <span class="type">some_filter</span> | <span class="type">php</span> | <span class="type">sort</span> -u &gt;final_output.txt</span><br></pre></td></tr></table></figure></p>
<p>以上三种运行代码的方法不能同时使用。</p>
<h2 id="CLI参数详解"><a href="#CLI参数详解" class="headerlink" title="CLI参数详解"></a>CLI参数详解</h2><p><img src="/cli-1.png" alt=""></p>
<h2 id="CLI传参"><a href="#CLI传参" class="headerlink" title="CLI传参"></a>CLI传参</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当使用这个命令执行：php script.php arg1 arg2 arg3</span><br><span class="line"></span><br><span class="line">以上例程的输出类似于：</span><br><span class="line">array(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;  <span class="type">string</span>(<span class="number">10</span>) <span class="string">"script.php"</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;  <span class="type">string</span>(<span class="number">4</span>) <span class="string">"arg1"</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;  <span class="type">string</span>(<span class="number">4</span>) <span class="string">"arg2"</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;  <span class="type">string</span>(<span class="number">4</span>) <span class="string">"arg3"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CLI交互式shell模式运行php"><a href="#CLI交互式shell模式运行php" class="headerlink" title="CLI交互式shell模式运行php"></a>CLI交互式shell模式运行php</h2><p>用过 Python 的朋友对Python的交互式shell比较熟悉，在命令行下，如果我们直接输入python命令，则会进入python的交互式shell程序，接下来就可以交互式的执行一些计算任务。<br><img src="/cli-2.png" alt=""><br>在PHP命令行中，同样提供了类似的功能，使用<code>-a</code>参数即可进入交互shell模式。<br><img src="/cli-3.png" alt=""></p>
<h2 id="运行内建的Web服务器"><a href="#运行内建的Web服务器" class="headerlink" title="运行内建的Web服务器"></a>运行内建的Web服务器</h2><p>从PHP 5.4.0开始，PHP的命令行模式提供了一个内建的web服务器。使用<code>-S</code>开始运行web服务。<br>在该目录中，执行以下命令可以启动内建web服务器，并且默认以当前目录为工作目录</p>
<p><img src="/cli-4.png" alt=""><br><img src="/cli-5.png" alt=""></p>
<p>以上我们在启动内建服务器的时候，只指定了<code>-S</code>参数让PHP以web服务器的方式运行，这时，PHP会使用当前目录作为工作目录，因此回到当前目录下寻找请求的文件，我们还可以使用<code>-t</code>参数指定其它的目录作为工作目录（文档根目录）。</p>
<h2 id="查找PHP的配置文件"><a href="#查找PHP的配置文件" class="headerlink" title="查找PHP的配置文件"></a>查找PHP的配置文件</h2><p>在有的时候，由于服务器上软件安装比较混乱，我们可能安装了多个版本的PHP环境，这时候，如何定位我们的PHP程序使用的是那个配置文件就比较重要了。在PHP命令行参数中，提供了<code>--ini</code>参数，使用该参数，可以列出当前PHP的配置文件信息</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gaosongdeMacBook-<span class="string">Pro:</span>sync Ken$ php --ini</span><br><span class="line">Configuration File (php.ini) <span class="string">Path:</span> <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php/<span class="number">5.5</span></span><br><span class="line">Loaded Configuration <span class="string">File:</span>         <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>php.ini</span><br><span class="line">Scan <span class="keyword">for</span> additional .ini files <span class="string">in:</span> <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d</span><br><span class="line">Additional .ini files <span class="string">parsed:</span>      <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-igbinary.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-libevent.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-memcache.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-memcached.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-mongo.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-mongodb.ini,</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>php<span class="regexp">/5.5/</span>conf.d/ext-xdebug.ini</span><br><span class="line"></span><br><span class="line">gaosongdeMacBook-<span class="string">Pro:</span>sync Ken$</span><br></pre></td></tr></table></figure>
<h2 id="CLI语法检查"><a href="#CLI语法检查" class="headerlink" title="CLI语法检查"></a>CLI语法检查</h2><p>有时候，我们只需要检查php脚本是否存在语法错误，而不需要执行它，比如在一些编辑器或者IDE中检查PHP文件是否存在语法错误。<br>使用<code>-l</code>（–syntax-check）可以只对PHP文件进行语法检查。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gaosongdeMacBook-<span class="keyword">Pro</span>:sync Ken$ php -<span class="keyword">l</span> index.php</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">syntax</span> errors detected <span class="keyword">in</span> index.php</span><br><span class="line"></span><br><span class="line">$ php -<span class="keyword">l</span> index.php </span><br><span class="line">PHP <span class="keyword">Parse</span> <span class="keyword">error</span>:  <span class="keyword">syntax</span> <span class="keyword">error</span>, unexpected 'echo' (T_ECHO) <span class="keyword">in</span> index.php <span class="keyword">on</span> <span class="keyword">line</span> 3</span><br><span class="line"><span class="keyword">Parse</span> <span class="keyword">error</span>: <span class="keyword">syntax</span> <span class="keyword">error</span>, unexpected 'echo' (T_ECHO) <span class="keyword">in</span> index.php <span class="keyword">on</span> <span class="keyword">line</span> 3</span><br><span class="line">Errors parsing index.php</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>1.<a href="http://segmentfault.com/a/1190000002949021" target="_blank" rel="external">PHP命令行下的世界</a><br>2.<a href="http://php.net/manual/zh/features.commandline.php" target="_blank" rel="external">PHP手册</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 命令行 </tag>
            
            <tag> CLI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PhpDocument的使用]]></title>
      <url>http://yoursite.com/2016/01/06/how-to-use-phpdoc/</url>
      <content type="html"><![CDATA[<p><center>本文主要介绍怎样使用PhpDocumentor</center><br><a id="more"></a></p>
<h1 id="phpDocumentor是什么"><a href="#phpDocumentor是什么" class="headerlink" title="phpDocumentor是什么"></a>phpDocumentor是什么</h1><p>phpDocumentor（以下用phpdoc代替），是一个能为php文件自动生成API文档的自动化工具。</p>
<h1 id="phpdoc的目标"><a href="#phpdoc的目标" class="headerlink" title="phpdoc的目标"></a>phpdoc的目标</h1><blockquote>
<p>“Provide PHP Developers with all the tools and resources necessary to write effective and comprehensive documentation with as little effort possible.”</p>
</blockquote>
<p>让php开发者用最少的精力开发出有效全面的文档</p>
<h1 id="第一组phpdoc文档"><a href="#第一组phpdoc文档" class="headerlink" title="第一组phpdoc文档"></a>第一组phpdoc文档</h1><h2 id="对php源文件"><a href="#对php源文件" class="headerlink" title="对php源文件"></a>对php源文件</h2><p>在php源文件中我们要写入一系列的代码块(DocBlock),来让phpdoc识别怎么样，并生成文档</p>
<h2 id="哪些元素可以被写入文档"><a href="#哪些元素可以被写入文档" class="headerlink" title="哪些元素可以被写入文档"></a>哪些元素可以被写入文档</h2><ul>
<li><p>Function                            函数</p>
</li>
<li><p>Constant                           常量</p>
</li>
<li><p>Class                                类</p>
</li>
<li><p>Interface                           借口</p>
</li>
<li><p>Trait                                 特征</p>
</li>
<li><p>Class constant                类常量</p>
</li>
<li><p>Property                          属性</p>
</li>
<li><p>Method                            方法</p>
</li>
</ul>
<h2 id="代码块怎么用"><a href="#代码块怎么用" class="headerlink" title="代码块怎么用"></a>代码块怎么用</h2><h3 id="代码块长啥样"><a href="#代码块长啥样" class="headerlink" title="代码块长啥样"></a>代码块长啥样</h3><p>以<code>/**</code>开始，以<code>*/</code>结束，在开始和结束之间每一行都以<code>*</code>开头</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"> /** </span><br><span class="line"></span><br><span class="line"> * This is a DocBlock.</span><br><span class="line"></span><br><span class="line"><span class="php"> */ </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">associatedFunction</span><span class="params">()</span> </span>&#123; &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="代码块内容"><a href="#代码块内容" class="headerlink" title="代码块内容"></a>代码块内容</h3><p>代码快被分为三个部分：Summary，Description，Tags，每一部分都是可选的，但是要写Description必须要有Summary。</p>
<ul>
<li>Summary</li>
</ul>
<p>有时被称为一个简短的描述,简要介绍相关元素的功能。</p>
<p>Summary遇到以下任意一种方式，就被视为结束：</p>
<p>1.遇到<code>‘.’</code>+一个回车符</p>
<p>2.遇到连续的两个回车符</p>
<ul>
<li>Description</li>
</ul>
<p>有时也被称为长描述,可以提供更多的信息。即Summary的详细说明。</p>
<p>Description遇到以下任意一种方式，就被视为结束：</p>
<p>1.遇到第一个<code>tag</code>标签</p>
<p>2.遇到块标签截止符<code>‘*/’</code></p>
<ul>
<li>Tags</li>
</ul>
<p>即标签，提供简短统一的标签符来诠释某些特征与方法（后面会有详细介绍）</p>
<p>每一个标签都是以<code>@</code>符开始，且一行只能有一个标签</p>
<ul>
<li>例子</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"> <span class="comment"><span class="markdown">/**  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>A summary informing </span>the<span class="markdown"> user what </span>the<span class="markdown"> associated element does.    </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>A <span class="emphasis">*description*</span>, that can span multiple lines, to go <span class="emphasis">_in-depth_</span> into </span>the<span class="markdown"> details of this element  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>and to provide some background information or textual references.  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param string $myArgument With </span>a<span class="markdown"> <span class="emphasis">*description*</span> of this argument, these may also </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*    </span>span multiple lines.  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*  </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return void </span></span></span><br><span class="line"><span class="comment"><span class="markdown"></span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span>  </span><br><span class="line"></span><br><span class="line">function myFunction($myArgument) </span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="根据代码快内容生成phpdoc文档"><a href="#根据代码快内容生成phpdoc文档" class="headerlink" title="根据代码快内容生成phpdoc文档"></a>根据代码快内容生成phpdoc文档</h3><p>在终端下执行phpdoc命令</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ken@ken-K42JY:~$ cd '/var/www/info' </span><br><span class="line"></span><br><span class="line">ken@ken-K42JY:/var/www/info$ ls -l</span><br><span class="line"></span><br><span class="line">total 8</span><br><span class="line"></span><br><span class="line">-rwxrwxrwx 1 root root 438 Dec 14 17:01 info.php</span><br><span class="line"></span><br><span class="line">-rwxrwxrwx 1 ken  ken  771 Dec 14 17:01 info.php~</span><br><span class="line"></span><br><span class="line">ken@ken-K42JY:/var/www/info$ phpdoc -f info.php -t ./demo/    //将info.php文件生成phpdoc文档</span><br><span class="line"></span><br><span class="line">Collecting files .. OK</span><br><span class="line"></span><br><span class="line">Initializing parser .. OK</span><br><span class="line"></span><br><span class="line">Parsing files</span><br><span class="line"></span><br><span class="line">Parsing /var/www/info/info.php</span><br><span class="line"></span><br><span class="line">  No summary was found for this file  </span><br><span class="line"></span><br><span class="line">Storing <span class="keyword">cache</span> <span class="keyword">in</span> <span class="string">"/var/www/info/demo"</span> .. OK</span><br><span class="line"></span><br><span class="line"><span class="keyword">Load</span> <span class="keyword">cache</span>                                                         ..    <span class="number">0.001</span>s</span><br><span class="line"></span><br><span class="line">Preparing <span class="keyword">template</span> <span class="string">"clean"</span>                                         ..    <span class="number">0.022</span>s</span><br><span class="line"></span><br><span class="line">Preparing <span class="number">17</span> transformations                                       ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Build</span> <span class="string">"elements"</span> <span class="keyword">index</span>                                             ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Replace</span> textual FQCNs <span class="keyword">with</span> <span class="keyword">object</span> aliases                          ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">Resolve @<span class="keyword">link</span> <span class="keyword">and</span> @see tags <span class="keyword">in</span> descriptions                        ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">Enriches inline example tags <span class="keyword">with</span> their sources                    ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Build</span> <span class="string">"packages"</span> <span class="keyword">index</span>                                             ..    <span class="number">0.001</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Build</span> <span class="string">"namespaces"</span> <span class="keyword">index</span> <span class="keyword">and</span> <span class="keyword">add</span> namespaces <span class="keyword">to</span> <span class="string">"elements"</span>          ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Collect</span> all markers embedded <span class="keyword">in</span> tags                               ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">Transform analyzed <span class="keyword">project</span> <span class="keyword">into</span> artifacts                          .. </span><br><span class="line"></span><br><span class="line">Applying <span class="number">17</span> transformations</span><br><span class="line"></span><br><span class="line">  Initialize writer <span class="string">"phpDocumentor\Plugin\Core\Transformer\Writer\FileIo"</span></span><br><span class="line"></span><br><span class="line">  Initialize writer <span class="string">"phpDocumentor\Plugin\Twig\Writer\Twig"</span></span><br><span class="line"></span><br><span class="line">  Initialize writer <span class="string">"phpDocumentor\Plugin\Graphs\Writer\Graph"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"FileIo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"FileIo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"FileIo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"FileIo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"FileIo"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"twig"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Execute</span> transformation <span class="keyword">using</span> writer <span class="string">"Graph"</span></span><br><span class="line"></span><br><span class="line">Unable <span class="keyword">to</span> find the <span class="string">`dot`</span> command <span class="keyword">of</span> the GraphViz package. <span class="keyword">Is</span> GraphViz correctly installed <span class="keyword">and</span> <span class="keyword">present</span> <span class="keyword">in</span> your <span class="keyword">path</span>?   <span class="number">0.075</span>s</span><br><span class="line"></span><br><span class="line"><span class="keyword">Analyze</span> results <span class="keyword">and</span> write report <span class="keyword">to</span> <span class="keyword">log</span>                            ..    <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">ken@ken-K42JY:/<span class="keyword">var</span>/www/info$</span><br></pre></td></tr></table></figure>
<p>phpdoc –h<br>会得到一个详细的参数表，其中几个重要的参数如下：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby">f 要进行分析的文件名，多个文件用逗号隔开</span></span><br><span class="line"><span class="ruby">-d 要分析的目录，多个目录用逗号分割</span></span><br><span class="line"><span class="ruby">-t 生成的文档的存放路径</span></span><br><span class="line"><span class="ruby">-o 输出的文档格式，结构为输出格式：转换器名：模板目录。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">--template=responsive-twig   将模板换成responsive-twig，自带的模板：用<span class="string">`phpdoc template:list`</span>指令查看</span></span><br></pre></td></tr></table></figure>
<p>生成的文档如下图所示：</p>
<p><img src="/phpdoc-1.png" alt=""></p>
<p>文档目录如下图所示：</p>
<p><img src="/phpdoc-2.png" alt=""></p>
<p>其中index.html是入口文件</p>
<h3 id="No-summary-was-found-for-this-file"><a href="#No-summary-was-found-for-this-file" class="headerlink" title="No summary was found for this file"></a>No summary was found for this file</h3><p>我们注意到上一段代码中的第11行报了一个错误<code>No summary was found for this file</code></p>
<p>这是因为</p>
<blockquote>
<p>Does the top of your file have two such docblocks? The first docblock is expected to be the one for the file itself, and a second docblock should pair up with the first documentable code element that appears after it.<br>However, if you only have one docblock at the top of the file, it will get paired up with the first code element found, thus the “file itself” will seem to be missing its docblock. That is what that error is supposed to indicate.</p>
</blockquote>
<p>故我们这样写我们的代码块：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"> /**</span><br><span class="line"></span><br><span class="line"> * 文档自身的Summary.</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"></span><br><span class="line"> * 文档自身的Description</span><br><span class="line"></span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"> /**</span><br><span class="line"></span><br><span class="line"> * A summary informing the user what the associated element does.第一个函数的summary</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"></span><br><span class="line"> * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element</span><br><span class="line"></span><br><span class="line"> * and to provide some background information or textual references.</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"></span><br><span class="line"> * @param string $myArgument With a *description* of this argument, these may also</span><br><span class="line"></span><br><span class="line"> *    span multiple lines.</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"></span><br><span class="line"> * @return void</span><br><span class="line"></span><br><span class="line"><span class="php"> */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">($myArgument)</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">  &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">  &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="tags标签详解"><a href="#tags标签详解" class="headerlink" title="tags标签详解"></a>tags标签详解</h1><h2 id="标记用途描述"><a href="#标记用途描述" class="headerlink" title="标记用途描述"></a>标记用途描述</h2><table>
<thead>
<tr>
<th style="text-align:left">标签</th>
<th>用途</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@abstract</td>
<td></td>
<td style="text-align:left">用于描述抽象类的变量和方法</td>
</tr>
<tr>
<td style="text-align:left">@access</td>
<td>public, private or protected</td>
<td style="text-align:left">文档的访问、使用权限. @access private 表明这个文档是被保护的</td>
</tr>
<tr>
<td style="text-align:left">@author</td>
<td>author name <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#117;&#x74;&#104;&#111;&#x72;&#x40;&#x65;&#x6d;&#x61;&#x69;&#x6c;">&#x61;&#117;&#x74;&#104;&#111;&#x72;&#x40;&#x65;&#x6d;&#x61;&#x69;&#x6c;</a></td>
<td style="text-align:left">描述当前元素的作者</td>
</tr>
<tr>
<td style="text-align:left">@copyright</td>
<td>名称 时间</td>
<td style="text-align:left">文档版权信息</td>
</tr>
<tr>
<td style="text-align:left">@deprecated</td>
<td>version</td>
<td style="text-align:left">文档中被废除的方法</td>
</tr>
<tr>
<td style="text-align:left">@deprec</td>
<td></td>
<td style="text-align:left">同@deprecated</td>
</tr>
<tr>
<td style="text-align:left">@example</td>
<td>/path/to/example</td>
<td style="text-align:left">文档的外部保存的示例文件的位置</td>
</tr>
<tr>
<td style="text-align:left">@exception</td>
<td></td>
<td style="text-align:left">文档中方法抛出的异常，也可参照 @throws</td>
</tr>
<tr>
<td style="text-align:left">@ignorel</td>
<td></td>
<td style="text-align:left">忽略文档中指定的关键字</td>
</tr>
<tr>
<td style="text-align:left">@internal</td>
<td></td>
<td style="text-align:left">开发团队内部信息</td>
</tr>
<tr>
<td style="text-align:left">@link</td>
<td>URL</td>
<td style="text-align:left">类似于license 但还可以通过link找到文档中的更多个详细的信息</td>
</tr>
<tr>
<td style="text-align:left">@name</td>
<td>变量别名</td>
<td style="text-align:left">为某个变量指定别名</td>
</tr>
<tr>
<td style="text-align:left">@magic</td>
<td></td>
<td style="text-align:left">phpdoc.de compatibility</td>
</tr>
<tr>
<td style="text-align:left">@package</td>
<td>封装包的名称</td>
<td style="text-align:left">一组相关类、函数封装的包名称</td>
</tr>
<tr>
<td style="text-align:left">@var</td>
<td>type</td>
<td style="text-align:left">文档中的变量及其类型</td>
</tr>
<tr>
<td style="text-align:left">@version</td>
<td></td>
<td style="text-align:left">文档、类、函数的版本信息</td>
</tr>
<tr>
<td style="text-align:left">@global</td>
<td>类型：$globalvarname</td>
<td style="text-align:left">文档中的全局变量及有关的方法和函数</td>
</tr>
<tr>
<td style="text-align:left">@static</td>
<td></td>
<td style="text-align:left">记录静态类、方法</td>
</tr>
<tr>
<td style="text-align:left">@static</td>
<td>var</td>
<td style="text-align:left">在类、函数中使用的静态变量</td>
</tr>
<tr>
<td style="text-align:left">@subpackage</td>
<td></td>
<td style="text-align:left">子版本</td>
</tr>
<tr>
<td style="text-align:left">@throws</td>
<td></td>
<td style="text-align:left">某一方法抛出的异常</td>
</tr>
<tr>
<td style="text-align:left">@todo</td>
<td></td>
<td style="text-align:left">表示文件未完成或者要完善的地方  </td>
</tr>
<tr>
<td style="text-align:left">@return</td>
<td>如返回bool</td>
<td style="text-align:left">函数返回结果描述，一般不用在void（空返回结果的）的函数中</td>
</tr>
<tr>
<td style="text-align:left">@see</td>
<td>如 Class Login（）</td>
<td style="text-align:left">文件关联的任何元素（全局变量，包括，页面，类，函数，定义，方法，变量)</td>
</tr>
<tr>
<td style="text-align:left">@since</td>
<td>version</td>
<td style="text-align:left">记录什么时候对文档的哪些部分进行了更改</td>
</tr>
<tr>
<td style="text-align:left">@param</td>
<td></td>
<td style="text-align:left">变量含义注释</td>
</tr>
</tbody>
</table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"> /**</span><br><span class="line"></span><br><span class="line">  * start page for webaccess</span><br><span class="line"></span><br><span class="line">  *</span><br><span class="line"></span><br><span class="line">  * PHP version 5</span><br><span class="line"></span><br><span class="line">  *</span><br><span class="line"></span><br><span class="line">  * @category  PHP</span><br><span class="line"></span><br><span class="line">  * @package   PSI_Web</span><br><span class="line"></span><br><span class="line">  * @author    Michael Cramer &lt;BigMichi1@users.sourceforge.net&gt;</span><br><span class="line"></span><br><span class="line">  * @copyright 2009 phpSysInfo</span><br><span class="line"></span><br><span class="line">  * @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License</span><br><span class="line"></span><br><span class="line">  * @version   SVN: $Id: class.Webpage.inc.php 412 2010-12-29 09:45:53Z Jacky672 $</span><br><span class="line"></span><br><span class="line">  * @link      http://phpsysinfo.sourceforge.net</span><br><span class="line"></span><br><span class="line"><span class="php">  */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">  /**</span><br><span class="line"></span><br><span class="line">  * generate the dynamic webpage</span><br><span class="line"></span><br><span class="line">  *</span><br><span class="line"></span><br><span class="line">  * @category  PHP</span><br><span class="line"></span><br><span class="line">  * @package   PSI_Web</span><br><span class="line"></span><br><span class="line">  * @author    Michael Cramer &lt;BigMichi1@users.sourceforge.net&gt;</span><br><span class="line"></span><br><span class="line">  * @copyright 2009 phpSysInfo</span><br><span class="line"></span><br><span class="line">  * @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License</span><br><span class="line"></span><br><span class="line">  * @version   Release: 3.0</span><br><span class="line"></span><br><span class="line">  * @link      http://phpsysinfo.sourceforge.net</span><br><span class="line"></span><br><span class="line"><span class="php">  */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"> <span class="class"><span class="keyword">class</span> <span class="title">Webpage</span> <span class="keyword">extends</span> <span class="title">Output</span> <span class="keyword">implements</span> <span class="title">PSI_Interface_Output</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"> &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * configured language</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @var String</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> $_language;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * configured template</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @var String</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> $_template;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * all available templates</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @var Array</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> $_templates = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * all available languages</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @var Array</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> $_languages = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * check for all extensions that are needed, initialize needed vars and read config.php</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">parent</span>::__construct();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">$this</span>-&gt;_getTemplateList();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">$this</span>-&gt;_getLanguageList();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * checking config.php setting for template, if not supportet set phpsysinfo.css as default</span><br><span class="line"></span><br><span class="line">      * checking config.php setting for language, if not supported set en as default</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @return void</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_checkTemplateLanguage</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">$this</span>-&gt;_template = trim(PSI_DEFAULT_TEMPLATE);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">if</span> (!file_exists(APP_ROOT.<span class="string">'/templates/'</span>.<span class="keyword">$this</span>-&gt;_template.<span class="string">".css"</span>)) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             <span class="keyword">$this</span>-&gt;_template = <span class="string">'phpsysinfo'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">$this</span>-&gt;_language = trim(PSI_DEFAULT_LANG);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">if</span> (!file_exists(APP_ROOT.<span class="string">'/language/'</span>.<span class="keyword">$this</span>-&gt;_language.<span class="string">".xml"</span>)) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             <span class="keyword">$this</span>-&gt;_language = <span class="string">'en'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * get all available tamplates and store them in internal array</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @return void</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_getTemplateList</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $dirlist = CommonFunctions::gdc(APP_ROOT.<span class="string">'/templates/'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         sort($dirlist);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">foreach</span> ($dirlist <span class="keyword">as</span> $file) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             $tpl_ext = substr($file, strlen($file) - <span class="number">4</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             $tpl_name = substr($file, <span class="number">0</span>, strlen($file) - <span class="number">4</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             <span class="keyword">if</span> ($tpl_ext === <span class="string">".css"</span>) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">                 array_push(<span class="keyword">$this</span>-&gt;_templates, $tpl_name);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * get all available translations and store them in internal array</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @return void</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_getLanguageList</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $dirlist = CommonFunctions::gdc(APP_ROOT.<span class="string">'/language/'</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         sort($dirlist);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">foreach</span> ($dirlist <span class="keyword">as</span> $file) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             $lang_ext = substr($file, strlen($file) - <span class="number">4</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             $lang_name = substr($file, <span class="number">0</span>, strlen($file) - <span class="number">4</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             <span class="keyword">if</span> ($lang_ext == <span class="string">".xml"</span>) &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">                 array_push(<span class="keyword">$this</span>-&gt;_languages, $lang_name);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">             &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     </span></span><br><span class="line"><span class="php"></span></span><br><span class="line">     /**</span><br><span class="line"></span><br><span class="line">      * render the page</span><br><span class="line"></span><br><span class="line">      *</span><br><span class="line"></span><br><span class="line">      * @return void</span><br><span class="line"></span><br><span class="line"><span class="php">      */</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#123;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">$this</span>-&gt;_checkTemplateLanguage();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $tpl = <span class="keyword">new</span> Template(<span class="string">"/templates/html/index_dynamic.html"</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $tpl-&gt;set(<span class="string">"template"</span>, <span class="keyword">$this</span>-&gt;_template);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $tpl-&gt;set(<span class="string">"templates"</span>, <span class="keyword">$this</span>-&gt;_templates);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $tpl-&gt;set(<span class="string">"language"</span>, <span class="keyword">$this</span>-&gt;_language);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         $tpl-&gt;set(<span class="string">"languages"</span>, <span class="keyword">$this</span>-&gt;_languages);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         </span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">         <span class="keyword">echo</span> $tpl-&gt;fetch();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">     &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"> &#125;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>1.<a href="http://www.cnblogs.com/picaso/archive/2012/10/04/2711435.html" target="_blank" rel="external">小五的博客</a></p>
<p>2.<a href="http://www.phpdoc.org" target="_blank" rel="external">phpdoc官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> phpdoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP和HTTPS的区别]]></title>
      <url>http://yoursite.com/2016/01/05/diff-http-https/</url>
      <content type="html"><![CDATA[<p><center>本文主要讲解http和https的关系与区别</center><br><a id="more"></a></p>
<h2 id="注意⚠️"><a href="#注意⚠️" class="headerlink" title="注意⚠️"></a>注意⚠️</h2><ul>
<li>https协议需要到ca申请证书，一般免费证书很少，需要交费。</li>
<li>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议</li>
<li>http和https使用的是完全不同的连接方式用的端口也不一样,前者是80,后者是443</li>
</ul>
<h2 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h2><p>HTTP主要有这些不足：</p>
<ul>
<li>通信使用明文,内容可能被窃听</li>
</ul>
<p><img src="/diff-1.png" alt=""></p>
<ul>
<li>不验证通信方身份,因此有可能遭遇伪装</li>
</ul>
<p><img src="/diff-2.png" alt=""></p>
<ul>
<li>无法验证报文的完整性,所有有可能已篡改</li>
</ul>
<p><img src="/diff-3.png" alt=""></p>
<h2 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP + 加密 + 认证 + 完整性保护 = HTTPS"></a>HTTP + 加密 + 认证 + 完整性保护 = HTTPS</h2><p><img src="/diff-4.png" alt=""></p>
<h3 id="HTTPS是身披SSL外壳的HTTP"><a href="#HTTPS是身披SSL外壳的HTTP" class="headerlink" title="HTTPS是身披SSL外壳的HTTP"></a>HTTPS是身披SSL外壳的HTTP</h3><p>通常情况下HTTP是直接和TCP层进行通信的。当使用SSL(安全套阶字)时,则演变成HTTP先和SSL通信,SSL再和TCP通信的了。</p>
<p><img src="/diff-5.png" alt=""></p>
<h3 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h3><p>讲解SSL前,科普一下加密方法,SSL采用的是一种叫做<code>公开密钥加密</code>的加密处理方式</p>
<h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>加密和解密用的一个密钥的方式称为对称加密,也叫做<code>共享密钥加密</code></p>
<p><img src="/diff-6.png" alt=""></p>
<p>对称加密在发送加密信息时也需要将密钥发送给对方,但这样可以被攻击者截取,就不安全啦～</p>
<p><img src="/diff-7.png" alt=""></p>
<h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>非对称加密又称作<code>公开密钥加密</code>,它很好的解决了对称加密密钥被截取的问题。<br>非对称加密采用一对非对称的密钥,一把叫做私有密钥,一把叫做共有密钥。<br>使用非对称加密,发送密文一方使用对方的共有密钥进行加密处理,对方收到加密信息后,再使用自己的私有密钥进行解密。</p>
<p><img src="/diff-8.png" alt=""></p>
<h4 id="HTTPS采用混合加密机制"><a href="#HTTPS采用混合加密机制" class="headerlink" title="HTTPS采用混合加密机制"></a>HTTPS采用混合加密机制</h4><p>HTTPS采用对称加密和非对称加密所混合的加密机制。<br>若密钥能安全交换,那么有可能仅考虑非对称加密。<br>但是非对称加密与对称加密相比,处理速度相对较慢。<br><img src="/diff-9.png" alt=""></p>
<h4 id="公开密钥的认证"><a href="#公开密钥的认证" class="headerlink" title="公开密钥的认证"></a>公开密钥的认证</h4><p>使用数字证书认证机构和其颁布的公开密钥证书进行认证。即让第三方独立机构进行验证。</p>
<p><img src="/diff-10.png" alt=""><br><img src="/diff-11.png" alt=""></p>
<p>私有密钥是保存在服务器端的～<br>注意⚠️：认证是要钱的！！！</p>
<h3 id="HTTPS安全通信机制"><a href="#HTTPS安全通信机制" class="headerlink" title="HTTPS安全通信机制"></a>HTTPS安全通信机制</h3><p><img src="/diff-12.png" alt=""></p>
<p>下图是完整的HTTPS的通信过程</p>
<p><img src="/diff-13.png" alt=""></p>
<h3 id="为什么HTTPS不是那么普及"><a href="#为什么HTTPS不是那么普及" class="headerlink" title="为什么HTTPS不是那么普及"></a>为什么HTTPS不是那么普及</h3><p>1.加密通信与纯文本通信相比,消耗更多的CPU和内存资源</p>
<p>2.购买证书是要钱的！</p>
<p>3.少许对客户端有要求的情况下,会要求客户端也必须有一个证书.</p>
<ul>
<li>这里客户端证书,其实就类似表示个人信息的时候,除了用户名/密码, 还有一个CA 认证过的身份. 应为个人证书一般来说上别人无法模拟的,所有这样能够更深的确认自己的身份</li>
<li>目前少数个人银行的专业版是这种做法,具体证书可能是拿U盘作为一个备份的载体</li>
</ul>
<h3 id="HTTPS-一定是繁琐的"><a href="#HTTPS-一定是繁琐的" class="headerlink" title="HTTPS 一定是繁琐的"></a>HTTPS 一定是繁琐的</h3><p>1.本来简单的http协议,一个get一个response. 由于https 要还密钥和确认加密算法的需要.单握手就需要6/7 个往返,任何应用中,过多的round trip 肯定影响性能.<br>2.接下来才是具体的http协议,每一次响应或者请求, 都要求客户端和服务端对会话的内容做加密/解密,尽管对称加密/解密效率比较高,可是仍然要消耗过多的CPU,为此有专门的SSL 芯片. 如果CPU 信能比较低的话,肯定会降低性能,从而不能serve 更多的请求,加密后数据量的影响. 所以,才会出现那么多的安全认证提示</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.《图解HTTP》,【日】上野宣 </p>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络协议 </tag>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/01/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Blog </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
